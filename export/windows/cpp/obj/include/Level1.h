// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_Level1
#define INCLUDED_Level1

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(Level1)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS4(flixel,addons,editors,ogmo,FlxOgmoLoader)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,tile,FlxBaseTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemap)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Level1_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef Level1_obj OBJ_;
		Level1_obj();

	public:
		enum { _hx_ClassId = 0x174695b1 };

		void __construct( ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Level1")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Level1"); }
		static hx::ObjectPtr< Level1_obj > __new( ::Dynamic MaxSize);
		static hx::ObjectPtr< Level1_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Level1_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Level1","\x4d","\x32","\xe4","\xd8"); }

		 ::flixel::FlxSprite background;
		 ::flixel::addons::editors::ogmo::FlxOgmoLoader map;
		 ::Player player;
		 ::flixel::tile::FlxTilemap ground;
		void create();

		void update(Float elapsed);

		void LoadMap();
		::Dynamic LoadMap_dyn();

		void PlaceEntities(::String type, ::Xml data);
		::Dynamic PlaceEntities_dyn();

};


#endif /* INCLUDED_Level1 */ 
