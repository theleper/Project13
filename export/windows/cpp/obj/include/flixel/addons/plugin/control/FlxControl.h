// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#ifndef INCLUDED_flixel_addons_plugin_control_FlxControl
#define INCLUDED_flixel_addons_plugin_control_FlxControl

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS4(flixel,addons,plugin,control,FlxControl)
HX_DECLARE_CLASS4(flixel,addons,plugin,control,FlxControlHandler)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,ObjectMap)

namespace flixel{
namespace addons{
namespace plugin{
namespace control{


class HXCPP_CLASS_ATTRIBUTES FlxControl_obj : public  ::flixel::FlxBasic_obj
{
	public:
		typedef  ::flixel::FlxBasic_obj super;
		typedef FlxControl_obj OBJ_;
		FlxControl_obj();

	public:
		enum { _hx_ClassId = 0x5382ec46 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="flixel.addons.plugin.control.FlxControl")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"flixel.addons.plugin.control.FlxControl"); }
		static hx::ObjectPtr< FlxControl_obj > __new();
		static hx::ObjectPtr< FlxControl_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~FlxControl_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("FlxControl","\x2b","\x25","\xad","\x48"); }

		static void __boot();
		static  ::flixel::addons::plugin::control::FlxControlHandler player1;
		static  ::flixel::addons::plugin::control::FlxControlHandler player2;
		static  ::flixel::addons::plugin::control::FlxControlHandler player3;
		static  ::flixel::addons::plugin::control::FlxControlHandler player4;
		static  ::haxe::ds::ObjectMap _members;
		static  ::flixel::addons::plugin::control::FlxControlHandler create( ::flixel::FlxSprite Sprite,int MovementType,int StoppingType,hx::Null< int >  Player,hx::Null< bool >  UpdateFacing,hx::Null< bool >  EnableArrowKeys);
		static ::Dynamic create_dyn();

		static bool remove( ::flixel::addons::plugin::control::FlxControlHandler ControlHandler);
		static ::Dynamic remove_dyn();

		static void clear();
		static ::Dynamic clear_dyn();

		static void start( ::flixel::addons::plugin::control::FlxControlHandler ControlHandler);
		static ::Dynamic start_dyn();

		static void stop( ::flixel::addons::plugin::control::FlxControlHandler ControlHandler);
		static ::Dynamic stop_dyn();

		void update(Float elapsed);

		void destroy();

};

} // end namespace flixel
} // end namespace addons
} // end namespace plugin
} // end namespace control

#endif /* INCLUDED_flixel_addons_plugin_control_FlxControl */ 
