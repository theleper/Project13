// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_plugin_control_FlxControlHandler
#include <flixel/addons/plugin/control/FlxControlHandler.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObject
#include <openfl/_legacy/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_DisplayObjectContainer
#include <openfl/_legacy/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_IBitmapDrawable
#include <openfl/_legacy/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_InteractiveObject
#include <openfl/_legacy/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl__legacy_display_Sprite
#include <openfl/_legacy/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_EventDispatcher
#include <openfl/_legacy/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_events_IEventDispatcher
#include <openfl/_legacy/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7fb2310ab316335e_27_new,"flixel.addons.plugin.control.FlxControlHandler","new",0x68e8c1ce,"flixel.addons.plugin.control.FlxControlHandler.new","flixel/addons/plugin/control/FlxControlHandler.hx",27,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_251_setMovementSpeed,"flixel.addons.plugin.control.FlxControlHandler","setMovementSpeed",0x8c0830a8,"flixel.addons.plugin.control.FlxControlHandler.setMovementSpeed","flixel/addons/plugin/control/FlxControlHandler.hx",251,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_269_setStandardSpeed,"flixel.addons.plugin.control.FlxControlHandler","setStandardSpeed",0x99014bda,"flixel.addons.plugin.control.FlxControlHandler.setStandardSpeed","flixel/addons/plugin/control/FlxControlHandler.hx",269,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_296_setAdvancedMovementSpeed,"flixel.addons.plugin.control.FlxControlHandler","setAdvancedMovementSpeed",0x093b89a6,"flixel.addons.plugin.control.FlxControlHandler.setAdvancedMovementSpeed","flixel/addons/plugin/control/FlxControlHandler.hx",296,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_313_setRotationSpeed,"flixel.addons.plugin.control.FlxControlHandler","setRotationSpeed",0x52b8e239,"flixel.addons.plugin.control.FlxControlHandler.setRotationSpeed","flixel/addons/plugin/control/FlxControlHandler.hx",313,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_327_setRotationType,"flixel.addons.plugin.control.FlxControlHandler","setRotationType",0x63c90448,"flixel.addons.plugin.control.FlxControlHandler.setRotationType","flixel/addons/plugin/control/FlxControlHandler.hx",327,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_341_setMaximumRotationSpeed,"flixel.addons.plugin.control.FlxControlHandler","setMaximumRotationSpeed",0x7bdd1e99,"flixel.addons.plugin.control.FlxControlHandler.setMaximumRotationSpeed","flixel/addons/plugin/control/FlxControlHandler.hx",341,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_355_setRotationDeceleration,"flixel.addons.plugin.control.FlxControlHandler","setRotationDeceleration",0x41fd6f2d,"flixel.addons.plugin.control.FlxControlHandler.setRotationDeceleration","flixel/addons/plugin/control/FlxControlHandler.hx",355,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_367_setRotationLimits,"flixel.addons.plugin.control.FlxControlHandler","setRotationLimits",0x400c45e6,"flixel.addons.plugin.control.FlxControlHandler.setRotationLimits","flixel/addons/plugin/control/FlxControlHandler.hx",367,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_384_disableRotationLimits,"flixel.addons.plugin.control.FlxControlHandler","disableRotationLimits",0xd893d1ac,"flixel.addons.plugin.control.FlxControlHandler.disableRotationLimits","flixel/addons/plugin/control/FlxControlHandler.hx",384,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_396_setRotationKeys,"flixel.addons.plugin.control.FlxControlHandler","setRotationKeys",0x5dc6f382,"flixel.addons.plugin.control.FlxControlHandler.setRotationKeys","flixel/addons/plugin/control/FlxControlHandler.hx",396,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_426_setThrust,"flixel.addons.plugin.control.FlxControlHandler","setThrust",0x9105dbc8,"flixel.addons.plugin.control.FlxControlHandler.setThrust","flixel/addons/plugin/control/FlxControlHandler.hx",426,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_455_setMaximumSpeed,"flixel.addons.plugin.control.FlxControlHandler","setMaximumSpeed",0xc421fcb7,"flixel.addons.plugin.control.FlxControlHandler.setMaximumSpeed","flixel/addons/plugin/control/FlxControlHandler.hx",455,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_470_setDeceleration,"flixel.addons.plugin.control.FlxControlHandler","setDeceleration",0xa58250cf,"flixel.addons.plugin.control.FlxControlHandler.setDeceleration","flixel/addons/plugin/control/FlxControlHandler.hx",470,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_484_setGravity,"flixel.addons.plugin.control.FlxControlHandler","setGravity",0x6de6cb1e,"flixel.addons.plugin.control.FlxControlHandler.setGravity","flixel/addons/plugin/control/FlxControlHandler.hx",484,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_497_flipGravity,"flixel.addons.plugin.control.FlxControlHandler","flipGravity",0x4c98f28f,"flixel.addons.plugin.control.FlxControlHandler.flipGravity","flixel/addons/plugin/control/FlxControlHandler.hx",497,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_518_resetSpeeds,"flixel.addons.plugin.control.FlxControlHandler","resetSpeeds",0x5f3891a9,"flixel.addons.plugin.control.FlxControlHandler.resetSpeeds","flixel/addons/plugin/control/FlxControlHandler.hx",518,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_539_setSounds,"flixel.addons.plugin.control.FlxControlHandler","setSounds",0x346ed5f4,"flixel.addons.plugin.control.FlxControlHandler.setSounds","flixel/addons/plugin/control/FlxControlHandler.hx",539,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_571_setFireButton,"flixel.addons.plugin.control.FlxControlHandler","setFireButton",0xdf29db78,"flixel.addons.plugin.control.FlxControlHandler.setFireButton","flixel/addons/plugin/control/FlxControlHandler.hx",571,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_598_setJumpButton,"flixel.addons.plugin.control.FlxControlHandler","setJumpButton",0x6f1486b0,"flixel.addons.plugin.control.FlxControlHandler.setJumpButton","flixel/addons/plugin/control/FlxControlHandler.hx",598,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_626_setBounds,"flixel.addons.plugin.control.FlxControlHandler","setBounds",0x685db3a5,"flixel.addons.plugin.control.FlxControlHandler.setBounds","flixel/addons/plugin/control/FlxControlHandler.hx",626,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_634_removeBounds,"flixel.addons.plugin.control.FlxControlHandler","removeBounds",0x750f92ab,"flixel.addons.plugin.control.FlxControlHandler.removeBounds","flixel/addons/plugin/control/FlxControlHandler.hx",634,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_638_moveUp,"flixel.addons.plugin.control.FlxControlHandler","moveUp",0x8db9fb1e,"flixel.addons.plugin.control.FlxControlHandler.moveUp","flixel/addons/plugin/control/FlxControlHandler.hx",638,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_670_moveDown,"flixel.addons.plugin.control.FlxControlHandler","moveDown",0xe14883e5,"flixel.addons.plugin.control.FlxControlHandler.moveDown","flixel/addons/plugin/control/FlxControlHandler.hx",670,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_703_moveLeft,"flixel.addons.plugin.control.FlxControlHandler","moveLeft",0xe68a938a,"flixel.addons.plugin.control.FlxControlHandler.moveLeft","flixel/addons/plugin/control/FlxControlHandler.hx",703,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_735_moveRight,"flixel.addons.plugin.control.FlxControlHandler","moveRight",0x49c392f9,"flixel.addons.plugin.control.FlxControlHandler.moveRight","flixel/addons/plugin/control/FlxControlHandler.hx",735,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_767_moveAntiClockwise,"flixel.addons.plugin.control.FlxControlHandler","moveAntiClockwise",0x5b0e360d,"flixel.addons.plugin.control.FlxControlHandler.moveAntiClockwise","flixel/addons/plugin/control/FlxControlHandler.hx",767,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_794_moveClockwise,"flixel.addons.plugin.control.FlxControlHandler","moveClockwise",0x836d578f,"flixel.addons.plugin.control.FlxControlHandler.moveClockwise","flixel/addons/plugin/control/FlxControlHandler.hx",794,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_821_moveThrust,"flixel.addons.plugin.control.FlxControlHandler","moveThrust",0x81fc60db,"flixel.addons.plugin.control.FlxControlHandler.moveThrust","flixel/addons/plugin/control/FlxControlHandler.hx",821,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_858_moveReverse,"flixel.addons.plugin.control.FlxControlHandler","moveReverse",0xf7a1817f,"flixel.addons.plugin.control.FlxControlHandler.moveReverse","flixel/addons/plugin/control/FlxControlHandler.hx",858,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_888_runFire,"flixel.addons.plugin.control.FlxControlHandler","runFire",0xfb6e290f,"flixel.addons.plugin.control.FlxControlHandler.runFire","flixel/addons/plugin/control/FlxControlHandler.hx",888,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_927_runJump,"flixel.addons.plugin.control.FlxControlHandler","runJump",0xfe1c1a47,"flixel.addons.plugin.control.FlxControlHandler.runJump","flixel/addons/plugin/control/FlxControlHandler.hx",927,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1008_update,"flixel.addons.plugin.control.FlxControlHandler","update",0x4812ad5b,"flixel.addons.plugin.control.FlxControlHandler.update","flixel/addons/plugin/control/FlxControlHandler.hx",1008,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1199_setCustomKeys,"flixel.addons.plugin.control.FlxControlHandler","setCustomKeys",0x72454775,"flixel.addons.plugin.control.FlxControlHandler.setCustomKeys","flixel/addons/plugin/control/FlxControlHandler.hx",1199,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1235_setCursorControl,"flixel.addons.plugin.control.FlxControlHandler","setCursorControl",0xfda803f7,"flixel.addons.plugin.control.FlxControlHandler.setCursorControl","flixel/addons/plugin/control/FlxControlHandler.hx",1235,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1257_setWASDControl,"flixel.addons.plugin.control.FlxControlHandler","setWASDControl",0x4ce83e72,"flixel.addons.plugin.control.FlxControlHandler.setWASDControl","flixel/addons/plugin/control/FlxControlHandler.hx",1257,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1279_setESDFControl,"flixel.addons.plugin.control.FlxControlHandler","setESDFControl",0xd8c0debd,"flixel.addons.plugin.control.FlxControlHandler.setESDFControl","flixel/addons/plugin/control/FlxControlHandler.hx",1279,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1301_setIJKLControl,"flixel.addons.plugin.control.FlxControlHandler","setIJKLControl",0x3564e0ab,"flixel.addons.plugin.control.FlxControlHandler.setIJKLControl","flixel/addons/plugin/control/FlxControlHandler.hx",1301,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1323_setHJKLControl,"flixel.addons.plugin.control.FlxControlHandler","setHJKLControl",0xb486756a,"flixel.addons.plugin.control.FlxControlHandler.setHJKLControl","flixel/addons/plugin/control/FlxControlHandler.hx",1323,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1345_setZQSDControl,"flixel.addons.plugin.control.FlxControlHandler","setZQSDControl",0xd42afe25,"flixel.addons.plugin.control.FlxControlHandler.setZQSDControl","flixel/addons/plugin/control/FlxControlHandler.hx",1345,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1367_setDvorakSimplifiedControl,"flixel.addons.plugin.control.FlxControlHandler","setDvorakSimplifiedControl",0x9bb0cb16,"flixel.addons.plugin.control.FlxControlHandler.setDvorakSimplifiedControl","flixel/addons/plugin/control/FlxControlHandler.hx",1367,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_1389_setNumpadControl,"flixel.addons.plugin.control.FlxControlHandler","setNumpadControl",0x8dbfece0,"flixel.addons.plugin.control.FlxControlHandler.setNumpadControl","flixel/addons/plugin/control/FlxControlHandler.hx",1389,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_32_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",32,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_36_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",36,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_40_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",40,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_44_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",44,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_48_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",48,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_53_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",53,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_57_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",57,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_61_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",61,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_65_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",65,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_69_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",69,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_74_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",74,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_79_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",79,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_84_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",84,0x97dcc944)
HX_LOCAL_STACK_FRAME(_hx_pos_7fb2310ab316335e_95_boot,"flixel.addons.plugin.control.FlxControlHandler","boot",0x5ad9d304,"flixel.addons.plugin.control.FlxControlHandler.boot","flixel/addons/plugin/control/FlxControlHandler.hx",95,0x97dcc944)
namespace flixel{
namespace addons{
namespace plugin{
namespace control{

void FlxControlHandler_obj::__construct( ::flixel::FlxSprite Sprite,int MovementType,int StoppingType,hx::Null< bool >  __o_UpdateFacing,hx::Null< bool >  __o_EnableArrowKeys){
bool UpdateFacing = __o_UpdateFacing.Default(false);
bool EnableArrowKeys = __o_EnableArrowKeys.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_27_new)
HXLINE( 142)		this->_nextFireTime = (int)0;
HXLINE( 137)		this->_gravityY = (int)0;
HXLINE( 136)		this->_gravityX = (int)0;
HXLINE( 134)		this->_ySpeedAdjust = ((Float)0);
HXLINE( 133)		this->_xSpeedAdjust = ((Float)0);
HXLINE( 128)		this->_enforceAngleLimits = false;
HXLINE( 125)		this->_isRotating = false;
HXLINE( 123)		this->_thrustEnabled = false;
HXLINE( 104)		this->_right = false;
HXLINE( 103)		this->_left = false;
HXLINE( 102)		this->_down = false;
HXLINE( 101)		this->_up = false;
HXLINE(  93)		this->enabled = false;
HXLINE(  90)		this->isPressedRight = false;
HXLINE(  89)		this->isPressedLeft = false;
HXLINE(  88)		this->isPressedDown = false;
HXLINE(  87)		this->isPressedUp = false;
HXLINE( 215)		this->_entity = Sprite;
HXLINE( 217)		this->_movement = MovementType;
HXLINE( 218)		this->_stopping = StoppingType;
HXLINE( 220)		this->_xFacing = UpdateFacing;
HXLINE( 221)		this->_yFacing = UpdateFacing;
HXLINE( 223)		this->_rotation = (int)0;
HXLINE( 224)		this->_rotationStopping = (int)0;
HXLINE( 226)		if (EnableArrowKeys) {
HXLINE( 228)			this->setCursorControl(null(),null(),null(),null());
            		}
HXLINE( 231)		this->enabled = true;
HXLINE( 232)		this->invertX = false;
HXLINE( 233)		this->invertY = false;
            	}

Dynamic FlxControlHandler_obj::__CreateEmpty() { return new FlxControlHandler_obj; }

void *FlxControlHandler_obj::_hx_vtable = 0;

Dynamic FlxControlHandler_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxControlHandler_obj > _hx_result = new FlxControlHandler_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4]);
	return _hx_result;
}

bool FlxControlHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x38e4a024;
}

void FlxControlHandler_obj::setMovementSpeed(int SpeedX,int SpeedY,int SpeedMaxX,int SpeedMaxY,hx::Null< int >  __o_DecelerationX,hx::Null< int >  __o_DecelerationY){
int DecelerationX = __o_DecelerationX.Default(0);
int DecelerationY = __o_DecelerationY.Default(0);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_251_setMovementSpeed)
HXLINE( 252)		this->_leftMoveSpeed = -(SpeedX);
HXLINE( 253)		this->_rightMoveSpeed = SpeedX;
HXLINE( 254)		this->_upMoveSpeed = -(SpeedY);
HXLINE( 255)		this->_downMoveSpeed = SpeedY;
HXLINE( 257)		this->setMaximumSpeed(SpeedMaxX,SpeedMaxY,null());
HXLINE( 258)		this->setDeceleration(DecelerationX,DecelerationY);
            	}


HX_DEFINE_DYNAMIC_FUNC6(FlxControlHandler_obj,setMovementSpeed,(void))

void FlxControlHandler_obj::setStandardSpeed(int Speed,hx::Null< bool >  __o_Acceleration){
bool Acceleration = __o_Acceleration.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_269_setStandardSpeed)
HXDLIN( 269)		if (Acceleration) {
HXLINE( 271)			this->setMovementSpeed(Speed,Speed,Speed,Speed,Speed,Speed);
            		}
            		else {
HXLINE( 275)			this->setMovementSpeed(Speed,Speed,Speed,Speed,null(),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlHandler_obj,setStandardSpeed,(void))

void FlxControlHandler_obj::setAdvancedMovementSpeed(int LeftSpeed,int RightSpeed,int UpSpeed,int DownSpeed,int SpeedMaxX,int SpeedMaxY,hx::Null< int >  __o_DecelerationX,hx::Null< int >  __o_DecelerationY){
int DecelerationX = __o_DecelerationX.Default(0);
int DecelerationY = __o_DecelerationY.Default(0);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_296_setAdvancedMovementSpeed)
HXLINE( 297)		this->_leftMoveSpeed = -(LeftSpeed);
HXLINE( 298)		this->_rightMoveSpeed = RightSpeed;
HXLINE( 299)		this->_upMoveSpeed = -(UpSpeed);
HXLINE( 300)		this->_downMoveSpeed = DownSpeed;
HXLINE( 302)		this->setMaximumSpeed(SpeedMaxX,SpeedMaxY,null());
HXLINE( 303)		this->setDeceleration(DecelerationX,DecelerationY);
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxControlHandler_obj,setAdvancedMovementSpeed,(void))

void FlxControlHandler_obj::setRotationSpeed(Float AntiClockwiseSpeed,Float ClockwiseSpeed,Float SpeedMax,Float Deceleration){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_313_setRotationSpeed)
HXLINE( 314)		this->_antiClockwiseRotationSpeed = -(AntiClockwiseSpeed);
HXLINE( 315)		this->_clockwiseRotationSpeed = ClockwiseSpeed;
HXLINE( 317)		this->setRotationKeys(null(),null(),null(),null());
HXLINE( 318)		this->setMaximumRotationSpeed(SpeedMax,null());
HXLINE( 319)		this->setRotationDeceleration(Deceleration);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setRotationSpeed,(void))

void FlxControlHandler_obj::setRotationType(int RotationType,int StoppingType){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_327_setRotationType)
HXLINE( 328)		this->_rotation = RotationType;
HXLINE( 329)		this->_rotationStopping = StoppingType;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlHandler_obj,setRotationType,(void))

void FlxControlHandler_obj::setMaximumRotationSpeed(Float Speed,hx::Null< bool >  __o_LimitVelocity){
bool LimitVelocity = __o_LimitVelocity.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_341_setMaximumRotationSpeed)
HXLINE( 342)		this->_entity->maxAngular = Speed;
HXLINE( 344)		this->_capAngularVelocity = LimitVelocity;
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlHandler_obj,setMaximumRotationSpeed,(void))

void FlxControlHandler_obj::setRotationDeceleration(Float Speed){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_355_setRotationDeceleration)
HXDLIN( 355)		this->_entity->angularDrag = Speed;
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControlHandler_obj,setRotationDeceleration,(void))

void FlxControlHandler_obj::setRotationLimits(int MinimumAngle,int MaximumAngle){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_367_setRotationLimits)
HXDLIN( 367)		bool _hx_tmp;
HXDLIN( 367)		bool _hx_tmp1;
HXDLIN( 367)		if ((MinimumAngle <= MaximumAngle)) {
HXDLIN( 367)			_hx_tmp1 = (MinimumAngle < (int)-180);
            		}
            		else {
HXDLIN( 367)			_hx_tmp1 = true;
            		}
HXDLIN( 367)		if (!(_hx_tmp1)) {
HXDLIN( 367)			_hx_tmp = (MaximumAngle > (int)180);
            		}
            		else {
HXDLIN( 367)			_hx_tmp = true;
            		}
HXDLIN( 367)		if (_hx_tmp) {
HXLINE( 369)			HX_STACK_DO_THROW(HX_("FlxControlHandler setRotationLimits: Invalid Minimum / Maximum angle",ca,03,0c,98));
            		}
            		else {
HXLINE( 373)			this->_enforceAngleLimits = true;
HXLINE( 374)			this->_minAngle = MinimumAngle;
HXLINE( 375)			this->_maxAngle = MaximumAngle;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlHandler_obj,setRotationLimits,(void))

void FlxControlHandler_obj::disableRotationLimits(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_384_disableRotationLimits)
HXDLIN( 384)		this->_enforceAngleLimits = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,disableRotationLimits,(void))

void FlxControlHandler_obj::setRotationKeys(hx::Null< bool >  __o_LeftRight,hx::Null< bool >  __o_UpDown,::String __o_CustomAntiClockwise,::String __o_CustomClockwise){
bool LeftRight = __o_LeftRight.Default(true);
bool UpDown = __o_UpDown.Default(false);
::String CustomAntiClockwise = __o_CustomAntiClockwise.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
::String CustomClockwise = __o_CustomClockwise.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_396_setRotationKeys)
HXLINE( 397)		this->_isRotating = true;
HXLINE( 398)		this->_rotateAntiClockwise = true;
HXLINE( 399)		this->_rotateClockwise = true;
HXLINE( 400)		this->_antiClockwiseKey = HX_("LEFT",07,d0,70,32);
HXLINE( 401)		this->_clockwiseKey = HX_("RIGHT",bc,43,52,67);
HXLINE( 403)		if (UpDown) {
HXLINE( 405)			this->_antiClockwiseKey = HX_("UP",5b,4a,00,00);
HXLINE( 406)			this->_clockwiseKey = HX_("DOWN",62,c0,2e,2d);
            		}
HXLINE( 409)		bool _hx_tmp;
HXDLIN( 409)		if ((CustomAntiClockwise != HX_("",00,00,00,00))) {
HXLINE( 409)			_hx_tmp = (CustomClockwise != HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 409)			_hx_tmp = false;
            		}
HXDLIN( 409)		if (_hx_tmp) {
HXLINE( 411)			this->_antiClockwiseKey = CustomAntiClockwise;
HXLINE( 412)			this->_clockwiseKey = CustomClockwise;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setRotationKeys,(void))

void FlxControlHandler_obj::setThrust(::String ThrustKey,Float ThrustSpeed,::String ReverseKey,hx::Null< Float >  __o_ReverseSpeed){
Float ReverseSpeed = __o_ReverseSpeed.Default(0);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_426_setThrust)
HXLINE( 427)		this->_thrustEnabled = false;
HXLINE( 428)		this->_reverseEnabled = false;
HXLINE( 430)		if ((ThrustKey != HX_("",00,00,00,00))) {
HXLINE( 432)			this->_thrustKey = ThrustKey;
HXLINE( 433)			this->_thrustSpeed = ::Math_obj::floor(ThrustSpeed);
HXLINE( 434)			this->_thrustEnabled = true;
            		}
HXLINE( 437)		if (hx::IsNotNull( ReverseKey )) {
HXLINE( 439)			this->_reverseKey = ReverseKey;
HXLINE( 440)			this->_reverseSpeed = ::Math_obj::floor(ReverseSpeed);
HXLINE( 441)			this->_reverseEnabled = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setThrust,(void))

void FlxControlHandler_obj::setMaximumSpeed(int SpeedX,int SpeedY,hx::Null< bool >  __o_LimitVelocity){
bool LimitVelocity = __o_LimitVelocity.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_455_setMaximumSpeed)
HXLINE( 456)		this->_entity->maxVelocity->set_x(SpeedX);
HXLINE( 457)		this->_entity->maxVelocity->set_y(SpeedY);
HXLINE( 459)		this->_capVelocity = LimitVelocity;
            	}


HX_DEFINE_DYNAMIC_FUNC3(FlxControlHandler_obj,setMaximumSpeed,(void))

void FlxControlHandler_obj::setDeceleration(int SpeedX,int SpeedY){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_470_setDeceleration)
HXLINE( 471)		this->_entity->drag->set_x(SpeedX);
HXLINE( 472)		this->_entity->drag->set_y(SpeedY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlHandler_obj,setDeceleration,(void))

void FlxControlHandler_obj::setGravity(int ForceX,int ForceY){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_484_setGravity)
HXLINE( 485)		this->_gravityX = ForceX;
HXLINE( 486)		this->_gravityY = ForceY;
HXLINE( 488)		this->_entity->acceleration->set_x(this->_gravityX);
HXLINE( 489)		this->_entity->acceleration->set_y(this->_gravityY);
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlHandler_obj,setGravity,(void))

void FlxControlHandler_obj::flipGravity(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_497_flipGravity)
HXLINE( 498)		bool _hx_tmp;
HXDLIN( 498)		if (!(::Math_obj::isNaN(this->_gravityX))) {
HXLINE( 498)			_hx_tmp = (this->_gravityX != (int)0);
            		}
            		else {
HXLINE( 498)			_hx_tmp = false;
            		}
HXDLIN( 498)		if (_hx_tmp) {
HXLINE( 500)			this->_gravityX = -(this->_gravityX);
HXLINE( 501)			this->_entity->acceleration->set_x(this->_gravityX);
            		}
HXLINE( 504)		bool _hx_tmp1;
HXDLIN( 504)		if (!(::Math_obj::isNaN(this->_gravityY))) {
HXLINE( 504)			_hx_tmp1 = (this->_gravityY != (int)0);
            		}
            		else {
HXLINE( 504)			_hx_tmp1 = false;
            		}
HXDLIN( 504)		if (_hx_tmp1) {
HXLINE( 506)			this->_gravityY = -(this->_gravityY);
HXLINE( 507)			this->_entity->acceleration->set_y(this->_gravityY);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,flipGravity,(void))

void FlxControlHandler_obj::resetSpeeds(hx::Null< bool >  __o_ResetX,hx::Null< bool >  __o_ResetY){
bool ResetX = __o_ResetX.Default(true);
bool ResetY = __o_ResetY.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_518_resetSpeeds)
HXLINE( 519)		if (ResetX) {
HXLINE( 521)			this->_xSpeedAdjust = (int)0;
            		}
HXLINE( 524)		if (ResetY) {
HXLINE( 526)			this->_ySpeedAdjust = (int)0;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(FlxControlHandler_obj,resetSpeeds,(void))

void FlxControlHandler_obj::setSounds( ::flixel::_hx_system::FlxSound Jump, ::flixel::_hx_system::FlxSound Fire, ::flixel::_hx_system::FlxSound Walk, ::flixel::_hx_system::FlxSound Thrust){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_539_setSounds)
HXLINE( 540)		if (hx::IsNotNull( Jump )) {
HXLINE( 542)			this->_jumpSound = Jump;
            		}
HXLINE( 545)		if (hx::IsNotNull( Fire )) {
HXLINE( 547)			this->_fireSound = Fire;
            		}
HXLINE( 550)		if (hx::IsNotNull( Walk )) {
HXLINE( 552)			this->_walkSound = Walk;
            		}
HXLINE( 555)		if (hx::IsNotNull( Thrust )) {
HXLINE( 557)			this->_thrustSound = Thrust;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setSounds,(void))

void FlxControlHandler_obj::setFireButton(::String Key,int Keymode,int RepeatDelay, ::Dynamic Callback,::String __o_AltKey){
::String AltKey = __o_AltKey.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_571_setFireButton)
HXLINE( 572)		this->_fireKey = Key;
HXLINE( 573)		this->_fireKeyMode = Keymode;
HXLINE( 574)		this->_fireRate = RepeatDelay;
HXLINE( 575)		this->_fireCallback = Callback;
HXLINE( 577)		if ((AltKey != HX_("",00,00,00,00))) {
HXLINE( 579)			this->_altFireKey = AltKey;
            		}
HXLINE( 582)		this->_fire = true;
            	}


HX_DEFINE_DYNAMIC_FUNC5(FlxControlHandler_obj,setFireButton,(void))

void FlxControlHandler_obj::setJumpButton(::String Key,int Keymode,int Height,int Surface,hx::Null< int >  __o_RepeatDelay,hx::Null< int >  __o_JumpFromFall, ::Dynamic Callback,::String __o_AltKey){
int RepeatDelay = __o_RepeatDelay.Default(250);
int JumpFromFall = __o_JumpFromFall.Default(0);
::String AltKey = __o_AltKey.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_598_setJumpButton)
HXLINE( 599)		this->_jumpKey = Key;
HXLINE( 600)		this->_jumpKeyMode = Keymode;
HXLINE( 601)		this->_jumpHeight = Height;
HXLINE( 602)		this->_jumpSurface = Surface;
HXLINE( 603)		this->_jumpRate = RepeatDelay;
HXLINE( 604)		this->_jumpFromFallTime = JumpFromFall;
HXLINE( 605)		this->_jumpCallback = Callback;
HXLINE( 607)		if ((AltKey != HX_("",00,00,00,00))) {
HXLINE( 609)			this->_altJumpKey = AltKey;
            		}
HXLINE( 612)		this->_jump = true;
            	}


HX_DEFINE_DYNAMIC_FUNC8(FlxControlHandler_obj,setJumpButton,(void))

void FlxControlHandler_obj::setBounds(int X,int Y,int Width,int Height){
            	HX_GC_STACKFRAME(&_hx_pos_7fb2310ab316335e_626_setBounds)
HXDLIN( 626)		this->_bounds =  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,X,Y,Width,Height);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setBounds,(void))

void FlxControlHandler_obj::removeBounds(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_634_removeBounds)
HXDLIN( 634)		this->_bounds = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,removeBounds,(void))

bool FlxControlHandler_obj::moveUp(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_638_moveUp)
HXLINE( 639)		bool move = false;
HXLINE( 641)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 641)		int KeyArray;
HXDLIN( 641)		if (this->invertY) {
HXLINE( 641)			::String s = this->_downKey;
HXDLIN( 641)			s = s.toUpperCase();
HXDLIN( 641)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 641)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            			}
            			else {
HXLINE( 641)				KeyArray = (int)-1;
            			}
            		}
            		else {
HXLINE( 641)			::String s1 = this->_upKey;
HXDLIN( 641)			s1 = s1.toUpperCase();
HXDLIN( 641)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 641)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            			}
            			else {
HXLINE( 641)				KeyArray = (int)-1;
            			}
            		}
HXDLIN( 641)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1)) {
HXLINE( 643)			move = true;
HXLINE( 644)			this->isPressedUp = true;
HXLINE( 646)			if (this->_yFacing) {
HXLINE( 648)				this->_entity->set_facing((int)256);
            			}
HXLINE( 651)			if ((this->_movement == (int)0)) {
HXLINE( 653)				this->_entity->velocity->set_y(this->_upMoveSpeed);
            			}
            			else {
HXLINE( 655)				if ((this->_movement == (int)1)) {
HXLINE( 657)					this->_entity->acceleration->set_y(this->_upMoveSpeed);
            				}
            			}
HXLINE( 660)			bool _hx_tmp;
HXDLIN( 660)			if (hx::IsNotNull( this->_bounds )) {
HXLINE( 660)				Float _hx_tmp1 = this->_entity->y;
HXDLIN( 660)				_hx_tmp = (_hx_tmp1 < this->_bounds->get_top());
            			}
            			else {
HXLINE( 660)				_hx_tmp = false;
            			}
HXDLIN( 660)			if (_hx_tmp) {
HXLINE( 662)				 ::flixel::FlxSprite _hx_tmp2 = this->_entity;
HXDLIN( 662)				_hx_tmp2->set_y(this->_bounds->get_top());
            			}
            		}
HXLINE( 666)		return move;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,moveUp,return )

bool FlxControlHandler_obj::moveDown(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_670_moveDown)
HXLINE( 671)		bool move = false;
HXLINE( 673)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 673)		int KeyArray;
HXDLIN( 673)		if (this->invertY) {
HXLINE( 673)			::String s = this->_upKey;
HXDLIN( 673)			s = s.toUpperCase();
HXDLIN( 673)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 673)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            			}
            			else {
HXLINE( 673)				KeyArray = (int)-1;
            			}
            		}
            		else {
HXLINE( 673)			::String s1 = this->_downKey;
HXDLIN( 673)			s1 = s1.toUpperCase();
HXDLIN( 673)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 673)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            			}
            			else {
HXLINE( 673)				KeyArray = (int)-1;
            			}
            		}
HXDLIN( 673)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1)) {
HXLINE( 675)			move = true;
HXLINE( 676)			this->isPressedDown = true;
HXLINE( 678)			if (this->_yFacing) {
HXLINE( 680)				this->_entity->set_facing((int)4096);
            			}
HXLINE( 683)			if ((this->_movement == (int)0)) {
HXLINE( 685)				this->_entity->velocity->set_y(this->_downMoveSpeed);
            			}
            			else {
HXLINE( 687)				if ((this->_movement == (int)1)) {
HXLINE( 689)					this->_entity->acceleration->set_y(this->_downMoveSpeed);
            				}
            			}
HXLINE( 692)			bool _hx_tmp;
HXDLIN( 692)			if (hx::IsNotNull( this->_bounds )) {
HXLINE( 692)				Float _hx_tmp1 = this->_entity->y;
HXDLIN( 692)				_hx_tmp = (_hx_tmp1 > this->_bounds->get_bottom());
            			}
            			else {
HXLINE( 692)				_hx_tmp = false;
            			}
HXDLIN( 692)			if (_hx_tmp) {
HXLINE( 694)				 ::flixel::FlxSprite _hx_tmp2 = this->_entity;
HXDLIN( 694)				_hx_tmp2->set_y(this->_bounds->get_bottom());
            			}
            		}
HXLINE( 699)		return move;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,moveDown,return )

bool FlxControlHandler_obj::moveLeft(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_703_moveLeft)
HXLINE( 704)		bool move = false;
HXLINE( 706)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 706)		int KeyArray;
HXDLIN( 706)		if (this->invertX) {
HXLINE( 706)			::String s = this->_rightKey;
HXDLIN( 706)			s = s.toUpperCase();
HXDLIN( 706)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 706)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            			}
            			else {
HXLINE( 706)				KeyArray = (int)-1;
            			}
            		}
            		else {
HXLINE( 706)			::String s1 = this->_leftKey;
HXDLIN( 706)			s1 = s1.toUpperCase();
HXDLIN( 706)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 706)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            			}
            			else {
HXLINE( 706)				KeyArray = (int)-1;
            			}
            		}
HXDLIN( 706)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1)) {
HXLINE( 708)			move = true;
HXLINE( 709)			this->isPressedLeft = true;
HXLINE( 711)			if (this->_xFacing) {
HXLINE( 713)				this->_entity->set_facing((int)1);
            			}
HXLINE( 716)			if ((this->_movement == (int)0)) {
HXLINE( 718)				this->_entity->velocity->set_x(this->_leftMoveSpeed);
            			}
            			else {
HXLINE( 720)				if ((this->_movement == (int)1)) {
HXLINE( 722)					this->_entity->acceleration->set_x(this->_leftMoveSpeed);
            				}
            			}
HXLINE( 725)			bool _hx_tmp;
HXDLIN( 725)			if (hx::IsNotNull( this->_bounds )) {
HXLINE( 725)				_hx_tmp = (this->_entity->x < this->_bounds->x);
            			}
            			else {
HXLINE( 725)				_hx_tmp = false;
            			}
HXDLIN( 725)			if (_hx_tmp) {
HXLINE( 727)				this->_entity->set_x(this->_bounds->x);
            			}
            		}
HXLINE( 731)		return move;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,moveLeft,return )

bool FlxControlHandler_obj::moveRight(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_735_moveRight)
HXLINE( 736)		bool move = false;
HXLINE( 738)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 738)		int KeyArray;
HXDLIN( 738)		if (this->invertX) {
HXLINE( 738)			::String s = this->_leftKey;
HXDLIN( 738)			s = s.toUpperCase();
HXDLIN( 738)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 738)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            			}
            			else {
HXLINE( 738)				KeyArray = (int)-1;
            			}
            		}
            		else {
HXLINE( 738)			::String s1 = this->_rightKey;
HXDLIN( 738)			s1 = s1.toUpperCase();
HXDLIN( 738)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 738)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            			}
            			else {
HXLINE( 738)				KeyArray = (int)-1;
            			}
            		}
HXDLIN( 738)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1)) {
HXLINE( 740)			move = true;
HXLINE( 741)			this->isPressedRight = true;
HXLINE( 743)			if (this->_xFacing) {
HXLINE( 745)				this->_entity->set_facing((int)16);
            			}
HXLINE( 748)			if ((this->_movement == (int)0)) {
HXLINE( 750)				this->_entity->velocity->set_x(this->_rightMoveSpeed);
            			}
            			else {
HXLINE( 752)				if ((this->_movement == (int)1)) {
HXLINE( 754)					this->_entity->acceleration->set_x(this->_rightMoveSpeed);
            				}
            			}
HXLINE( 757)			bool _hx_tmp;
HXDLIN( 757)			if (hx::IsNotNull( this->_bounds )) {
HXLINE( 757)				Float _hx_tmp1 = this->_entity->x;
HXDLIN( 757)				_hx_tmp = (_hx_tmp1 > this->_bounds->get_right());
            			}
            			else {
HXLINE( 757)				_hx_tmp = false;
            			}
HXDLIN( 757)			if (_hx_tmp) {
HXLINE( 759)				 ::flixel::FlxSprite _hx_tmp2 = this->_entity;
HXDLIN( 759)				_hx_tmp2->set_x(this->_bounds->get_right());
            			}
            		}
HXLINE( 763)		return move;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,moveRight,return )

bool FlxControlHandler_obj::moveAntiClockwise(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_767_moveAntiClockwise)
HXLINE( 768)		bool move = false;
HXLINE( 770)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 770)		::String s = this->_antiClockwiseKey;
HXDLIN( 770)		s = s.toUpperCase();
HXDLIN( 770)		int KeyArray;
HXDLIN( 770)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 770)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 770)			KeyArray = (int)-1;
            		}
HXDLIN( 770)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1)) {
HXLINE( 772)			move = true;
HXLINE( 774)			if ((this->_rotation == (int)0)) {
HXLINE( 776)				this->_entity->angularVelocity = this->_antiClockwiseRotationSpeed;
            			}
            			else {
HXLINE( 778)				if ((this->_rotation == (int)1)) {
HXLINE( 780)					this->_entity->angularAcceleration = this->_antiClockwiseRotationSpeed;
            				}
            			}
HXLINE( 784)			bool _hx_tmp = this->_enforceAngleLimits;
            		}
HXLINE( 790)		return move;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,moveAntiClockwise,return )

bool FlxControlHandler_obj::moveClockwise(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_794_moveClockwise)
HXLINE( 795)		bool move = false;
HXLINE( 797)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 797)		::String s = this->_clockwiseKey;
HXDLIN( 797)		s = s.toUpperCase();
HXDLIN( 797)		int KeyArray;
HXDLIN( 797)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 797)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 797)			KeyArray = (int)-1;
            		}
HXDLIN( 797)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1)) {
HXLINE( 799)			move = true;
HXLINE( 801)			if ((this->_rotation == (int)0)) {
HXLINE( 803)				this->_entity->angularVelocity = this->_clockwiseRotationSpeed;
            			}
            			else {
HXLINE( 805)				if ((this->_rotation == (int)1)) {
HXLINE( 807)					this->_entity->angularAcceleration = this->_clockwiseRotationSpeed;
            				}
            			}
HXLINE( 811)			bool _hx_tmp = this->_enforceAngleLimits;
            		}
HXLINE( 817)		return move;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,moveClockwise,return )

bool FlxControlHandler_obj::moveThrust(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_821_moveThrust)
HXLINE( 822)		bool move = false;
HXLINE( 824)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 824)		::String s = this->_thrustKey;
HXDLIN( 824)		s = s.toUpperCase();
HXDLIN( 824)		int KeyArray;
HXDLIN( 824)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 824)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 824)			KeyArray = (int)-1;
            		}
HXDLIN( 824)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1)) {
HXLINE( 826)			move = true;
HXLINE( 828)			Float Speed = this->_thrustSpeed;
HXDLIN( 828)			Float a = (::Math_obj::floor(this->_entity->angle) * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 828)			Float X = (::Math_obj::cos(a) * Speed);
HXDLIN( 828)			Float Y = (::Math_obj::sin(a) * Speed);
HXDLIN( 828)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 828)			point->_inPool = false;
HXDLIN( 828)			 ::flixel::math::FlxPoint motion = point;
HXLINE( 830)			if ((this->_movement == (int)0)) {
HXLINE( 832)				this->_entity->velocity->set_x(motion->x);
HXLINE( 833)				this->_entity->velocity->set_y(motion->y);
            			}
            			else {
HXLINE( 835)				if ((this->_movement == (int)1)) {
HXLINE( 837)					this->_entity->acceleration->set_x(motion->x);
HXLINE( 838)					this->_entity->acceleration->set_y(motion->y);
            				}
            			}
HXLINE( 841)			bool _hx_tmp;
HXDLIN( 841)			if (hx::IsNotNull( this->_bounds )) {
HXLINE( 841)				_hx_tmp = (this->_entity->x < this->_bounds->x);
            			}
            			else {
HXLINE( 841)				_hx_tmp = false;
            			}
HXDLIN( 841)			if (_hx_tmp) {
HXLINE( 843)				this->_entity->set_x(this->_bounds->x);
            			}
            		}
HXLINE( 848)		bool _hx_tmp1;
HXDLIN( 848)		if (move) {
HXLINE( 848)			_hx_tmp1 = hx::IsNotNull( this->_thrustSound );
            		}
            		else {
HXLINE( 848)			_hx_tmp1 = false;
            		}
HXDLIN( 848)		if (_hx_tmp1) {
HXLINE( 850)			this->_thrustSound->play(false,null(),null());
            		}
HXLINE( 854)		return move;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,moveThrust,return )

bool FlxControlHandler_obj::moveReverse(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_858_moveReverse)
HXLINE( 859)		bool move = false;
HXLINE( 861)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 861)		::String s = this->_reverseKey;
HXDLIN( 861)		s = s.toUpperCase();
HXDLIN( 861)		int KeyArray;
HXDLIN( 861)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 861)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE( 861)			KeyArray = (int)-1;
            		}
HXDLIN( 861)		if (_this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1)) {
HXLINE( 863)			move = true;
HXLINE( 865)			Float Speed = this->_reverseSpeed;
HXDLIN( 865)			Float a = (::Math_obj::floor(this->_entity->angle) * ((Float)::Math_obj::PI / (Float)(int)180));
HXDLIN( 865)			Float X = (::Math_obj::cos(a) * Speed);
HXDLIN( 865)			Float Y = (::Math_obj::sin(a) * Speed);
HXDLIN( 865)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(X,Y);
HXDLIN( 865)			point->_inPool = false;
HXDLIN( 865)			 ::flixel::math::FlxPoint motion = point;
HXLINE( 867)			if ((this->_movement == (int)0)) {
HXLINE( 869)				this->_entity->velocity->set_x(-(motion->x));
HXLINE( 870)				this->_entity->velocity->set_y(-(motion->y));
            			}
            			else {
HXLINE( 872)				if ((this->_movement == (int)1)) {
HXLINE( 874)					this->_entity->acceleration->set_x(-(motion->x));
HXLINE( 875)					this->_entity->acceleration->set_y(-(motion->y));
            				}
            			}
HXLINE( 878)			bool _hx_tmp;
HXDLIN( 878)			if (hx::IsNotNull( this->_bounds )) {
HXLINE( 878)				_hx_tmp = (this->_entity->x < this->_bounds->x);
            			}
            			else {
HXLINE( 878)				_hx_tmp = false;
            			}
HXDLIN( 878)			if (_hx_tmp) {
HXLINE( 880)				this->_entity->set_x(this->_bounds->x);
            			}
            		}
HXLINE( 884)		return move;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,moveReverse,return )

bool FlxControlHandler_obj::runFire(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_888_runFire)
HXLINE( 889)		bool fired = false;
HXLINE( 894)		bool _hx_tmp;
HXDLIN( 894)		bool _hx_tmp1;
HXDLIN( 894)		bool _hx_tmp2;
HXDLIN( 894)		if ((this->_fireKeyMode == (int)0)) {
HXLINE( 894)			 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 894)			::String s = this->_fireKey;
HXDLIN( 894)			s = s.toUpperCase();
HXDLIN( 894)			int KeyArray;
HXDLIN( 894)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 894)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            			}
            			else {
HXLINE( 894)				KeyArray = (int)-1;
            			}
HXDLIN( 894)			_hx_tmp2 = _this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1);
            		}
            		else {
HXLINE( 894)			_hx_tmp2 = false;
            		}
HXDLIN( 894)		if (!(_hx_tmp2)) {
HXLINE( 895)			if ((this->_fireKeyMode == (int)1)) {
HXLINE( 895)				 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN( 895)				::String s1 = this->_fireKey;
HXDLIN( 895)				s1 = s1.toUpperCase();
HXDLIN( 895)				int KeyArray1;
HXDLIN( 895)				if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 895)					KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            				}
            				else {
HXLINE( 895)					KeyArray1 = (int)-1;
            				}
HXLINE( 894)				_hx_tmp1 = _this1->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray1),(int)2);
            			}
            			else {
HXLINE( 894)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 894)			_hx_tmp1 = true;
            		}
HXDLIN( 894)		if (!(_hx_tmp1)) {
HXLINE( 896)			if ((this->_fireKeyMode == (int)2)) {
HXLINE( 896)				 ::flixel::input::keyboard::FlxKeyboard _this2 = ::flixel::FlxG_obj::keys;
HXDLIN( 896)				::String s2 = this->_fireKey;
HXDLIN( 896)				s2 = s2.toUpperCase();
HXDLIN( 896)				int KeyArray2;
HXDLIN( 896)				if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 896)					KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            				}
            				else {
HXLINE( 896)					KeyArray2 = (int)-1;
            				}
HXLINE( 894)				_hx_tmp = _this2->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray2),(int)-1);
            			}
            			else {
HXLINE( 894)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 894)			_hx_tmp = true;
            		}
HXDLIN( 894)		if (_hx_tmp) {
HXLINE( 898)			if ((this->_fireRate > (int)0)) {
HXLINE( 900)				if ((::flixel::FlxG_obj::game->ticks > this->_nextFireTime)) {
HXLINE( 902)					this->_lastFiredTime = ::flixel::FlxG_obj::game->ticks;
HXLINE( 903)					this->_fireCallback();
HXLINE( 904)					fired = true;
HXLINE( 905)					int _hx_tmp3 = this->_lastFiredTime;
HXDLIN( 905)					this->_nextFireTime = (_hx_tmp3 + ::Std_obj::_hx_int(((Float)this->_fireRate / (Float)::flixel::FlxG_obj::timeScale)));
            				}
            			}
            			else {
HXLINE( 910)				this->_lastFiredTime = ::flixel::FlxG_obj::game->ticks;
HXLINE( 911)				this->_fireCallback();
HXLINE( 912)				fired = true;
            			}
            		}
HXLINE( 917)		bool _hx_tmp4;
HXDLIN( 917)		if (fired) {
HXLINE( 917)			_hx_tmp4 = hx::IsNotNull( this->_fireSound );
            		}
            		else {
HXLINE( 917)			_hx_tmp4 = false;
            		}
HXDLIN( 917)		if (_hx_tmp4) {
HXLINE( 919)			this->_fireSound->play(true,null(),null());
            		}
HXLINE( 923)		return fired;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,runFire,return )

bool FlxControlHandler_obj::runJump(){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_927_runJump)
HXLINE( 928)		bool jumped = false;
HXLINE( 931)		if ((((int)this->_entity->touching & (int)this->_jumpSurface) > (int)0)) {
HXLINE( 933)			this->_extraSurfaceTime = (::flixel::FlxG_obj::game->ticks + this->_jumpFromFallTime);
            		}
HXLINE( 936)		bool _hx_tmp;
HXDLIN( 936)		bool _hx_tmp1;
HXDLIN( 936)		bool _hx_tmp2;
HXDLIN( 936)		if ((this->_jumpKeyMode == (int)0)) {
HXLINE( 936)			 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN( 936)			::String s = this->_jumpKey;
HXDLIN( 936)			s = s.toUpperCase();
HXDLIN( 936)			int KeyArray;
HXDLIN( 936)			if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE( 936)				KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            			}
            			else {
HXLINE( 936)				KeyArray = (int)-1;
            			}
HXDLIN( 936)			_hx_tmp2 = _this->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray),(int)1);
            		}
            		else {
HXLINE( 936)			_hx_tmp2 = false;
            		}
HXDLIN( 936)		if (!(_hx_tmp2)) {
HXLINE( 937)			if ((this->_jumpKeyMode == (int)1)) {
HXLINE( 937)				 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN( 937)				::String s1 = this->_jumpKey;
HXDLIN( 937)				s1 = s1.toUpperCase();
HXDLIN( 937)				int KeyArray1;
HXDLIN( 937)				if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE( 937)					KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            				}
            				else {
HXLINE( 937)					KeyArray1 = (int)-1;
            				}
HXLINE( 936)				_hx_tmp1 = _this1->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray1),(int)2);
            			}
            			else {
HXLINE( 936)				_hx_tmp1 = false;
            			}
            		}
            		else {
HXLINE( 936)			_hx_tmp1 = true;
            		}
HXDLIN( 936)		if (!(_hx_tmp1)) {
HXLINE( 938)			if ((this->_jumpKeyMode == (int)2)) {
HXLINE( 938)				 ::flixel::input::keyboard::FlxKeyboard _this2 = ::flixel::FlxG_obj::keys;
HXDLIN( 938)				::String s2 = this->_jumpKey;
HXDLIN( 938)				s2 = s2.toUpperCase();
HXDLIN( 938)				int KeyArray2;
HXDLIN( 938)				if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE( 938)					KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            				}
            				else {
HXLINE( 938)					KeyArray2 = (int)-1;
            				}
HXLINE( 936)				_hx_tmp = _this2->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,KeyArray2),(int)-1);
            			}
            			else {
HXLINE( 936)				_hx_tmp = false;
            			}
            		}
            		else {
HXLINE( 936)			_hx_tmp = true;
            		}
HXDLIN( 936)		if (_hx_tmp) {
HXLINE( 941)			if (((((int)this->_entity->touching & (int)this->_jumpSurface) > (int)0) == false)) {
HXLINE( 944)				if ((::flixel::FlxG_obj::game->ticks > this->_extraSurfaceTime)) {
HXLINE( 946)					return jumped;
            				}
            				else {
HXLINE( 951)					int _hx_tmp3 = this->_lastJumpTime;
HXDLIN( 951)					if ((_hx_tmp3 > (this->_extraSurfaceTime - this->_jumpFromFallTime))) {
HXLINE( 953)						return jumped;
            					}
            				}
HXLINE( 958)				if ((::flixel::FlxG_obj::game->ticks < this->_nextJumpTime)) {
HXLINE( 960)					return jumped;
            				}
            			}
            			else {
HXLINE( 966)				if ((::flixel::FlxG_obj::game->ticks < this->_nextJumpTime)) {
HXLINE( 968)					return jumped;
            				}
            			}
HXLINE( 972)			if ((this->_gravityY > (int)0)) {
HXLINE( 975)				this->_entity->velocity->set_y(-(this->_jumpHeight));
            			}
            			else {
HXLINE( 980)				this->_entity->velocity->set_y(this->_jumpHeight);
            			}
HXLINE( 983)			if (hx::IsNotNull( this->_jumpCallback )) {
HXLINE( 985)				this->_jumpCallback();
            			}
HXLINE( 988)			this->_lastJumpTime = ::flixel::FlxG_obj::game->ticks;
HXLINE( 989)			int _hx_tmp4 = this->_lastJumpTime;
HXDLIN( 989)			this->_nextJumpTime = (_hx_tmp4 + ::Std_obj::_hx_int(((Float)this->_jumpRate / (Float)::flixel::FlxG_obj::timeScale)));
HXLINE( 991)			jumped = true;
            		}
HXLINE( 995)		bool _hx_tmp5;
HXDLIN( 995)		if (jumped) {
HXLINE( 995)			_hx_tmp5 = hx::IsNotNull( this->_jumpSound );
            		}
            		else {
HXLINE( 995)			_hx_tmp5 = false;
            		}
HXDLIN( 995)		if (_hx_tmp5) {
HXLINE( 997)			this->_jumpSound->play(true,null(),null());
            		}
HXLINE(1001)		return jumped;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxControlHandler_obj,runJump,return )

void FlxControlHandler_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1008_update)
HXLINE(1009)		if (hx::IsNull( this->_entity )) {
HXLINE(1011)			return;
            		}
HXLINE(1015)		this->isPressedUp = false;
HXLINE(1016)		this->isPressedDown = false;
HXLINE(1017)		this->isPressedLeft = false;
HXLINE(1018)		this->isPressedRight = false;
HXLINE(1020)		if ((this->_stopping == (int)0)) {
HXLINE(1022)			if ((this->_movement == (int)0)) {
HXLINE(1024)				this->_entity->velocity->set_x((int)0);
HXLINE(1025)				this->_entity->velocity->set_y((int)0);
            			}
            			else {
HXLINE(1027)				if ((this->_movement == (int)1)) {
HXLINE(1029)					this->_entity->acceleration->set_x((int)0);
HXLINE(1030)					this->_entity->acceleration->set_y((int)0);
            				}
            			}
            		}
            		else {
HXLINE(1033)			if ((this->_stopping == (int)1)) {
HXLINE(1035)				if ((this->_movement == (int)0)) {
HXLINE(1037)					this->_entity->velocity->set_x((int)0);
HXLINE(1038)					this->_entity->velocity->set_y((int)0);
            				}
            				else {
HXLINE(1040)					if ((this->_movement == (int)1)) {
HXLINE(1043)						this->_entity->acceleration->set_x(this->_gravityX);
HXLINE(1044)						this->_entity->acceleration->set_y(this->_gravityY);
            					}
            				}
            			}
            		}
HXLINE(1049)		if (this->_isRotating) {
HXLINE(1051)			if ((this->_rotationStopping == (int)0)) {
HXLINE(1053)				if ((this->_rotation == (int)0)) {
HXLINE(1055)					this->_entity->angularVelocity = (int)0;
            				}
            				else {
HXLINE(1057)					if ((this->_rotation == (int)1)) {
HXLINE(1059)						this->_entity->angularAcceleration = (int)0;
            					}
            				}
            			}
            			else {
HXLINE(1062)				if ((this->_rotationStopping == (int)1)) {
HXLINE(1064)					if ((this->_rotation == (int)0)) {
HXLINE(1066)						this->_entity->angularVelocity = (int)0;
            					}
            				}
            			}
HXLINE(1070)			bool hasRotatedAntiClockwise = false;
HXLINE(1071)			bool hasRotatedClockwise = false;
HXLINE(1073)			hasRotatedAntiClockwise = this->moveAntiClockwise();
HXLINE(1075)			if ((hasRotatedAntiClockwise == false)) {
HXLINE(1077)				hasRotatedClockwise = this->moveClockwise();
            			}
HXLINE(1080)			if ((this->_rotationStopping == (int)1)) {
HXLINE(1082)				bool _hx_tmp;
HXDLIN(1082)				bool _hx_tmp1;
HXDLIN(1082)				if ((this->_rotation == (int)1)) {
HXLINE(1082)					_hx_tmp1 = (hasRotatedAntiClockwise == false);
            				}
            				else {
HXLINE(1082)					_hx_tmp1 = false;
            				}
HXDLIN(1082)				if (_hx_tmp1) {
HXLINE(1082)					_hx_tmp = (hasRotatedClockwise == false);
            				}
            				else {
HXLINE(1082)					_hx_tmp = false;
            				}
HXDLIN(1082)				if (_hx_tmp) {
HXLINE(1084)					this->_entity->angularAcceleration = (int)0;
            				}
            			}
HXLINE(1089)			bool _hx_tmp2;
HXDLIN(1089)			bool _hx_tmp3;
HXDLIN(1089)			bool _hx_tmp4;
HXDLIN(1089)			if ((this->_rotationStopping == (int)0)) {
HXLINE(1089)				_hx_tmp4 = (this->_rotation == (int)1);
            			}
            			else {
HXLINE(1089)				_hx_tmp4 = false;
            			}
HXDLIN(1089)			if (_hx_tmp4) {
HXLINE(1089)				_hx_tmp3 = (hasRotatedAntiClockwise == false);
            			}
            			else {
HXLINE(1089)				_hx_tmp3 = false;
            			}
HXDLIN(1089)			if (_hx_tmp3) {
HXLINE(1089)				_hx_tmp2 = (hasRotatedClockwise == false);
            			}
            			else {
HXLINE(1089)				_hx_tmp2 = false;
            			}
HXDLIN(1089)			if (_hx_tmp2) {
HXLINE(1091)				this->_entity->angularVelocity = (int)0;
HXLINE(1092)				this->_entity->angularAcceleration = (int)0;
            			}
            		}
HXLINE(1097)		bool _hx_tmp5;
HXDLIN(1097)		if (!(this->_thrustEnabled)) {
HXLINE(1097)			_hx_tmp5 = this->_reverseEnabled;
            		}
            		else {
HXLINE(1097)			_hx_tmp5 = true;
            		}
HXDLIN(1097)		if (_hx_tmp5) {
HXLINE(1099)			bool moved = false;
HXLINE(1101)			if (this->_thrustEnabled) {
HXLINE(1103)				moved = this->moveThrust();
            			}
HXLINE(1106)			bool _hx_tmp6;
HXDLIN(1106)			if ((moved == false)) {
HXLINE(1106)				_hx_tmp6 = this->_reverseEnabled;
            			}
            			else {
HXLINE(1106)				_hx_tmp6 = false;
            			}
HXDLIN(1106)			if (_hx_tmp6) {
HXLINE(1108)				moved = this->moveReverse();
            			}
            		}
            		else {
HXLINE(1113)			bool movedX = false;
HXLINE(1114)			bool movedY = false;
HXLINE(1116)			if (this->_up) {
HXLINE(1118)				if (this->invertY) {
HXLINE(1118)					movedY = this->moveDown();
            				}
            				else {
HXLINE(1118)					movedY = this->moveUp();
            				}
            			}
HXLINE(1121)			bool _hx_tmp7;
HXDLIN(1121)			if (this->_down) {
HXLINE(1121)				_hx_tmp7 = (movedY == false);
            			}
            			else {
HXLINE(1121)				_hx_tmp7 = false;
            			}
HXDLIN(1121)			if (_hx_tmp7) {
HXLINE(1123)				if (this->invertY) {
HXLINE(1123)					movedY = this->moveUp();
            				}
            				else {
HXLINE(1123)					movedY = this->moveDown();
            				}
            			}
HXLINE(1126)			if (this->_left) {
HXLINE(1128)				if (this->invertX) {
HXLINE(1128)					movedX = this->moveRight();
            				}
            				else {
HXLINE(1128)					movedX = this->moveLeft();
            				}
            			}
HXLINE(1131)			bool _hx_tmp8;
HXDLIN(1131)			if (this->_right) {
HXLINE(1131)				_hx_tmp8 = (movedX == false);
            			}
            			else {
HXLINE(1131)				_hx_tmp8 = false;
            			}
HXDLIN(1131)			if (_hx_tmp8) {
HXLINE(1133)				if (this->invertX) {
HXLINE(1133)					movedX = this->moveLeft();
            				}
            				else {
HXLINE(1133)					movedX = this->moveRight();
            				}
            			}
HXLINE(1136)			bool _hx_tmp9;
HXDLIN(1136)			if (movedX) {
HXLINE(1136)				_hx_tmp9 = movedY;
            			}
            			else {
HXLINE(1136)				_hx_tmp9 = false;
            			}
HXDLIN(1136)			if (_hx_tmp9) {
HXLINE(1138)				if ((this->_movement == (int)0)) {
HXLINE(1140)					{
HXLINE(1140)						 ::flixel::math::FlxPoint _g = this->_entity->velocity;
HXDLIN(1140)						_g->set_x((_g->x * ((Float)0.707106781185)));
            					}
HXLINE(1141)					{
HXLINE(1141)						 ::flixel::math::FlxPoint _g1 = this->_entity->velocity;
HXDLIN(1141)						_g1->set_y((_g1->y * ((Float)0.707106781185)));
            					}
            				}
            				else {
HXLINE(1143)					if ((this->_movement == (int)1)) {
HXLINE(1145)						{
HXLINE(1145)							 ::flixel::math::FlxPoint _g2 = this->_entity->acceleration;
HXDLIN(1145)							_g2->set_x((_g2->x * ((Float)0.707106781185)));
            						}
HXLINE(1146)						{
HXLINE(1146)							 ::flixel::math::FlxPoint _g3 = this->_entity->acceleration;
HXDLIN(1146)							_g3->set_y((_g3->y * ((Float)0.707106781185)));
            						}
            					}
            				}
            			}
            		}
HXLINE(1151)		if (this->_fire) {
HXLINE(1153)			this->runFire();
            		}
HXLINE(1156)		if (this->_jump) {
HXLINE(1158)			this->runJump();
            		}
HXLINE(1161)		if (this->_capVelocity) {
HXLINE(1163)			if ((this->_entity->velocity->x > this->_entity->maxVelocity->x)) {
HXLINE(1165)				this->_entity->velocity->set_x(this->_entity->maxVelocity->x);
            			}
HXLINE(1168)			if ((this->_entity->velocity->y > this->_entity->maxVelocity->y)) {
HXLINE(1170)				this->_entity->velocity->set_y(this->_entity->maxVelocity->y);
            			}
            		}
HXLINE(1175)		if (hx::IsNotNull( this->_walkSound )) {
HXLINE(1177)			bool _hx_tmp10;
HXDLIN(1177)			bool _hx_tmp11;
HXDLIN(1177)			if ((this->_movement == (int)0)) {
HXLINE(1177)				_hx_tmp11 = (this->_entity->velocity->x != (int)0);
            			}
            			else {
HXLINE(1177)				_hx_tmp11 = false;
            			}
HXDLIN(1177)			if (!(_hx_tmp11)) {
HXLINE(1177)				if ((this->_movement == (int)1)) {
HXLINE(1177)					_hx_tmp10 = (this->_entity->acceleration->x != (int)0);
            				}
            				else {
HXLINE(1177)					_hx_tmp10 = false;
            				}
            			}
            			else {
HXLINE(1177)				_hx_tmp10 = true;
            			}
HXDLIN(1177)			if (_hx_tmp10) {
HXLINE(1179)				this->_walkSound->play(false,null(),null());
            			}
            			else {
HXLINE(1183)				 ::flixel::_hx_system::FlxSound _this = this->_walkSound;
HXDLIN(1183)				_this->cleanup(_this->autoDestroy,true);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxControlHandler_obj,update,(void))

void FlxControlHandler_obj::setCustomKeys(::String CustomUpKey,::String CustomDownKey,::String CustomLeftKey,::String CustomRightKey){
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1199_setCustomKeys)
HXLINE(1200)		if ((CustomUpKey != HX_("",00,00,00,00))) {
HXLINE(1202)			this->_up = true;
HXLINE(1203)			this->_upKey = CustomUpKey;
            		}
HXLINE(1206)		if ((CustomDownKey != HX_("",00,00,00,00))) {
HXLINE(1208)			this->_down = true;
HXLINE(1209)			this->_downKey = CustomDownKey;
            		}
HXLINE(1212)		if ((CustomLeftKey != HX_("",00,00,00,00))) {
HXLINE(1214)			this->_left = true;
HXLINE(1215)			this->_leftKey = CustomLeftKey;
            		}
HXLINE(1218)		if ((CustomRightKey != HX_("",00,00,00,00))) {
HXLINE(1220)			this->_right = true;
HXLINE(1221)			this->_rightKey = CustomRightKey;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setCustomKeys,(void))

void FlxControlHandler_obj::setCursorControl(hx::Null< bool >  __o_AllowUp,hx::Null< bool >  __o_AllowDown,hx::Null< bool >  __o_AllowLeft,hx::Null< bool >  __o_AllowRight){
bool AllowUp = __o_AllowUp.Default(true);
bool AllowDown = __o_AllowDown.Default(true);
bool AllowLeft = __o_AllowLeft.Default(true);
bool AllowRight = __o_AllowRight.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1235_setCursorControl)
HXLINE(1236)		this->_up = AllowUp;
HXLINE(1237)		this->_down = AllowDown;
HXLINE(1238)		this->_left = AllowLeft;
HXLINE(1239)		this->_right = AllowRight;
HXLINE(1241)		this->_upKey = HX_("UP",5b,4a,00,00);
HXLINE(1242)		this->_downKey = HX_("DOWN",62,c0,2e,2d);
HXLINE(1243)		this->_leftKey = HX_("LEFT",07,d0,70,32);
HXLINE(1244)		this->_rightKey = HX_("RIGHT",bc,43,52,67);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setCursorControl,(void))

void FlxControlHandler_obj::setWASDControl(hx::Null< bool >  __o_AllowUp,hx::Null< bool >  __o_AllowDown,hx::Null< bool >  __o_AllowLeft,hx::Null< bool >  __o_AllowRight){
bool AllowUp = __o_AllowUp.Default(true);
bool AllowDown = __o_AllowDown.Default(true);
bool AllowLeft = __o_AllowLeft.Default(true);
bool AllowRight = __o_AllowRight.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1257_setWASDControl)
HXLINE(1258)		this->_up = AllowUp;
HXLINE(1259)		this->_down = AllowDown;
HXLINE(1260)		this->_left = AllowLeft;
HXLINE(1261)		this->_right = AllowRight;
HXLINE(1263)		this->_upKey = HX_("W",57,00,00,00);
HXLINE(1264)		this->_downKey = HX_("S",53,00,00,00);
HXLINE(1265)		this->_leftKey = HX_("A",41,00,00,00);
HXLINE(1266)		this->_rightKey = HX_("D",44,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setWASDControl,(void))

void FlxControlHandler_obj::setESDFControl(hx::Null< bool >  __o_AllowUp,hx::Null< bool >  __o_AllowDown,hx::Null< bool >  __o_AllowLeft,hx::Null< bool >  __o_AllowRight){
bool AllowUp = __o_AllowUp.Default(true);
bool AllowDown = __o_AllowDown.Default(true);
bool AllowLeft = __o_AllowLeft.Default(true);
bool AllowRight = __o_AllowRight.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1279_setESDFControl)
HXLINE(1280)		this->_up = AllowUp;
HXLINE(1281)		this->_down = AllowDown;
HXLINE(1282)		this->_left = AllowLeft;
HXLINE(1283)		this->_right = AllowRight;
HXLINE(1285)		this->_upKey = HX_("E",45,00,00,00);
HXLINE(1286)		this->_downKey = HX_("D",44,00,00,00);
HXLINE(1287)		this->_leftKey = HX_("S",53,00,00,00);
HXLINE(1288)		this->_rightKey = HX_("F",46,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setESDFControl,(void))

void FlxControlHandler_obj::setIJKLControl(hx::Null< bool >  __o_AllowUp,hx::Null< bool >  __o_AllowDown,hx::Null< bool >  __o_AllowLeft,hx::Null< bool >  __o_AllowRight){
bool AllowUp = __o_AllowUp.Default(true);
bool AllowDown = __o_AllowDown.Default(true);
bool AllowLeft = __o_AllowLeft.Default(true);
bool AllowRight = __o_AllowRight.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1301_setIJKLControl)
HXLINE(1302)		this->_up = AllowUp;
HXLINE(1303)		this->_down = AllowDown;
HXLINE(1304)		this->_left = AllowLeft;
HXLINE(1305)		this->_right = AllowRight;
HXLINE(1307)		this->_upKey = HX_("I",49,00,00,00);
HXLINE(1308)		this->_downKey = HX_("K",4b,00,00,00);
HXLINE(1309)		this->_leftKey = HX_("J",4a,00,00,00);
HXLINE(1310)		this->_rightKey = HX_("L",4c,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setIJKLControl,(void))

void FlxControlHandler_obj::setHJKLControl(hx::Null< bool >  __o_AllowUp,hx::Null< bool >  __o_AllowDown,hx::Null< bool >  __o_AllowLeft,hx::Null< bool >  __o_AllowRight){
bool AllowUp = __o_AllowUp.Default(true);
bool AllowDown = __o_AllowDown.Default(true);
bool AllowLeft = __o_AllowLeft.Default(true);
bool AllowRight = __o_AllowRight.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1323_setHJKLControl)
HXLINE(1324)		this->_up = AllowUp;
HXLINE(1325)		this->_down = AllowDown;
HXLINE(1326)		this->_left = AllowLeft;
HXLINE(1327)		this->_right = AllowRight;
HXLINE(1329)		this->_upKey = HX_("K",4b,00,00,00);
HXLINE(1330)		this->_downKey = HX_("J",4a,00,00,00);
HXLINE(1331)		this->_leftKey = HX_("H",48,00,00,00);
HXLINE(1332)		this->_rightKey = HX_("L",4c,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setHJKLControl,(void))

void FlxControlHandler_obj::setZQSDControl(hx::Null< bool >  __o_AllowUp,hx::Null< bool >  __o_AllowDown,hx::Null< bool >  __o_AllowLeft,hx::Null< bool >  __o_AllowRight){
bool AllowUp = __o_AllowUp.Default(true);
bool AllowDown = __o_AllowDown.Default(true);
bool AllowLeft = __o_AllowLeft.Default(true);
bool AllowRight = __o_AllowRight.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1345_setZQSDControl)
HXLINE(1346)		this->_up = AllowUp;
HXLINE(1347)		this->_down = AllowDown;
HXLINE(1348)		this->_left = AllowLeft;
HXLINE(1349)		this->_right = AllowRight;
HXLINE(1351)		this->_upKey = HX_("Z",5a,00,00,00);
HXLINE(1352)		this->_downKey = HX_("S",53,00,00,00);
HXLINE(1353)		this->_leftKey = HX_("Q",51,00,00,00);
HXLINE(1354)		this->_rightKey = HX_("D",44,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setZQSDControl,(void))

void FlxControlHandler_obj::setDvorakSimplifiedControl(hx::Null< bool >  __o_AllowUp,hx::Null< bool >  __o_AllowDown,hx::Null< bool >  __o_AllowLeft,hx::Null< bool >  __o_AllowRight){
bool AllowUp = __o_AllowUp.Default(true);
bool AllowDown = __o_AllowDown.Default(true);
bool AllowLeft = __o_AllowLeft.Default(true);
bool AllowRight = __o_AllowRight.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1367_setDvorakSimplifiedControl)
HXLINE(1368)		this->_up = AllowUp;
HXLINE(1369)		this->_down = AllowDown;
HXLINE(1370)		this->_left = AllowLeft;
HXLINE(1371)		this->_right = AllowRight;
HXLINE(1373)		this->_upKey = HX_("COMMA",b5,69,4b,c8);
HXLINE(1374)		this->_downKey = HX_("O",4f,00,00,00);
HXLINE(1375)		this->_leftKey = HX_("A",41,00,00,00);
HXLINE(1376)		this->_rightKey = HX_("E",45,00,00,00);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setDvorakSimplifiedControl,(void))

void FlxControlHandler_obj::setNumpadControl(hx::Null< bool >  __o_AllowUp,hx::Null< bool >  __o_AllowDown,hx::Null< bool >  __o_AllowLeft,hx::Null< bool >  __o_AllowRight){
bool AllowUp = __o_AllowUp.Default(true);
bool AllowDown = __o_AllowDown.Default(true);
bool AllowLeft = __o_AllowLeft.Default(true);
bool AllowRight = __o_AllowRight.Default(true);
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_1389_setNumpadControl)
HXLINE(1390)		this->_up = AllowUp;
HXLINE(1391)		this->_down = AllowDown;
HXLINE(1392)		this->_left = AllowLeft;
HXLINE(1393)		this->_right = AllowRight;
HXLINE(1395)		this->_upKey = HX_("NUMPADEIGHT",42,23,33,19);
HXLINE(1396)		this->_downKey = HX_("NUMPADTWO",bf,b8,0d,5c);
HXLINE(1397)		this->_leftKey = HX_("NUMPADFOUR",33,e5,ac,26);
HXLINE(1398)		this->_rightKey = HX_("NUMPADSIX",55,ea,0c,5c);
            	}


HX_DEFINE_DYNAMIC_FUNC4(FlxControlHandler_obj,setNumpadControl,(void))

int FlxControlHandler_obj::MOVEMENT_INSTANT;

int FlxControlHandler_obj::MOVEMENT_ACCELERATES;

int FlxControlHandler_obj::STOPPING_INSTANT;

int FlxControlHandler_obj::STOPPING_DECELERATES;

int FlxControlHandler_obj::STOPPING_NEVER;

int FlxControlHandler_obj::ROTATION_INSTANT;

int FlxControlHandler_obj::ROTATION_ACCELERATES;

int FlxControlHandler_obj::ROTATION_STOPPING_INSTANT;

int FlxControlHandler_obj::ROTATION_STOPPING_DECELERATES;

int FlxControlHandler_obj::ROTATION_STOPPING_NEVER;

int FlxControlHandler_obj::KEYMODE_PRESSED;

int FlxControlHandler_obj::KEYMODE_JUST_DOWN;

int FlxControlHandler_obj::KEYMODE_RELEASED;

Float FlxControlHandler_obj::DIAGONAL_COMPENSATION_FACTOR;


hx::ObjectPtr< FlxControlHandler_obj > FlxControlHandler_obj::__new( ::flixel::FlxSprite Sprite,int MovementType,int StoppingType,hx::Null< bool >  __o_UpdateFacing,hx::Null< bool >  __o_EnableArrowKeys) {
	hx::ObjectPtr< FlxControlHandler_obj > __this = new FlxControlHandler_obj();
	__this->__construct(Sprite,MovementType,StoppingType,__o_UpdateFacing,__o_EnableArrowKeys);
	return __this;
}

hx::ObjectPtr< FlxControlHandler_obj > FlxControlHandler_obj::__alloc(hx::Ctx *_hx_ctx, ::flixel::FlxSprite Sprite,int MovementType,int StoppingType,hx::Null< bool >  __o_UpdateFacing,hx::Null< bool >  __o_EnableArrowKeys) {
	FlxControlHandler_obj *__this = (FlxControlHandler_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxControlHandler_obj), true, "flixel.addons.plugin.control.FlxControlHandler"));
	*(void **)__this = FlxControlHandler_obj::_hx_vtable;
	__this->__construct(Sprite,MovementType,StoppingType,__o_UpdateFacing,__o_EnableArrowKeys);
	return __this;
}

FlxControlHandler_obj::FlxControlHandler_obj()
{
}

void FlxControlHandler_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxControlHandler);
	HX_MARK_MEMBER_NAME(isPressedUp,"isPressedUp");
	HX_MARK_MEMBER_NAME(isPressedDown,"isPressedDown");
	HX_MARK_MEMBER_NAME(isPressedLeft,"isPressedLeft");
	HX_MARK_MEMBER_NAME(isPressedRight,"isPressedRight");
	HX_MARK_MEMBER_NAME(enabled,"enabled");
	HX_MARK_MEMBER_NAME(_entity,"_entity");
	HX_MARK_MEMBER_NAME(_bounds,"_bounds");
	HX_MARK_MEMBER_NAME(_up,"_up");
	HX_MARK_MEMBER_NAME(_down,"_down");
	HX_MARK_MEMBER_NAME(_left,"_left");
	HX_MARK_MEMBER_NAME(_right,"_right");
	HX_MARK_MEMBER_NAME(_fire,"_fire");
	HX_MARK_MEMBER_NAME(_altFire,"_altFire");
	HX_MARK_MEMBER_NAME(_jump,"_jump");
	HX_MARK_MEMBER_NAME(_altJump,"_altJump");
	HX_MARK_MEMBER_NAME(_xFacing,"_xFacing");
	HX_MARK_MEMBER_NAME(_yFacing,"_yFacing");
	HX_MARK_MEMBER_NAME(_rotateAntiClockwise,"_rotateAntiClockwise");
	HX_MARK_MEMBER_NAME(_rotateClockwise,"_rotateClockwise");
	HX_MARK_MEMBER_NAME(_upMoveSpeed,"_upMoveSpeed");
	HX_MARK_MEMBER_NAME(_downMoveSpeed,"_downMoveSpeed");
	HX_MARK_MEMBER_NAME(_leftMoveSpeed,"_leftMoveSpeed");
	HX_MARK_MEMBER_NAME(_rightMoveSpeed,"_rightMoveSpeed");
	HX_MARK_MEMBER_NAME(_thrustSpeed,"_thrustSpeed");
	HX_MARK_MEMBER_NAME(_reverseSpeed,"_reverseSpeed");
	HX_MARK_MEMBER_NAME(_thrustEnabled,"_thrustEnabled");
	HX_MARK_MEMBER_NAME(_reverseEnabled,"_reverseEnabled");
	HX_MARK_MEMBER_NAME(_isRotating,"_isRotating");
	HX_MARK_MEMBER_NAME(_antiClockwiseRotationSpeed,"_antiClockwiseRotationSpeed");
	HX_MARK_MEMBER_NAME(_clockwiseRotationSpeed,"_clockwiseRotationSpeed");
	HX_MARK_MEMBER_NAME(_enforceAngleLimits,"_enforceAngleLimits");
	HX_MARK_MEMBER_NAME(_minAngle,"_minAngle");
	HX_MARK_MEMBER_NAME(_maxAngle,"_maxAngle");
	HX_MARK_MEMBER_NAME(_capAngularVelocity,"_capAngularVelocity");
	HX_MARK_MEMBER_NAME(_xSpeedAdjust,"_xSpeedAdjust");
	HX_MARK_MEMBER_NAME(_ySpeedAdjust,"_ySpeedAdjust");
	HX_MARK_MEMBER_NAME(_gravityX,"_gravityX");
	HX_MARK_MEMBER_NAME(_gravityY,"_gravityY");
	HX_MARK_MEMBER_NAME(_fireRate,"_fireRate");
	HX_MARK_MEMBER_NAME(_nextFireTime,"_nextFireTime");
	HX_MARK_MEMBER_NAME(_lastFiredTime,"_lastFiredTime");
	HX_MARK_MEMBER_NAME(_fireKeyMode,"_fireKeyMode");
	HX_MARK_MEMBER_NAME(_fireCallback,"_fireCallback");
	HX_MARK_MEMBER_NAME(_jumpHeight,"_jumpHeight");
	HX_MARK_MEMBER_NAME(_jumpRate,"_jumpRate");
	HX_MARK_MEMBER_NAME(_jumpKeyMode,"_jumpKeyMode");
	HX_MARK_MEMBER_NAME(_nextJumpTime,"_nextJumpTime");
	HX_MARK_MEMBER_NAME(_lastJumpTime,"_lastJumpTime");
	HX_MARK_MEMBER_NAME(_jumpFromFallTime,"_jumpFromFallTime");
	HX_MARK_MEMBER_NAME(_extraSurfaceTime,"_extraSurfaceTime");
	HX_MARK_MEMBER_NAME(_jumpSurface,"_jumpSurface");
	HX_MARK_MEMBER_NAME(_jumpCallback,"_jumpCallback");
	HX_MARK_MEMBER_NAME(_movement,"_movement");
	HX_MARK_MEMBER_NAME(_stopping,"_stopping");
	HX_MARK_MEMBER_NAME(_rotation,"_rotation");
	HX_MARK_MEMBER_NAME(_rotationStopping,"_rotationStopping");
	HX_MARK_MEMBER_NAME(_capVelocity,"_capVelocity");
	HX_MARK_MEMBER_NAME(_hotkeys,"_hotkeys");
	HX_MARK_MEMBER_NAME(_upKey,"_upKey");
	HX_MARK_MEMBER_NAME(_downKey,"_downKey");
	HX_MARK_MEMBER_NAME(_leftKey,"_leftKey");
	HX_MARK_MEMBER_NAME(_rightKey,"_rightKey");
	HX_MARK_MEMBER_NAME(_fireKey,"_fireKey");
	HX_MARK_MEMBER_NAME(_altFireKey,"_altFireKey");
	HX_MARK_MEMBER_NAME(_jumpKey,"_jumpKey");
	HX_MARK_MEMBER_NAME(_altJumpKey,"_altJumpKey");
	HX_MARK_MEMBER_NAME(_antiClockwiseKey,"_antiClockwiseKey");
	HX_MARK_MEMBER_NAME(_clockwiseKey,"_clockwiseKey");
	HX_MARK_MEMBER_NAME(_thrustKey,"_thrustKey");
	HX_MARK_MEMBER_NAME(_reverseKey,"_reverseKey");
	HX_MARK_MEMBER_NAME(invertX,"invertX");
	HX_MARK_MEMBER_NAME(invertY,"invertY");
	HX_MARK_MEMBER_NAME(_jumpSound,"_jumpSound");
	HX_MARK_MEMBER_NAME(_fireSound,"_fireSound");
	HX_MARK_MEMBER_NAME(_walkSound,"_walkSound");
	HX_MARK_MEMBER_NAME(_thrustSound,"_thrustSound");
	HX_MARK_END_CLASS();
}

void FlxControlHandler_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(isPressedUp,"isPressedUp");
	HX_VISIT_MEMBER_NAME(isPressedDown,"isPressedDown");
	HX_VISIT_MEMBER_NAME(isPressedLeft,"isPressedLeft");
	HX_VISIT_MEMBER_NAME(isPressedRight,"isPressedRight");
	HX_VISIT_MEMBER_NAME(enabled,"enabled");
	HX_VISIT_MEMBER_NAME(_entity,"_entity");
	HX_VISIT_MEMBER_NAME(_bounds,"_bounds");
	HX_VISIT_MEMBER_NAME(_up,"_up");
	HX_VISIT_MEMBER_NAME(_down,"_down");
	HX_VISIT_MEMBER_NAME(_left,"_left");
	HX_VISIT_MEMBER_NAME(_right,"_right");
	HX_VISIT_MEMBER_NAME(_fire,"_fire");
	HX_VISIT_MEMBER_NAME(_altFire,"_altFire");
	HX_VISIT_MEMBER_NAME(_jump,"_jump");
	HX_VISIT_MEMBER_NAME(_altJump,"_altJump");
	HX_VISIT_MEMBER_NAME(_xFacing,"_xFacing");
	HX_VISIT_MEMBER_NAME(_yFacing,"_yFacing");
	HX_VISIT_MEMBER_NAME(_rotateAntiClockwise,"_rotateAntiClockwise");
	HX_VISIT_MEMBER_NAME(_rotateClockwise,"_rotateClockwise");
	HX_VISIT_MEMBER_NAME(_upMoveSpeed,"_upMoveSpeed");
	HX_VISIT_MEMBER_NAME(_downMoveSpeed,"_downMoveSpeed");
	HX_VISIT_MEMBER_NAME(_leftMoveSpeed,"_leftMoveSpeed");
	HX_VISIT_MEMBER_NAME(_rightMoveSpeed,"_rightMoveSpeed");
	HX_VISIT_MEMBER_NAME(_thrustSpeed,"_thrustSpeed");
	HX_VISIT_MEMBER_NAME(_reverseSpeed,"_reverseSpeed");
	HX_VISIT_MEMBER_NAME(_thrustEnabled,"_thrustEnabled");
	HX_VISIT_MEMBER_NAME(_reverseEnabled,"_reverseEnabled");
	HX_VISIT_MEMBER_NAME(_isRotating,"_isRotating");
	HX_VISIT_MEMBER_NAME(_antiClockwiseRotationSpeed,"_antiClockwiseRotationSpeed");
	HX_VISIT_MEMBER_NAME(_clockwiseRotationSpeed,"_clockwiseRotationSpeed");
	HX_VISIT_MEMBER_NAME(_enforceAngleLimits,"_enforceAngleLimits");
	HX_VISIT_MEMBER_NAME(_minAngle,"_minAngle");
	HX_VISIT_MEMBER_NAME(_maxAngle,"_maxAngle");
	HX_VISIT_MEMBER_NAME(_capAngularVelocity,"_capAngularVelocity");
	HX_VISIT_MEMBER_NAME(_xSpeedAdjust,"_xSpeedAdjust");
	HX_VISIT_MEMBER_NAME(_ySpeedAdjust,"_ySpeedAdjust");
	HX_VISIT_MEMBER_NAME(_gravityX,"_gravityX");
	HX_VISIT_MEMBER_NAME(_gravityY,"_gravityY");
	HX_VISIT_MEMBER_NAME(_fireRate,"_fireRate");
	HX_VISIT_MEMBER_NAME(_nextFireTime,"_nextFireTime");
	HX_VISIT_MEMBER_NAME(_lastFiredTime,"_lastFiredTime");
	HX_VISIT_MEMBER_NAME(_fireKeyMode,"_fireKeyMode");
	HX_VISIT_MEMBER_NAME(_fireCallback,"_fireCallback");
	HX_VISIT_MEMBER_NAME(_jumpHeight,"_jumpHeight");
	HX_VISIT_MEMBER_NAME(_jumpRate,"_jumpRate");
	HX_VISIT_MEMBER_NAME(_jumpKeyMode,"_jumpKeyMode");
	HX_VISIT_MEMBER_NAME(_nextJumpTime,"_nextJumpTime");
	HX_VISIT_MEMBER_NAME(_lastJumpTime,"_lastJumpTime");
	HX_VISIT_MEMBER_NAME(_jumpFromFallTime,"_jumpFromFallTime");
	HX_VISIT_MEMBER_NAME(_extraSurfaceTime,"_extraSurfaceTime");
	HX_VISIT_MEMBER_NAME(_jumpSurface,"_jumpSurface");
	HX_VISIT_MEMBER_NAME(_jumpCallback,"_jumpCallback");
	HX_VISIT_MEMBER_NAME(_movement,"_movement");
	HX_VISIT_MEMBER_NAME(_stopping,"_stopping");
	HX_VISIT_MEMBER_NAME(_rotation,"_rotation");
	HX_VISIT_MEMBER_NAME(_rotationStopping,"_rotationStopping");
	HX_VISIT_MEMBER_NAME(_capVelocity,"_capVelocity");
	HX_VISIT_MEMBER_NAME(_hotkeys,"_hotkeys");
	HX_VISIT_MEMBER_NAME(_upKey,"_upKey");
	HX_VISIT_MEMBER_NAME(_downKey,"_downKey");
	HX_VISIT_MEMBER_NAME(_leftKey,"_leftKey");
	HX_VISIT_MEMBER_NAME(_rightKey,"_rightKey");
	HX_VISIT_MEMBER_NAME(_fireKey,"_fireKey");
	HX_VISIT_MEMBER_NAME(_altFireKey,"_altFireKey");
	HX_VISIT_MEMBER_NAME(_jumpKey,"_jumpKey");
	HX_VISIT_MEMBER_NAME(_altJumpKey,"_altJumpKey");
	HX_VISIT_MEMBER_NAME(_antiClockwiseKey,"_antiClockwiseKey");
	HX_VISIT_MEMBER_NAME(_clockwiseKey,"_clockwiseKey");
	HX_VISIT_MEMBER_NAME(_thrustKey,"_thrustKey");
	HX_VISIT_MEMBER_NAME(_reverseKey,"_reverseKey");
	HX_VISIT_MEMBER_NAME(invertX,"invertX");
	HX_VISIT_MEMBER_NAME(invertY,"invertY");
	HX_VISIT_MEMBER_NAME(_jumpSound,"_jumpSound");
	HX_VISIT_MEMBER_NAME(_fireSound,"_fireSound");
	HX_VISIT_MEMBER_NAME(_walkSound,"_walkSound");
	HX_VISIT_MEMBER_NAME(_thrustSound,"_thrustSound");
}

hx::Val FlxControlHandler_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { return hx::Val( _up ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_down") ) { return hx::Val( _down ); }
		if (HX_FIELD_EQ(inName,"_left") ) { return hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"_fire") ) { return hx::Val( _fire ); }
		if (HX_FIELD_EQ(inName,"_jump") ) { return hx::Val( _jump ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { return hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"_upKey") ) { return hx::Val( _upKey ); }
		if (HX_FIELD_EQ(inName,"moveUp") ) { return hx::Val( moveUp_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { return hx::Val( enabled ); }
		if (HX_FIELD_EQ(inName,"_entity") ) { return hx::Val( _entity ); }
		if (HX_FIELD_EQ(inName,"_bounds") ) { return hx::Val( _bounds ); }
		if (HX_FIELD_EQ(inName,"invertX") ) { return hx::Val( invertX ); }
		if (HX_FIELD_EQ(inName,"invertY") ) { return hx::Val( invertY ); }
		if (HX_FIELD_EQ(inName,"runFire") ) { return hx::Val( runFire_dyn() ); }
		if (HX_FIELD_EQ(inName,"runJump") ) { return hx::Val( runJump_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_altFire") ) { return hx::Val( _altFire ); }
		if (HX_FIELD_EQ(inName,"_altJump") ) { return hx::Val( _altJump ); }
		if (HX_FIELD_EQ(inName,"_xFacing") ) { return hx::Val( _xFacing ); }
		if (HX_FIELD_EQ(inName,"_yFacing") ) { return hx::Val( _yFacing ); }
		if (HX_FIELD_EQ(inName,"_hotkeys") ) { return hx::Val( _hotkeys ); }
		if (HX_FIELD_EQ(inName,"_downKey") ) { return hx::Val( _downKey ); }
		if (HX_FIELD_EQ(inName,"_leftKey") ) { return hx::Val( _leftKey ); }
		if (HX_FIELD_EQ(inName,"_fireKey") ) { return hx::Val( _fireKey ); }
		if (HX_FIELD_EQ(inName,"_jumpKey") ) { return hx::Val( _jumpKey ); }
		if (HX_FIELD_EQ(inName,"moveDown") ) { return hx::Val( moveDown_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveLeft") ) { return hx::Val( moveLeft_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_minAngle") ) { return hx::Val( _minAngle ); }
		if (HX_FIELD_EQ(inName,"_maxAngle") ) { return hx::Val( _maxAngle ); }
		if (HX_FIELD_EQ(inName,"_gravityX") ) { return hx::Val( _gravityX ); }
		if (HX_FIELD_EQ(inName,"_gravityY") ) { return hx::Val( _gravityY ); }
		if (HX_FIELD_EQ(inName,"_fireRate") ) { return hx::Val( _fireRate ); }
		if (HX_FIELD_EQ(inName,"_jumpRate") ) { return hx::Val( _jumpRate ); }
		if (HX_FIELD_EQ(inName,"_movement") ) { return hx::Val( _movement ); }
		if (HX_FIELD_EQ(inName,"_stopping") ) { return hx::Val( _stopping ); }
		if (HX_FIELD_EQ(inName,"_rotation") ) { return hx::Val( _rotation ); }
		if (HX_FIELD_EQ(inName,"_rightKey") ) { return hx::Val( _rightKey ); }
		if (HX_FIELD_EQ(inName,"setThrust") ) { return hx::Val( setThrust_dyn() ); }
		if (HX_FIELD_EQ(inName,"setSounds") ) { return hx::Val( setSounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"setBounds") ) { return hx::Val( setBounds_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveRight") ) { return hx::Val( moveRight_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_thrustKey") ) { return hx::Val( _thrustKey ); }
		if (HX_FIELD_EQ(inName,"_jumpSound") ) { return hx::Val( _jumpSound ); }
		if (HX_FIELD_EQ(inName,"_fireSound") ) { return hx::Val( _fireSound ); }
		if (HX_FIELD_EQ(inName,"_walkSound") ) { return hx::Val( _walkSound ); }
		if (HX_FIELD_EQ(inName,"setGravity") ) { return hx::Val( setGravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveThrust") ) { return hx::Val( moveThrust_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isPressedUp") ) { return hx::Val( isPressedUp ); }
		if (HX_FIELD_EQ(inName,"_isRotating") ) { return hx::Val( _isRotating ); }
		if (HX_FIELD_EQ(inName,"_jumpHeight") ) { return hx::Val( _jumpHeight ); }
		if (HX_FIELD_EQ(inName,"_altFireKey") ) { return hx::Val( _altFireKey ); }
		if (HX_FIELD_EQ(inName,"_altJumpKey") ) { return hx::Val( _altJumpKey ); }
		if (HX_FIELD_EQ(inName,"_reverseKey") ) { return hx::Val( _reverseKey ); }
		if (HX_FIELD_EQ(inName,"flipGravity") ) { return hx::Val( flipGravity_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetSpeeds") ) { return hx::Val( resetSpeeds_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveReverse") ) { return hx::Val( moveReverse_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_upMoveSpeed") ) { return hx::Val( _upMoveSpeed ); }
		if (HX_FIELD_EQ(inName,"_thrustSpeed") ) { return hx::Val( _thrustSpeed ); }
		if (HX_FIELD_EQ(inName,"_fireKeyMode") ) { return hx::Val( _fireKeyMode ); }
		if (HX_FIELD_EQ(inName,"_jumpKeyMode") ) { return hx::Val( _jumpKeyMode ); }
		if (HX_FIELD_EQ(inName,"_jumpSurface") ) { return hx::Val( _jumpSurface ); }
		if (HX_FIELD_EQ(inName,"_capVelocity") ) { return hx::Val( _capVelocity ); }
		if (HX_FIELD_EQ(inName,"_thrustSound") ) { return hx::Val( _thrustSound ); }
		if (HX_FIELD_EQ(inName,"removeBounds") ) { return hx::Val( removeBounds_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isPressedDown") ) { return hx::Val( isPressedDown ); }
		if (HX_FIELD_EQ(inName,"isPressedLeft") ) { return hx::Val( isPressedLeft ); }
		if (HX_FIELD_EQ(inName,"_reverseSpeed") ) { return hx::Val( _reverseSpeed ); }
		if (HX_FIELD_EQ(inName,"_xSpeedAdjust") ) { return hx::Val( _xSpeedAdjust ); }
		if (HX_FIELD_EQ(inName,"_ySpeedAdjust") ) { return hx::Val( _ySpeedAdjust ); }
		if (HX_FIELD_EQ(inName,"_nextFireTime") ) { return hx::Val( _nextFireTime ); }
		if (HX_FIELD_EQ(inName,"_fireCallback") ) { return hx::Val( _fireCallback ); }
		if (HX_FIELD_EQ(inName,"_nextJumpTime") ) { return hx::Val( _nextJumpTime ); }
		if (HX_FIELD_EQ(inName,"_lastJumpTime") ) { return hx::Val( _lastJumpTime ); }
		if (HX_FIELD_EQ(inName,"_jumpCallback") ) { return hx::Val( _jumpCallback ); }
		if (HX_FIELD_EQ(inName,"_clockwiseKey") ) { return hx::Val( _clockwiseKey ); }
		if (HX_FIELD_EQ(inName,"setFireButton") ) { return hx::Val( setFireButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"setJumpButton") ) { return hx::Val( setJumpButton_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveClockwise") ) { return hx::Val( moveClockwise_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCustomKeys") ) { return hx::Val( setCustomKeys_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isPressedRight") ) { return hx::Val( isPressedRight ); }
		if (HX_FIELD_EQ(inName,"_downMoveSpeed") ) { return hx::Val( _downMoveSpeed ); }
		if (HX_FIELD_EQ(inName,"_leftMoveSpeed") ) { return hx::Val( _leftMoveSpeed ); }
		if (HX_FIELD_EQ(inName,"_thrustEnabled") ) { return hx::Val( _thrustEnabled ); }
		if (HX_FIELD_EQ(inName,"_lastFiredTime") ) { return hx::Val( _lastFiredTime ); }
		if (HX_FIELD_EQ(inName,"setWASDControl") ) { return hx::Val( setWASDControl_dyn() ); }
		if (HX_FIELD_EQ(inName,"setESDFControl") ) { return hx::Val( setESDFControl_dyn() ); }
		if (HX_FIELD_EQ(inName,"setIJKLControl") ) { return hx::Val( setIJKLControl_dyn() ); }
		if (HX_FIELD_EQ(inName,"setHJKLControl") ) { return hx::Val( setHJKLControl_dyn() ); }
		if (HX_FIELD_EQ(inName,"setZQSDControl") ) { return hx::Val( setZQSDControl_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_rightMoveSpeed") ) { return hx::Val( _rightMoveSpeed ); }
		if (HX_FIELD_EQ(inName,"_reverseEnabled") ) { return hx::Val( _reverseEnabled ); }
		if (HX_FIELD_EQ(inName,"setRotationType") ) { return hx::Val( setRotationType_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRotationKeys") ) { return hx::Val( setRotationKeys_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMaximumSpeed") ) { return hx::Val( setMaximumSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"setDeceleration") ) { return hx::Val( setDeceleration_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_rotateClockwise") ) { return hx::Val( _rotateClockwise ); }
		if (HX_FIELD_EQ(inName,"setMovementSpeed") ) { return hx::Val( setMovementSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"setStandardSpeed") ) { return hx::Val( setStandardSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRotationSpeed") ) { return hx::Val( setRotationSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"setCursorControl") ) { return hx::Val( setCursorControl_dyn() ); }
		if (HX_FIELD_EQ(inName,"setNumpadControl") ) { return hx::Val( setNumpadControl_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_jumpFromFallTime") ) { return hx::Val( _jumpFromFallTime ); }
		if (HX_FIELD_EQ(inName,"_extraSurfaceTime") ) { return hx::Val( _extraSurfaceTime ); }
		if (HX_FIELD_EQ(inName,"_rotationStopping") ) { return hx::Val( _rotationStopping ); }
		if (HX_FIELD_EQ(inName,"_antiClockwiseKey") ) { return hx::Val( _antiClockwiseKey ); }
		if (HX_FIELD_EQ(inName,"setRotationLimits") ) { return hx::Val( setRotationLimits_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveAntiClockwise") ) { return hx::Val( moveAntiClockwise_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_enforceAngleLimits") ) { return hx::Val( _enforceAngleLimits ); }
		if (HX_FIELD_EQ(inName,"_capAngularVelocity") ) { return hx::Val( _capAngularVelocity ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_rotateAntiClockwise") ) { return hx::Val( _rotateAntiClockwise ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"disableRotationLimits") ) { return hx::Val( disableRotationLimits_dyn() ); }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_clockwiseRotationSpeed") ) { return hx::Val( _clockwiseRotationSpeed ); }
		if (HX_FIELD_EQ(inName,"setMaximumRotationSpeed") ) { return hx::Val( setMaximumRotationSpeed_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRotationDeceleration") ) { return hx::Val( setRotationDeceleration_dyn() ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"setAdvancedMovementSpeed") ) { return hx::Val( setAdvancedMovementSpeed_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"setDvorakSimplifiedControl") ) { return hx::Val( setDvorakSimplifiedControl_dyn() ); }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_antiClockwiseRotationSpeed") ) { return hx::Val( _antiClockwiseRotationSpeed ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxControlHandler_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_up") ) { _up=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_down") ) { _down=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fire") ) { _fire=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_jump") ) { _jump=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_upKey") ) { _upKey=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"enabled") ) { enabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_entity") ) { _entity=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_bounds") ) { _bounds=inValue.Cast<  ::openfl::_legacy::geom::Rectangle >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invertX") ) { invertX=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"invertY") ) { invertY=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_altFire") ) { _altFire=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_altJump") ) { _altJump=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_xFacing") ) { _xFacing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_yFacing") ) { _yFacing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_hotkeys") ) { _hotkeys=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downKey") ) { _downKey=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftKey") ) { _leftKey=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fireKey") ) { _fireKey=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_jumpKey") ) { _jumpKey=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_minAngle") ) { _minAngle=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_maxAngle") ) { _maxAngle=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_gravityX") ) { _gravityX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_gravityY") ) { _gravityY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fireRate") ) { _fireRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_jumpRate") ) { _jumpRate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_movement") ) { _movement=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_stopping") ) { _stopping=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rotation") ) { _rotation=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rightKey") ) { _rightKey=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_thrustKey") ) { _thrustKey=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_jumpSound") ) { _jumpSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fireSound") ) { _fireSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_walkSound") ) { _walkSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isPressedUp") ) { isPressedUp=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_isRotating") ) { _isRotating=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_jumpHeight") ) { _jumpHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_altFireKey") ) { _altFireKey=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_altJumpKey") ) { _altJumpKey=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reverseKey") ) { _reverseKey=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"_upMoveSpeed") ) { _upMoveSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_thrustSpeed") ) { _thrustSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fireKeyMode") ) { _fireKeyMode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_jumpKeyMode") ) { _jumpKeyMode=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_jumpSurface") ) { _jumpSurface=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_capVelocity") ) { _capVelocity=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_thrustSound") ) { _thrustSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"isPressedDown") ) { isPressedDown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isPressedLeft") ) { isPressedLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reverseSpeed") ) { _reverseSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_xSpeedAdjust") ) { _xSpeedAdjust=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_ySpeedAdjust") ) { _ySpeedAdjust=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_nextFireTime") ) { _nextFireTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_fireCallback") ) { _fireCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_nextJumpTime") ) { _nextJumpTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastJumpTime") ) { _lastJumpTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_jumpCallback") ) { _jumpCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_clockwiseKey") ) { _clockwiseKey=inValue.Cast< ::String >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"isPressedRight") ) { isPressedRight=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_downMoveSpeed") ) { _downMoveSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_leftMoveSpeed") ) { _leftMoveSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_thrustEnabled") ) { _thrustEnabled=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_lastFiredTime") ) { _lastFiredTime=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"_rightMoveSpeed") ) { _rightMoveSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_reverseEnabled") ) { _reverseEnabled=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"_rotateClockwise") ) { _rotateClockwise=inValue.Cast< bool >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"_jumpFromFallTime") ) { _jumpFromFallTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_extraSurfaceTime") ) { _extraSurfaceTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_rotationStopping") ) { _rotationStopping=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_antiClockwiseKey") ) { _antiClockwiseKey=inValue.Cast< ::String >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"_enforceAngleLimits") ) { _enforceAngleLimits=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_capAngularVelocity") ) { _capAngularVelocity=inValue.Cast< bool >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"_rotateAntiClockwise") ) { _rotateAntiClockwise=inValue.Cast< bool >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"_clockwiseRotationSpeed") ) { _clockwiseRotationSpeed=inValue.Cast< Float >(); return inValue; }
		break;
	case 27:
		if (HX_FIELD_EQ(inName,"_antiClockwiseRotationSpeed") ) { _antiClockwiseRotationSpeed=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxControlHandler_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("isPressedUp","\x53","\x40","\xbb","\x7d"));
	outFields->push(HX_HCSTRING("isPressedDown","\x5a","\x40","\x0d","\xc8"));
	outFields->push(HX_HCSTRING("isPressedLeft","\xff","\x4f","\x4f","\xcd"));
	outFields->push(HX_HCSTRING("isPressedRight","\xe4","\xbc","\x23","\x4f"));
	outFields->push(HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"));
	outFields->push(HX_HCSTRING("_entity","\xc2","\x24","\x93","\x73"));
	outFields->push(HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4"));
	outFields->push(HX_HCSTRING("_up","\x7a","\x7c","\x48","\x00"));
	outFields->push(HX_HCSTRING("_down","\x41","\x14","\x7f","\xf5"));
	outFields->push(HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"));
	outFields->push(HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"));
	outFields->push(HX_HCSTRING("_fire","\x95","\xef","\xcc","\xf6"));
	outFields->push(HX_HCSTRING("_altFire","\x00","\x9b","\xf5","\x22"));
	outFields->push(HX_HCSTRING("_jump","\xcd","\xe0","\x7a","\xf9"));
	outFields->push(HX_HCSTRING("_altJump","\x38","\x8c","\xa3","\x25"));
	outFields->push(HX_HCSTRING("_xFacing","\x33","\xb7","\x61","\xd0"));
	outFields->push(HX_HCSTRING("_yFacing","\xf4","\x2d","\xf7","\xf9"));
	outFields->push(HX_HCSTRING("_rotateAntiClockwise","\x96","\xcd","\x88","\x70"));
	outFields->push(HX_HCSTRING("_rotateClockwise","\x98","\x36","\x71","\x51"));
	outFields->push(HX_HCSTRING("_upMoveSpeed","\xdc","\x6a","\x48","\x4d"));
	outFields->push(HX_HCSTRING("_downMoveSpeed","\x35","\x22","\xea","\x67"));
	outFields->push(HX_HCSTRING("_leftMoveSpeed","\xf0","\x75","\x6d","\xf7"));
	outFields->push(HX_HCSTRING("_rightMoveSpeed","\xd9","\x27","\xa5","\x67"));
	outFields->push(HX_HCSTRING("_thrustSpeed","\xd0","\x1f","\xc3","\x20"));
	outFields->push(HX_HCSTRING("_reverseSpeed","\xe4","\x05","\x3d","\x7a"));
	outFields->push(HX_HCSTRING("_thrustEnabled","\x0a","\xf1","\x33","\xcd"));
	outFields->push(HX_HCSTRING("_reverseEnabled","\x1e","\x84","\x82","\xe5"));
	outFields->push(HX_HCSTRING("_isRotating","\x81","\x1b","\xbf","\x55"));
	outFields->push(HX_HCSTRING("_antiClockwiseRotationSpeed","\x78","\x54","\xdc","\x13"));
	outFields->push(HX_HCSTRING("_clockwiseRotationSpeed","\xb6","\x0b","\xcc","\x85"));
	outFields->push(HX_HCSTRING("_enforceAngleLimits","\x68","\x33","\xe5","\xd8"));
	outFields->push(HX_HCSTRING("_minAngle","\x40","\xa8","\xaf","\x61"));
	outFields->push(HX_HCSTRING("_maxAngle","\xee","\x8d","\x95","\x14"));
	outFields->push(HX_HCSTRING("_capAngularVelocity","\x4c","\x9b","\x7e","\x79"));
	outFields->push(HX_HCSTRING("_xSpeedAdjust","\xbd","\x44","\x11","\x7d"));
	outFields->push(HX_HCSTRING("_ySpeedAdjust","\x5c","\xb2","\xd0","\xbe"));
	outFields->push(HX_HCSTRING("_gravityX","\xa9","\x0d","\x17","\xcf"));
	outFields->push(HX_HCSTRING("_gravityY","\xaa","\x0d","\x17","\xcf"));
	outFields->push(HX_HCSTRING("_fireRate","\x15","\x5d","\xa2","\x12"));
	outFields->push(HX_HCSTRING("_nextFireTime","\xd5","\x5d","\xd2","\x58"));
	outFields->push(HX_HCSTRING("_lastFiredTime","\x26","\xbe","\xed","\x70"));
	outFields->push(HX_HCSTRING("_fireKeyMode","\x8d","\xc9","\x26","\x8d"));
	outFields->push(HX_HCSTRING("_jumpHeight","\x94","\x74","\x73","\x9c"));
	outFields->push(HX_HCSTRING("_jumpRate","\x4d","\x4a","\x0d","\x40"));
	outFields->push(HX_HCSTRING("_jumpKeyMode","\x55","\xef","\x91","\xea"));
	outFields->push(HX_HCSTRING("_nextJumpTime","\x0d","\x4b","\x3d","\x86"));
	outFields->push(HX_HCSTRING("_lastJumpTime","\x70","\x6b","\xd0","\x3d"));
	outFields->push(HX_HCSTRING("_jumpFromFallTime","\x1f","\x96","\xfb","\x1a"));
	outFields->push(HX_HCSTRING("_extraSurfaceTime","\x89","\x4e","\x3d","\x4e"));
	outFields->push(HX_HCSTRING("_jumpSurface","\xe0","\x10","\xa1","\xa5"));
	outFields->push(HX_HCSTRING("_movement","\x8e","\x7c","\xcd","\x47"));
	outFields->push(HX_HCSTRING("_stopping","\xd3","\x02","\xcf","\xf9"));
	outFields->push(HX_HCSTRING("_rotation","\x9d","\x34","\x1c","\x50"));
	outFields->push(HX_HCSTRING("_rotationStopping","\x31","\x61","\x68","\xbf"));
	outFields->push(HX_HCSTRING("_capVelocity","\x50","\x42","\x92","\x5a"));
	outFields->push(HX_HCSTRING("_hotkeys","\x82","\xd1","\x8f","\x91"));
	outFields->push(HX_HCSTRING("_upKey","\x45","\x4d","\x0a","\xa4"));
	outFields->push(HX_HCSTRING("_downKey","\xde","\x8b","\x55","\xa7"));
	outFields->push(HX_HCSTRING("_leftKey","\x59","\x11","\x97","\x2e"));
	outFields->push(HX_HCSTRING("_rightKey","\x82","\xfe","\xae","\x2b"));
	outFields->push(HX_HCSTRING("_fireKey","\x0a","\x7d","\x68","\xad"));
	outFields->push(HX_HCSTRING("_altFireKey","\x7f","\x86","\x76","\xd8"));
	outFields->push(HX_HCSTRING("_jumpKey","\xd2","\x1e","\x4b","\x46"));
	outFields->push(HX_HCSTRING("_altJumpKey","\x47","\x28","\x59","\x71"));
	outFields->push(HX_HCSTRING("_antiClockwiseKey","\xee","\x3b","\x04","\x21"));
	outFields->push(HX_HCSTRING("_clockwiseKey","\xac","\x19","\x0a","\x53"));
	outFields->push(HX_HCSTRING("_thrustKey","\xa8","\x3d","\xcf","\xfd"));
	outFields->push(HX_HCSTRING("_reverseKey","\xbc","\xb6","\xe9","\x80"));
	outFields->push(HX_HCSTRING("invertX","\x82","\x4c","\xf1","\x3d"));
	outFields->push(HX_HCSTRING("invertY","\x83","\x4c","\xf1","\x3d"));
	outFields->push(HX_HCSTRING("_jumpSound","\xc2","\x14","\x3c","\x68"));
	outFields->push(HX_HCSTRING("_fireSound","\xfa","\x70","\x17","\xd8"));
	outFields->push(HX_HCSTRING("_walkSound","\xc7","\x3a","\x2f","\x7d"));
	outFields->push(HX_HCSTRING("_thrustSound","\x18","\x15","\x26","\x20"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo FlxControlHandler_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,isPressedUp),HX_HCSTRING("isPressedUp","\x53","\x40","\xbb","\x7d")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,isPressedDown),HX_HCSTRING("isPressedDown","\x5a","\x40","\x0d","\xc8")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,isPressedLeft),HX_HCSTRING("isPressedLeft","\xff","\x4f","\x4f","\xcd")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,isPressedRight),HX_HCSTRING("isPressedRight","\xe4","\xbc","\x23","\x4f")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,enabled),HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(FlxControlHandler_obj,_entity),HX_HCSTRING("_entity","\xc2","\x24","\x93","\x73")},
	{hx::fsObject /*::openfl::_legacy::geom::Rectangle*/ ,(int)offsetof(FlxControlHandler_obj,_bounds),HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_up),HX_HCSTRING("_up","\x7a","\x7c","\x48","\x00")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_down),HX_HCSTRING("_down","\x41","\x14","\x7f","\xf5")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_left),HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_right),HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_fire),HX_HCSTRING("_fire","\x95","\xef","\xcc","\xf6")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_altFire),HX_HCSTRING("_altFire","\x00","\x9b","\xf5","\x22")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_jump),HX_HCSTRING("_jump","\xcd","\xe0","\x7a","\xf9")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_altJump),HX_HCSTRING("_altJump","\x38","\x8c","\xa3","\x25")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_xFacing),HX_HCSTRING("_xFacing","\x33","\xb7","\x61","\xd0")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_yFacing),HX_HCSTRING("_yFacing","\xf4","\x2d","\xf7","\xf9")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_rotateAntiClockwise),HX_HCSTRING("_rotateAntiClockwise","\x96","\xcd","\x88","\x70")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_rotateClockwise),HX_HCSTRING("_rotateClockwise","\x98","\x36","\x71","\x51")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_upMoveSpeed),HX_HCSTRING("_upMoveSpeed","\xdc","\x6a","\x48","\x4d")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_downMoveSpeed),HX_HCSTRING("_downMoveSpeed","\x35","\x22","\xea","\x67")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_leftMoveSpeed),HX_HCSTRING("_leftMoveSpeed","\xf0","\x75","\x6d","\xf7")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_rightMoveSpeed),HX_HCSTRING("_rightMoveSpeed","\xd9","\x27","\xa5","\x67")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_thrustSpeed),HX_HCSTRING("_thrustSpeed","\xd0","\x1f","\xc3","\x20")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_reverseSpeed),HX_HCSTRING("_reverseSpeed","\xe4","\x05","\x3d","\x7a")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_thrustEnabled),HX_HCSTRING("_thrustEnabled","\x0a","\xf1","\x33","\xcd")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_reverseEnabled),HX_HCSTRING("_reverseEnabled","\x1e","\x84","\x82","\xe5")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_isRotating),HX_HCSTRING("_isRotating","\x81","\x1b","\xbf","\x55")},
	{hx::fsFloat,(int)offsetof(FlxControlHandler_obj,_antiClockwiseRotationSpeed),HX_HCSTRING("_antiClockwiseRotationSpeed","\x78","\x54","\xdc","\x13")},
	{hx::fsFloat,(int)offsetof(FlxControlHandler_obj,_clockwiseRotationSpeed),HX_HCSTRING("_clockwiseRotationSpeed","\xb6","\x0b","\xcc","\x85")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_enforceAngleLimits),HX_HCSTRING("_enforceAngleLimits","\x68","\x33","\xe5","\xd8")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_minAngle),HX_HCSTRING("_minAngle","\x40","\xa8","\xaf","\x61")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_maxAngle),HX_HCSTRING("_maxAngle","\xee","\x8d","\x95","\x14")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_capAngularVelocity),HX_HCSTRING("_capAngularVelocity","\x4c","\x9b","\x7e","\x79")},
	{hx::fsFloat,(int)offsetof(FlxControlHandler_obj,_xSpeedAdjust),HX_HCSTRING("_xSpeedAdjust","\xbd","\x44","\x11","\x7d")},
	{hx::fsFloat,(int)offsetof(FlxControlHandler_obj,_ySpeedAdjust),HX_HCSTRING("_ySpeedAdjust","\x5c","\xb2","\xd0","\xbe")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_gravityX),HX_HCSTRING("_gravityX","\xa9","\x0d","\x17","\xcf")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_gravityY),HX_HCSTRING("_gravityY","\xaa","\x0d","\x17","\xcf")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_fireRate),HX_HCSTRING("_fireRate","\x15","\x5d","\xa2","\x12")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_nextFireTime),HX_HCSTRING("_nextFireTime","\xd5","\x5d","\xd2","\x58")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_lastFiredTime),HX_HCSTRING("_lastFiredTime","\x26","\xbe","\xed","\x70")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_fireKeyMode),HX_HCSTRING("_fireKeyMode","\x8d","\xc9","\x26","\x8d")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxControlHandler_obj,_fireCallback),HX_HCSTRING("_fireCallback","\x7a","\x62","\x0e","\x23")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_jumpHeight),HX_HCSTRING("_jumpHeight","\x94","\x74","\x73","\x9c")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_jumpRate),HX_HCSTRING("_jumpRate","\x4d","\x4a","\x0d","\x40")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_jumpKeyMode),HX_HCSTRING("_jumpKeyMode","\x55","\xef","\x91","\xea")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_nextJumpTime),HX_HCSTRING("_nextJumpTime","\x0d","\x4b","\x3d","\x86")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_lastJumpTime),HX_HCSTRING("_lastJumpTime","\x70","\x6b","\xd0","\x3d")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_jumpFromFallTime),HX_HCSTRING("_jumpFromFallTime","\x1f","\x96","\xfb","\x1a")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_extraSurfaceTime),HX_HCSTRING("_extraSurfaceTime","\x89","\x4e","\x3d","\x4e")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_jumpSurface),HX_HCSTRING("_jumpSurface","\xe0","\x10","\xa1","\xa5")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(FlxControlHandler_obj,_jumpCallback),HX_HCSTRING("_jumpCallback","\xb2","\x4b","\x64","\x83")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_movement),HX_HCSTRING("_movement","\x8e","\x7c","\xcd","\x47")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_stopping),HX_HCSTRING("_stopping","\xd3","\x02","\xcf","\xf9")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_rotation),HX_HCSTRING("_rotation","\x9d","\x34","\x1c","\x50")},
	{hx::fsInt,(int)offsetof(FlxControlHandler_obj,_rotationStopping),HX_HCSTRING("_rotationStopping","\x31","\x61","\x68","\xbf")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,_capVelocity),HX_HCSTRING("_capVelocity","\x50","\x42","\x92","\x5a")},
	{hx::fsObject /*Array< ::String >*/ ,(int)offsetof(FlxControlHandler_obj,_hotkeys),HX_HCSTRING("_hotkeys","\x82","\xd1","\x8f","\x91")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_upKey),HX_HCSTRING("_upKey","\x45","\x4d","\x0a","\xa4")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_downKey),HX_HCSTRING("_downKey","\xde","\x8b","\x55","\xa7")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_leftKey),HX_HCSTRING("_leftKey","\x59","\x11","\x97","\x2e")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_rightKey),HX_HCSTRING("_rightKey","\x82","\xfe","\xae","\x2b")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_fireKey),HX_HCSTRING("_fireKey","\x0a","\x7d","\x68","\xad")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_altFireKey),HX_HCSTRING("_altFireKey","\x7f","\x86","\x76","\xd8")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_jumpKey),HX_HCSTRING("_jumpKey","\xd2","\x1e","\x4b","\x46")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_altJumpKey),HX_HCSTRING("_altJumpKey","\x47","\x28","\x59","\x71")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_antiClockwiseKey),HX_HCSTRING("_antiClockwiseKey","\xee","\x3b","\x04","\x21")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_clockwiseKey),HX_HCSTRING("_clockwiseKey","\xac","\x19","\x0a","\x53")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_thrustKey),HX_HCSTRING("_thrustKey","\xa8","\x3d","\xcf","\xfd")},
	{hx::fsString,(int)offsetof(FlxControlHandler_obj,_reverseKey),HX_HCSTRING("_reverseKey","\xbc","\xb6","\xe9","\x80")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,invertX),HX_HCSTRING("invertX","\x82","\x4c","\xf1","\x3d")},
	{hx::fsBool,(int)offsetof(FlxControlHandler_obj,invertY),HX_HCSTRING("invertY","\x83","\x4c","\xf1","\x3d")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(FlxControlHandler_obj,_jumpSound),HX_HCSTRING("_jumpSound","\xc2","\x14","\x3c","\x68")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(FlxControlHandler_obj,_fireSound),HX_HCSTRING("_fireSound","\xfa","\x70","\x17","\xd8")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(FlxControlHandler_obj,_walkSound),HX_HCSTRING("_walkSound","\xc7","\x3a","\x2f","\x7d")},
	{hx::fsObject /*::flixel::_hx_system::FlxSound*/ ,(int)offsetof(FlxControlHandler_obj,_thrustSound),HX_HCSTRING("_thrustSound","\x18","\x15","\x26","\x20")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo FlxControlHandler_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &FlxControlHandler_obj::MOVEMENT_INSTANT,HX_HCSTRING("MOVEMENT_INSTANT","\x71","\x60","\xd3","\xad")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::MOVEMENT_ACCELERATES,HX_HCSTRING("MOVEMENT_ACCELERATES","\x86","\xb6","\xb8","\x7c")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::STOPPING_INSTANT,HX_HCSTRING("STOPPING_INSTANT","\xb6","\x33","\xdc","\x00")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::STOPPING_DECELERATES,HX_HCSTRING("STOPPING_DECELERATES","\xcc","\x41","\xfd","\x3d")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::STOPPING_NEVER,HX_HCSTRING("STOPPING_NEVER","\x21","\x68","\xe4","\xd7")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::ROTATION_INSTANT,HX_HCSTRING("ROTATION_INSTANT","\x80","\x3f","\xbf","\x93")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::ROTATION_ACCELERATES,HX_HCSTRING("ROTATION_ACCELERATES","\x15","\xc9","\x82","\x32")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::ROTATION_STOPPING_INSTANT,HX_HCSTRING("ROTATION_STOPPING_INSTANT","\x17","\x8f","\x68","\xb5")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::ROTATION_STOPPING_DECELERATES,HX_HCSTRING("ROTATION_STOPPING_DECELERATES","\xad","\x61","\x31","\x79")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::ROTATION_STOPPING_NEVER,HX_HCSTRING("ROTATION_STOPPING_NEVER","\x42","\x79","\x31","\x92")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::KEYMODE_PRESSED,HX_HCSTRING("KEYMODE_PRESSED","\x65","\x1e","\xde","\xcb")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::KEYMODE_JUST_DOWN,HX_HCSTRING("KEYMODE_JUST_DOWN","\x38","\x61","\x13","\x65")},
	{hx::fsInt,(void *) &FlxControlHandler_obj::KEYMODE_RELEASED,HX_HCSTRING("KEYMODE_RELEASED","\x7a","\x87","\x52","\x9d")},
	{hx::fsFloat,(void *) &FlxControlHandler_obj::DIAGONAL_COMPENSATION_FACTOR,HX_HCSTRING("DIAGONAL_COMPENSATION_FACTOR","\x8a","\x2b","\xea","\x21")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxControlHandler_obj_sMemberFields[] = {
	HX_HCSTRING("isPressedUp","\x53","\x40","\xbb","\x7d"),
	HX_HCSTRING("isPressedDown","\x5a","\x40","\x0d","\xc8"),
	HX_HCSTRING("isPressedLeft","\xff","\x4f","\x4f","\xcd"),
	HX_HCSTRING("isPressedRight","\xe4","\xbc","\x23","\x4f"),
	HX_HCSTRING("enabled","\x81","\x04","\x31","\x7e"),
	HX_HCSTRING("_entity","\xc2","\x24","\x93","\x73"),
	HX_HCSTRING("_bounds","\x14","\x98","\x94","\xd4"),
	HX_HCSTRING("_up","\x7a","\x7c","\x48","\x00"),
	HX_HCSTRING("_down","\x41","\x14","\x7f","\xf5"),
	HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"),
	HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"),
	HX_HCSTRING("_fire","\x95","\xef","\xcc","\xf6"),
	HX_HCSTRING("_altFire","\x00","\x9b","\xf5","\x22"),
	HX_HCSTRING("_jump","\xcd","\xe0","\x7a","\xf9"),
	HX_HCSTRING("_altJump","\x38","\x8c","\xa3","\x25"),
	HX_HCSTRING("_xFacing","\x33","\xb7","\x61","\xd0"),
	HX_HCSTRING("_yFacing","\xf4","\x2d","\xf7","\xf9"),
	HX_HCSTRING("_rotateAntiClockwise","\x96","\xcd","\x88","\x70"),
	HX_HCSTRING("_rotateClockwise","\x98","\x36","\x71","\x51"),
	HX_HCSTRING("_upMoveSpeed","\xdc","\x6a","\x48","\x4d"),
	HX_HCSTRING("_downMoveSpeed","\x35","\x22","\xea","\x67"),
	HX_HCSTRING("_leftMoveSpeed","\xf0","\x75","\x6d","\xf7"),
	HX_HCSTRING("_rightMoveSpeed","\xd9","\x27","\xa5","\x67"),
	HX_HCSTRING("_thrustSpeed","\xd0","\x1f","\xc3","\x20"),
	HX_HCSTRING("_reverseSpeed","\xe4","\x05","\x3d","\x7a"),
	HX_HCSTRING("_thrustEnabled","\x0a","\xf1","\x33","\xcd"),
	HX_HCSTRING("_reverseEnabled","\x1e","\x84","\x82","\xe5"),
	HX_HCSTRING("_isRotating","\x81","\x1b","\xbf","\x55"),
	HX_HCSTRING("_antiClockwiseRotationSpeed","\x78","\x54","\xdc","\x13"),
	HX_HCSTRING("_clockwiseRotationSpeed","\xb6","\x0b","\xcc","\x85"),
	HX_HCSTRING("_enforceAngleLimits","\x68","\x33","\xe5","\xd8"),
	HX_HCSTRING("_minAngle","\x40","\xa8","\xaf","\x61"),
	HX_HCSTRING("_maxAngle","\xee","\x8d","\x95","\x14"),
	HX_HCSTRING("_capAngularVelocity","\x4c","\x9b","\x7e","\x79"),
	HX_HCSTRING("_xSpeedAdjust","\xbd","\x44","\x11","\x7d"),
	HX_HCSTRING("_ySpeedAdjust","\x5c","\xb2","\xd0","\xbe"),
	HX_HCSTRING("_gravityX","\xa9","\x0d","\x17","\xcf"),
	HX_HCSTRING("_gravityY","\xaa","\x0d","\x17","\xcf"),
	HX_HCSTRING("_fireRate","\x15","\x5d","\xa2","\x12"),
	HX_HCSTRING("_nextFireTime","\xd5","\x5d","\xd2","\x58"),
	HX_HCSTRING("_lastFiredTime","\x26","\xbe","\xed","\x70"),
	HX_HCSTRING("_fireKeyMode","\x8d","\xc9","\x26","\x8d"),
	HX_HCSTRING("_fireCallback","\x7a","\x62","\x0e","\x23"),
	HX_HCSTRING("_jumpHeight","\x94","\x74","\x73","\x9c"),
	HX_HCSTRING("_jumpRate","\x4d","\x4a","\x0d","\x40"),
	HX_HCSTRING("_jumpKeyMode","\x55","\xef","\x91","\xea"),
	HX_HCSTRING("_nextJumpTime","\x0d","\x4b","\x3d","\x86"),
	HX_HCSTRING("_lastJumpTime","\x70","\x6b","\xd0","\x3d"),
	HX_HCSTRING("_jumpFromFallTime","\x1f","\x96","\xfb","\x1a"),
	HX_HCSTRING("_extraSurfaceTime","\x89","\x4e","\x3d","\x4e"),
	HX_HCSTRING("_jumpSurface","\xe0","\x10","\xa1","\xa5"),
	HX_HCSTRING("_jumpCallback","\xb2","\x4b","\x64","\x83"),
	HX_HCSTRING("_movement","\x8e","\x7c","\xcd","\x47"),
	HX_HCSTRING("_stopping","\xd3","\x02","\xcf","\xf9"),
	HX_HCSTRING("_rotation","\x9d","\x34","\x1c","\x50"),
	HX_HCSTRING("_rotationStopping","\x31","\x61","\x68","\xbf"),
	HX_HCSTRING("_capVelocity","\x50","\x42","\x92","\x5a"),
	HX_HCSTRING("_hotkeys","\x82","\xd1","\x8f","\x91"),
	HX_HCSTRING("_upKey","\x45","\x4d","\x0a","\xa4"),
	HX_HCSTRING("_downKey","\xde","\x8b","\x55","\xa7"),
	HX_HCSTRING("_leftKey","\x59","\x11","\x97","\x2e"),
	HX_HCSTRING("_rightKey","\x82","\xfe","\xae","\x2b"),
	HX_HCSTRING("_fireKey","\x0a","\x7d","\x68","\xad"),
	HX_HCSTRING("_altFireKey","\x7f","\x86","\x76","\xd8"),
	HX_HCSTRING("_jumpKey","\xd2","\x1e","\x4b","\x46"),
	HX_HCSTRING("_altJumpKey","\x47","\x28","\x59","\x71"),
	HX_HCSTRING("_antiClockwiseKey","\xee","\x3b","\x04","\x21"),
	HX_HCSTRING("_clockwiseKey","\xac","\x19","\x0a","\x53"),
	HX_HCSTRING("_thrustKey","\xa8","\x3d","\xcf","\xfd"),
	HX_HCSTRING("_reverseKey","\xbc","\xb6","\xe9","\x80"),
	HX_HCSTRING("invertX","\x82","\x4c","\xf1","\x3d"),
	HX_HCSTRING("invertY","\x83","\x4c","\xf1","\x3d"),
	HX_HCSTRING("_jumpSound","\xc2","\x14","\x3c","\x68"),
	HX_HCSTRING("_fireSound","\xfa","\x70","\x17","\xd8"),
	HX_HCSTRING("_walkSound","\xc7","\x3a","\x2f","\x7d"),
	HX_HCSTRING("_thrustSound","\x18","\x15","\x26","\x20"),
	HX_HCSTRING("setMovementSpeed","\xd6","\xee","\x25","\xef"),
	HX_HCSTRING("setStandardSpeed","\x08","\x0a","\x1f","\xfc"),
	HX_HCSTRING("setAdvancedMovementSpeed","\xd4","\x25","\xa8","\x64"),
	HX_HCSTRING("setRotationSpeed","\x67","\xa0","\xd6","\xb5"),
	HX_HCSTRING("setRotationType","\xda","\xa5","\x58","\x3e"),
	HX_HCSTRING("setMaximumRotationSpeed","\x2b","\xa2","\x23","\x1e"),
	HX_HCSTRING("setRotationDeceleration","\xbf","\xf2","\x43","\xe4"),
	HX_HCSTRING("setRotationLimits","\xf8","\xef","\xf4","\x96"),
	HX_HCSTRING("disableRotationLimits","\xbe","\xec","\x4f","\x3f"),
	HX_HCSTRING("setRotationKeys","\x14","\x95","\x56","\x38"),
	HX_HCSTRING("setThrust","\xda","\x23","\x6d","\xee"),
	HX_HCSTRING("setMaximumSpeed","\x49","\x9e","\xb1","\x9e"),
	HX_HCSTRING("setDeceleration","\x61","\xf2","\x11","\x80"),
	HX_HCSTRING("setGravity","\xcc","\x92","\xde","\xca"),
	HX_HCSTRING("flipGravity","\x21","\xe3","\x6f","\x48"),
	HX_HCSTRING("resetSpeeds","\x3b","\x82","\x0f","\x5b"),
	HX_HCSTRING("setSounds","\x06","\x1e","\xd6","\x91"),
	HX_HCSTRING("setFireButton","\x8a","\x94","\x0b","\xb3"),
	HX_HCSTRING("setJumpButton","\xc2","\x3f","\xf6","\x42"),
	HX_HCSTRING("setBounds","\xb7","\xfb","\xc4","\xc5"),
	HX_HCSTRING("removeBounds","\xd9","\x21","\x4b","\xd5"),
	HX_HCSTRING("moveUp","\xcc","\xd3","\xac","\xcc"),
	HX_HCSTRING("moveDown","\x13","\x64","\x25","\xe5"),
	HX_HCSTRING("moveLeft","\xb8","\x73","\x67","\xea"),
	HX_HCSTRING("moveRight","\x0b","\xdb","\x2a","\xa7"),
	HX_HCSTRING("moveAntiClockwise","\x1f","\xe0","\xf6","\xb1"),
	HX_HCSTRING("moveClockwise","\xa1","\x10","\x4f","\x57"),
	HX_HCSTRING("moveThrust","\x89","\x28","\xf4","\xde"),
	HX_HCSTRING("moveReverse","\x11","\x72","\x78","\xf3"),
	HX_HCSTRING("runFire","\xa1","\xe8","\xf8","\xd0"),
	HX_HCSTRING("runJump","\xd9","\xd9","\xa6","\xd3"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("setCustomKeys","\x87","\x00","\x27","\x46"),
	HX_HCSTRING("setCursorControl","\x25","\xc2","\xc5","\x60"),
	HX_HCSTRING("setWASDControl","\x20","\x75","\x88","\xde"),
	HX_HCSTRING("setESDFControl","\x6b","\x15","\x61","\x6a"),
	HX_HCSTRING("setIJKLControl","\x59","\x17","\x05","\xc7"),
	HX_HCSTRING("setHJKLControl","\x18","\xac","\x26","\x46"),
	HX_HCSTRING("setZQSDControl","\xd3","\x34","\xcb","\x65"),
	HX_HCSTRING("setDvorakSimplifiedControl","\xc4","\x4e","\x9f","\x20"),
	HX_HCSTRING("setNumpadControl","\x0e","\xab","\xdd","\xf0"),
	::String(null()) };

static void FlxControlHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::MOVEMENT_INSTANT,"MOVEMENT_INSTANT");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::MOVEMENT_ACCELERATES,"MOVEMENT_ACCELERATES");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::STOPPING_INSTANT,"STOPPING_INSTANT");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::STOPPING_DECELERATES,"STOPPING_DECELERATES");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::STOPPING_NEVER,"STOPPING_NEVER");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::ROTATION_INSTANT,"ROTATION_INSTANT");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::ROTATION_ACCELERATES,"ROTATION_ACCELERATES");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::ROTATION_STOPPING_INSTANT,"ROTATION_STOPPING_INSTANT");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::ROTATION_STOPPING_DECELERATES,"ROTATION_STOPPING_DECELERATES");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::ROTATION_STOPPING_NEVER,"ROTATION_STOPPING_NEVER");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::KEYMODE_PRESSED,"KEYMODE_PRESSED");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::KEYMODE_JUST_DOWN,"KEYMODE_JUST_DOWN");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::KEYMODE_RELEASED,"KEYMODE_RELEASED");
	HX_MARK_MEMBER_NAME(FlxControlHandler_obj::DIAGONAL_COMPENSATION_FACTOR,"DIAGONAL_COMPENSATION_FACTOR");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxControlHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::MOVEMENT_INSTANT,"MOVEMENT_INSTANT");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::MOVEMENT_ACCELERATES,"MOVEMENT_ACCELERATES");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::STOPPING_INSTANT,"STOPPING_INSTANT");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::STOPPING_DECELERATES,"STOPPING_DECELERATES");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::STOPPING_NEVER,"STOPPING_NEVER");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::ROTATION_INSTANT,"ROTATION_INSTANT");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::ROTATION_ACCELERATES,"ROTATION_ACCELERATES");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::ROTATION_STOPPING_INSTANT,"ROTATION_STOPPING_INSTANT");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::ROTATION_STOPPING_DECELERATES,"ROTATION_STOPPING_DECELERATES");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::ROTATION_STOPPING_NEVER,"ROTATION_STOPPING_NEVER");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::KEYMODE_PRESSED,"KEYMODE_PRESSED");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::KEYMODE_JUST_DOWN,"KEYMODE_JUST_DOWN");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::KEYMODE_RELEASED,"KEYMODE_RELEASED");
	HX_VISIT_MEMBER_NAME(FlxControlHandler_obj::DIAGONAL_COMPENSATION_FACTOR,"DIAGONAL_COMPENSATION_FACTOR");
};

#endif

hx::Class FlxControlHandler_obj::__mClass;

static ::String FlxControlHandler_obj_sStaticFields[] = {
	HX_HCSTRING("MOVEMENT_INSTANT","\x71","\x60","\xd3","\xad"),
	HX_HCSTRING("MOVEMENT_ACCELERATES","\x86","\xb6","\xb8","\x7c"),
	HX_HCSTRING("STOPPING_INSTANT","\xb6","\x33","\xdc","\x00"),
	HX_HCSTRING("STOPPING_DECELERATES","\xcc","\x41","\xfd","\x3d"),
	HX_HCSTRING("STOPPING_NEVER","\x21","\x68","\xe4","\xd7"),
	HX_HCSTRING("ROTATION_INSTANT","\x80","\x3f","\xbf","\x93"),
	HX_HCSTRING("ROTATION_ACCELERATES","\x15","\xc9","\x82","\x32"),
	HX_HCSTRING("ROTATION_STOPPING_INSTANT","\x17","\x8f","\x68","\xb5"),
	HX_HCSTRING("ROTATION_STOPPING_DECELERATES","\xad","\x61","\x31","\x79"),
	HX_HCSTRING("ROTATION_STOPPING_NEVER","\x42","\x79","\x31","\x92"),
	HX_HCSTRING("KEYMODE_PRESSED","\x65","\x1e","\xde","\xcb"),
	HX_HCSTRING("KEYMODE_JUST_DOWN","\x38","\x61","\x13","\x65"),
	HX_HCSTRING("KEYMODE_RELEASED","\x7a","\x87","\x52","\x9d"),
	HX_HCSTRING("DIAGONAL_COMPENSATION_FACTOR","\x8a","\x2b","\xea","\x21"),
	::String(null())
};

void FlxControlHandler_obj::__register()
{
	hx::Object *dummy = new FlxControlHandler_obj;
	FlxControlHandler_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.plugin.control.FlxControlHandler","\xdc","\x82","\x9c","\x08");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = FlxControlHandler_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxControlHandler_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxControlHandler_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxControlHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxControlHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxControlHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxControlHandler_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxControlHandler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_32_boot)
HXDLIN(  32)		MOVEMENT_INSTANT = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_36_boot)
HXDLIN(  36)		MOVEMENT_ACCELERATES = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_40_boot)
HXDLIN(  40)		STOPPING_INSTANT = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_44_boot)
HXDLIN(  44)		STOPPING_DECELERATES = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_48_boot)
HXDLIN(  48)		STOPPING_NEVER = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_53_boot)
HXDLIN(  53)		ROTATION_INSTANT = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_57_boot)
HXDLIN(  57)		ROTATION_ACCELERATES = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_61_boot)
HXDLIN(  61)		ROTATION_STOPPING_INSTANT = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_65_boot)
HXDLIN(  65)		ROTATION_STOPPING_DECELERATES = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_69_boot)
HXDLIN(  69)		ROTATION_STOPPING_NEVER = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_74_boot)
HXDLIN(  74)		KEYMODE_PRESSED = (int)0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_79_boot)
HXDLIN(  79)		KEYMODE_JUST_DOWN = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_84_boot)
HXDLIN(  84)		KEYMODE_RELEASED = (int)2;
            	}
{
            	HX_STACKFRAME(&_hx_pos_7fb2310ab316335e_95_boot)
HXDLIN(  95)		DIAGONAL_COMPENSATION_FACTOR = ((Float)0.707106781185);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace plugin
} // end namespace control
