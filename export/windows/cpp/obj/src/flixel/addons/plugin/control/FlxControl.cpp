// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_plugin_control_FlxControl
#include <flixel/addons/plugin/control/FlxControl.h>
#endif
#ifndef INCLUDED_flixel_addons_plugin_control_FlxControlHandler
#include <flixel/addons/plugin/control/FlxControlHandler.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ObjectMap
#include <haxe/ds/ObjectMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e6a04b39bd936023_14_new,"flixel.addons.plugin.control.FlxControl","new",0x8b20e280,"flixel.addons.plugin.control.FlxControl.new","flixel/addons/plugin/control/FlxControl.hx",14,0x86f1ecce)
HX_LOCAL_STACK_FRAME(_hx_pos_e6a04b39bd936023_151_update,"flixel.addons.plugin.control.FlxControl","update",0xf55687e9,"flixel.addons.plugin.control.FlxControl.update","flixel/addons/plugin/control/FlxControl.hx",151,0x86f1ecce)
HX_LOCAL_STACK_FRAME(_hx_pos_e6a04b39bd936023_165_destroy,"flixel.addons.plugin.control.FlxControl","destroy",0x3d16cf1a,"flixel.addons.plugin.control.FlxControl.destroy","flixel/addons/plugin/control/FlxControl.hx",165,0x86f1ecce)
HX_LOCAL_STACK_FRAME(_hx_pos_e6a04b39bd936023_38_create,"flixel.addons.plugin.control.FlxControl","create",0xea6068dc,"flixel.addons.plugin.control.FlxControl.create","flixel/addons/plugin/control/FlxControl.hx",38,0x86f1ecce)
HX_LOCAL_STACK_FRAME(_hx_pos_e6a04b39bd936023_82_remove,"flixel.addons.plugin.control.FlxControl","remove",0x72d99e24,"flixel.addons.plugin.control.FlxControl.remove","flixel/addons/plugin/control/FlxControl.hx",82,0x86f1ecce)
HX_LOCAL_STACK_FRAME(_hx_pos_e6a04b39bd936023_98_clear,"flixel.addons.plugin.control.FlxControl","clear",0xee294bad,"flixel.addons.plugin.control.FlxControl.clear","flixel/addons/plugin/control/FlxControl.hx",98,0x86f1ecce)
HX_LOCAL_STACK_FRAME(_hx_pos_e6a04b39bd936023_112_start,"flixel.addons.plugin.control.FlxControl","start",0x29d94e82,"flixel.addons.plugin.control.FlxControl.start","flixel/addons/plugin/control/FlxControl.hx",112,0x86f1ecce)
HX_LOCAL_STACK_FRAME(_hx_pos_e6a04b39bd936023_133_stop,"flixel.addons.plugin.control.FlxControl","stop",0x34feb9e2,"flixel.addons.plugin.control.FlxControl.stop","flixel/addons/plugin/control/FlxControl.hx",133,0x86f1ecce)
HX_LOCAL_STACK_FRAME(_hx_pos_e6a04b39bd936023_23_boot,"flixel.addons.plugin.control.FlxControl","boot",0x29be4e12,"flixel.addons.plugin.control.FlxControl.boot","flixel/addons/plugin/control/FlxControl.hx",23,0x86f1ecce)
namespace flixel{
namespace addons{
namespace plugin{
namespace control{

void FlxControl_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e6a04b39bd936023_14_new)
HXDLIN(  14)		super::__construct();
            	}

Dynamic FlxControl_obj::__CreateEmpty() { return new FlxControl_obj; }

void *FlxControl_obj::_hx_vtable = 0;

Dynamic FlxControl_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxControl_obj > _hx_result = new FlxControl_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxControl_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
	} else {
		return inClassId==(int)0x5382ec46;
	}
}

void FlxControl_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_e6a04b39bd936023_151_update)
HXDLIN( 151)		 ::Dynamic handler = ::flixel::addons::plugin::control::FlxControl_obj::_members->iterator();
HXDLIN( 151)		while(( (bool)(handler->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 151)			 ::flixel::addons::plugin::control::FlxControlHandler handler1 = ( ( ::flixel::addons::plugin::control::FlxControlHandler)(handler->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 153)			if ((handler1->enabled == true)) {
HXLINE( 155)				handler1->update(elapsed);
            			}
            		}
            	}


void FlxControl_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_e6a04b39bd936023_165_destroy)
HXDLIN( 165)		::flixel::addons::plugin::control::FlxControl_obj::clear();
            	}


 ::flixel::addons::plugin::control::FlxControlHandler FlxControl_obj::player1;

 ::flixel::addons::plugin::control::FlxControlHandler FlxControl_obj::player2;

 ::flixel::addons::plugin::control::FlxControlHandler FlxControl_obj::player3;

 ::flixel::addons::plugin::control::FlxControlHandler FlxControl_obj::player4;

 ::haxe::ds::ObjectMap FlxControl_obj::_members;

 ::flixel::addons::plugin::control::FlxControlHandler FlxControl_obj::create( ::flixel::FlxSprite Sprite,int MovementType,int StoppingType,hx::Null< int >  __o_Player,hx::Null< bool >  __o_UpdateFacing,hx::Null< bool >  __o_EnableArrowKeys){
int Player = __o_Player.Default(1);
bool UpdateFacing = __o_UpdateFacing.Default(false);
bool EnableArrowKeys = __o_EnableArrowKeys.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_e6a04b39bd936023_38_create)
HXLINE(  39)		 ::flixel::addons::plugin::control::FlxControlHandler result;
HXLINE(  41)		if ((Player == (int)1)) {
HXLINE(  43)			::flixel::addons::plugin::control::FlxControl_obj::player1 =  ::flixel::addons::plugin::control::FlxControlHandler_obj::__alloc( HX_CTX ,Sprite,MovementType,StoppingType,UpdateFacing,EnableArrowKeys);
HXLINE(  44)			::flixel::addons::plugin::control::FlxControl_obj::_members->set(::flixel::addons::plugin::control::FlxControl_obj::player1,::flixel::addons::plugin::control::FlxControl_obj::player1);
HXLINE(  45)			result = ::flixel::addons::plugin::control::FlxControl_obj::player1;
            		}
            		else {
HXLINE(  47)			if ((Player == (int)2)) {
HXLINE(  49)				::flixel::addons::plugin::control::FlxControl_obj::player2 =  ::flixel::addons::plugin::control::FlxControlHandler_obj::__alloc( HX_CTX ,Sprite,MovementType,StoppingType,UpdateFacing,EnableArrowKeys);
HXLINE(  50)				::flixel::addons::plugin::control::FlxControl_obj::_members->set(::flixel::addons::plugin::control::FlxControl_obj::player2,::flixel::addons::plugin::control::FlxControl_obj::player2);
HXLINE(  51)				result = ::flixel::addons::plugin::control::FlxControl_obj::player2;
            			}
            			else {
HXLINE(  53)				if ((Player == (int)3)) {
HXLINE(  55)					::flixel::addons::plugin::control::FlxControl_obj::player3 =  ::flixel::addons::plugin::control::FlxControlHandler_obj::__alloc( HX_CTX ,Sprite,MovementType,StoppingType,UpdateFacing,EnableArrowKeys);
HXLINE(  56)					::flixel::addons::plugin::control::FlxControl_obj::_members->set(::flixel::addons::plugin::control::FlxControl_obj::player3,::flixel::addons::plugin::control::FlxControl_obj::player3);
HXLINE(  57)					result = ::flixel::addons::plugin::control::FlxControl_obj::player3;
            				}
            				else {
HXLINE(  59)					if ((Player == (int)4)) {
HXLINE(  61)						::flixel::addons::plugin::control::FlxControl_obj::player4 =  ::flixel::addons::plugin::control::FlxControlHandler_obj::__alloc( HX_CTX ,Sprite,MovementType,StoppingType,UpdateFacing,EnableArrowKeys);
HXLINE(  62)						::flixel::addons::plugin::control::FlxControl_obj::_members->set(::flixel::addons::plugin::control::FlxControl_obj::player4,::flixel::addons::plugin::control::FlxControl_obj::player4);
HXLINE(  63)						result = ::flixel::addons::plugin::control::FlxControl_obj::player4;
            					}
            					else {
HXLINE(  67)						 ::flixel::addons::plugin::control::FlxControlHandler newControlHandler =  ::flixel::addons::plugin::control::FlxControlHandler_obj::__alloc( HX_CTX ,Sprite,MovementType,StoppingType,UpdateFacing,EnableArrowKeys);
HXLINE(  68)						::flixel::addons::plugin::control::FlxControl_obj::_members->set(newControlHandler,newControlHandler);
HXLINE(  69)						result = newControlHandler;
            					}
            				}
            			}
            		}
HXLINE(  72)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(FlxControl_obj,create,return )

bool FlxControl_obj::remove( ::flixel::addons::plugin::control::FlxControlHandler ControlHandler){
            	HX_STACKFRAME(&_hx_pos_e6a04b39bd936023_82_remove)
HXLINE(  83)		if (::flixel::addons::plugin::control::FlxControl_obj::_members->exists(ControlHandler)) {
HXLINE(  85)			::flixel::addons::plugin::control::FlxControl_obj::_members->remove(ControlHandler);
HXLINE(  86)			return true;
            		}
HXLINE(  89)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControl_obj,remove,return )

void FlxControl_obj::clear(){
            	HX_STACKFRAME(&_hx_pos_e6a04b39bd936023_98_clear)
HXDLIN(  98)		 ::Dynamic handler = ::flixel::addons::plugin::control::FlxControl_obj::_members->iterator();
HXDLIN(  98)		while(( (bool)(handler->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN(  98)			 ::flixel::addons::plugin::control::FlxControlHandler handler1 = ( ( ::flixel::addons::plugin::control::FlxControlHandler)(handler->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 100)			::flixel::addons::plugin::control::FlxControl_obj::_members->remove(handler1);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(FlxControl_obj,clear,(void))

void FlxControl_obj::start( ::flixel::addons::plugin::control::FlxControlHandler ControlHandler){
            	HX_STACKFRAME(&_hx_pos_e6a04b39bd936023_112_start)
HXDLIN( 112)		if (hx::IsNotNull( ControlHandler )) {
HXLINE( 114)			::flixel::addons::plugin::control::FlxControl_obj::_members->get(ControlHandler).StaticCast<  ::flixel::addons::plugin::control::FlxControlHandler >()->enabled = true;
            		}
            		else {
HXLINE( 118)			 ::Dynamic handler = ::flixel::addons::plugin::control::FlxControl_obj::_members->iterator();
HXDLIN( 118)			while(( (bool)(handler->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 118)				 ::flixel::addons::plugin::control::FlxControlHandler handler1 = ( ( ::flixel::addons::plugin::control::FlxControlHandler)(handler->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 120)				handler1->enabled = true;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControl_obj,start,(void))

void FlxControl_obj::stop( ::flixel::addons::plugin::control::FlxControlHandler ControlHandler){
            	HX_STACKFRAME(&_hx_pos_e6a04b39bd936023_133_stop)
HXDLIN( 133)		if (hx::IsNotNull( ControlHandler )) {
HXLINE( 135)			::flixel::addons::plugin::control::FlxControl_obj::_members->get(ControlHandler).StaticCast<  ::flixel::addons::plugin::control::FlxControlHandler >()->enabled = false;
            		}
            		else {
HXLINE( 139)			 ::Dynamic handler = ::flixel::addons::plugin::control::FlxControl_obj::_members->iterator();
HXDLIN( 139)			while(( (bool)(handler->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 139)				 ::flixel::addons::plugin::control::FlxControlHandler handler1 = ( ( ::flixel::addons::plugin::control::FlxControlHandler)(handler->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 141)				handler1->enabled = false;
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(FlxControl_obj,stop,(void))


hx::ObjectPtr< FlxControl_obj > FlxControl_obj::__new() {
	hx::ObjectPtr< FlxControl_obj > __this = new FlxControl_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxControl_obj > FlxControl_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxControl_obj *__this = (FlxControl_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxControl_obj), true, "flixel.addons.plugin.control.FlxControl"));
	*(void **)__this = FlxControl_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxControl_obj::FlxControl_obj()
{
}

hx::Val FlxControl_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool FlxControl_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clear") ) { outValue = clear_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"start") ) { outValue = start_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"remove") ) { outValue = remove_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"player1") ) { outValue = ( player1 ); return true; }
		if (HX_FIELD_EQ(inName,"player2") ) { outValue = ( player2 ); return true; }
		if (HX_FIELD_EQ(inName,"player3") ) { outValue = ( player3 ); return true; }
		if (HX_FIELD_EQ(inName,"player4") ) { outValue = ( player4 ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_members") ) { outValue = ( _members ); return true; }
	}
	return false;
}

bool FlxControl_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"player1") ) { player1=ioValue.Cast<  ::flixel::addons::plugin::control::FlxControlHandler >(); return true; }
		if (HX_FIELD_EQ(inName,"player2") ) { player2=ioValue.Cast<  ::flixel::addons::plugin::control::FlxControlHandler >(); return true; }
		if (HX_FIELD_EQ(inName,"player3") ) { player3=ioValue.Cast<  ::flixel::addons::plugin::control::FlxControlHandler >(); return true; }
		if (HX_FIELD_EQ(inName,"player4") ) { player4=ioValue.Cast<  ::flixel::addons::plugin::control::FlxControlHandler >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_members") ) { _members=ioValue.Cast<  ::haxe::ds::ObjectMap >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *FlxControl_obj_sMemberStorageInfo = 0;
static hx::StaticInfo FlxControl_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::flixel::addons::plugin::control::FlxControlHandler*/ ,(void *) &FlxControl_obj::player1,HX_HCSTRING("player1","\xb0","\x09","\x15","\x8a")},
	{hx::fsObject /*::flixel::addons::plugin::control::FlxControlHandler*/ ,(void *) &FlxControl_obj::player2,HX_HCSTRING("player2","\xb1","\x09","\x15","\x8a")},
	{hx::fsObject /*::flixel::addons::plugin::control::FlxControlHandler*/ ,(void *) &FlxControl_obj::player3,HX_HCSTRING("player3","\xb2","\x09","\x15","\x8a")},
	{hx::fsObject /*::flixel::addons::plugin::control::FlxControlHandler*/ ,(void *) &FlxControl_obj::player4,HX_HCSTRING("player4","\xb3","\x09","\x15","\x8a")},
	{hx::fsObject /*::haxe::ds::ObjectMap*/ ,(void *) &FlxControl_obj::_members,HX_HCSTRING("_members","\x5a","\x86","\x28","\x54")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String FlxControl_obj_sMemberFields[] = {
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("destroy","\xfa","\x2c","\x86","\x24"),
	::String(null()) };

static void FlxControl_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(FlxControl_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(FlxControl_obj::player1,"player1");
	HX_MARK_MEMBER_NAME(FlxControl_obj::player2,"player2");
	HX_MARK_MEMBER_NAME(FlxControl_obj::player3,"player3");
	HX_MARK_MEMBER_NAME(FlxControl_obj::player4,"player4");
	HX_MARK_MEMBER_NAME(FlxControl_obj::_members,"_members");
};

#ifdef HXCPP_VISIT_ALLOCS
static void FlxControl_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(FlxControl_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(FlxControl_obj::player1,"player1");
	HX_VISIT_MEMBER_NAME(FlxControl_obj::player2,"player2");
	HX_VISIT_MEMBER_NAME(FlxControl_obj::player3,"player3");
	HX_VISIT_MEMBER_NAME(FlxControl_obj::player4,"player4");
	HX_VISIT_MEMBER_NAME(FlxControl_obj::_members,"_members");
};

#endif

hx::Class FlxControl_obj::__mClass;

static ::String FlxControl_obj_sStaticFields[] = {
	HX_HCSTRING("player1","\xb0","\x09","\x15","\x8a"),
	HX_HCSTRING("player2","\xb1","\x09","\x15","\x8a"),
	HX_HCSTRING("player3","\xb2","\x09","\x15","\x8a"),
	HX_HCSTRING("player4","\xb3","\x09","\x15","\x8a"),
	HX_HCSTRING("_members","\x5a","\x86","\x28","\x54"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("remove","\x44","\x9c","\x88","\x04"),
	HX_HCSTRING("clear","\x8d","\x71","\x5b","\x48"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("stop","\x02","\xf0","\x5b","\x4c"),
	::String(null())
};

void FlxControl_obj::__register()
{
	hx::Object *dummy = new FlxControl_obj;
	FlxControl_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.plugin.control.FlxControl","\x8e","\xe2","\xe5","\xc3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &FlxControl_obj::__GetStatic;
	__mClass->mSetStaticField = &FlxControl_obj::__SetStatic;
	__mClass->mMarkFunc = FlxControl_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(FlxControl_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxControl_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxControl_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = FlxControl_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxControl_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxControl_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void FlxControl_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_e6a04b39bd936023_23_boot)
HXDLIN(  23)		_members =  ::haxe::ds::ObjectMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace plugin
} // end namespace control
