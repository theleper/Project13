// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledImageLayer
#include <flixel/addons/editors/tiled/TiledImageLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledLayer
#include <flixel/addons/editors/tiled/TiledLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledObjectLayer
#include <flixel/addons/editors/tiled/TiledObjectLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledPropertySet
#include <flixel/addons/editors/tiled/TiledPropertySet.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileLayer
#include <flixel/addons/editors/tiled/TiledTileLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileSet
#include <flixel/addons/editors/tiled/TiledTileSet.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_67d155f97991e016_14_new,"flixel.addons.editors.tiled.TiledMap","new",0xde9b4f21,"flixel.addons.editors.tiled.TiledMap.new","flixel/addons/editors/tiled/TiledMap.hx",14,0xfb5e15cd)
HX_LOCAL_STACK_FRAME(_hx_pos_67d155f97991e016_78_loadAttributes,"flixel.addons.editors.tiled.TiledMap","loadAttributes",0x4081997c,"flixel.addons.editors.tiled.TiledMap.loadAttributes","flixel/addons/editors/tiled/TiledMap.hx",78,0xfb5e15cd)
HX_LOCAL_STACK_FRAME(_hx_pos_67d155f97991e016_95_loadProperties,"flixel.addons.editors.tiled.TiledMap","loadProperties",0x0a1eec98,"flixel.addons.editors.tiled.TiledMap.loadProperties","flixel/addons/editors/tiled/TiledMap.hx",95,0xfb5e15cd)
HX_LOCAL_STACK_FRAME(_hx_pos_67d155f97991e016_115_loadTilesets,"flixel.addons.editors.tiled.TiledMap","loadTilesets",0x94e39a24,"flixel.addons.editors.tiled.TiledMap.loadTilesets","flixel/addons/editors/tiled/TiledMap.hx",115,0xfb5e15cd)
HX_LOCAL_STACK_FRAME(_hx_pos_67d155f97991e016_130_loadLayers,"flixel.addons.editors.tiled.TiledMap","loadLayers",0x89a88fa7,"flixel.addons.editors.tiled.TiledMap.loadLayers","flixel/addons/editors/tiled/TiledMap.hx",130,0xfb5e15cd)
HX_LOCAL_STACK_FRAME(_hx_pos_67d155f97991e016_153_getTileSet,"flixel.addons.editors.tiled.TiledMap","getTileSet",0x10a90a7d,"flixel.addons.editors.tiled.TiledMap.getTileSet","flixel/addons/editors/tiled/TiledMap.hx",153,0xfb5e15cd)
HX_LOCAL_STACK_FRAME(_hx_pos_67d155f97991e016_158_getLayer,"flixel.addons.editors.tiled.TiledMap","getLayer",0xf247f6fa,"flixel.addons.editors.tiled.TiledMap.getLayer","flixel/addons/editors/tiled/TiledMap.hx",158,0xfb5e15cd)
HX_LOCAL_STACK_FRAME(_hx_pos_67d155f97991e016_165_getGidOwner,"flixel.addons.editors.tiled.TiledMap","getGidOwner",0xd5d72748,"flixel.addons.editors.tiled.TiledMap.getGidOwner","flixel/addons/editors/tiled/TiledMap.hx",165,0xfb5e15cd)
namespace flixel{
namespace addons{
namespace editors{
namespace tiled{

void TiledMap_obj::__construct( ::Dynamic data,::String __o_rootPath){
::String rootPath = __o_rootPath.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_67d155f97991e016_14_new)
HXLINE(  48)		this->rootPath = HX_("",00,00,00,00);
HXLINE(  46)		this->layerMap =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  45)		this->noLoadHash =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  40)		this->layers = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  38)		this->tilesetArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  34)		this->tilesets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  29)		this->properties =  ::flixel::addons::editors::tiled::TiledPropertySet_obj::__alloc( HX_CTX );
HXLINE(  56)		 ::haxe::xml::Fast source = null();
HXLINE(  58)		this->rootPath = rootPath;
HXLINE(  60)		if (::Std_obj::is(data,hx::ClassOf< ::String >())) {
HXLINE(  62)			source =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,::Xml_obj::parse(::openfl::_legacy::Assets_obj::getText(( (::String)(data) ))));
            		}
            		else {
HXLINE(  64)			if (::Std_obj::is(data,hx::ClassOf< ::Xml >())) {
HXLINE(  66)				source =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,data);
            			}
            		}
HXLINE(  69)		source = source->node->resolve(HX_("map",9c,0a,53,00));
HXLINE(  71)		this->loadAttributes(source);
HXLINE(  72)		this->loadProperties(source);
HXLINE(  73)		this->loadTilesets(source);
HXLINE(  74)		this->loadLayers(source);
            	}

Dynamic TiledMap_obj::__CreateEmpty() { return new TiledMap_obj; }

void *TiledMap_obj::_hx_vtable = 0;

Dynamic TiledMap_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TiledMap_obj > _hx_result = new TiledMap_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TiledMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x708f1085;
}

void TiledMap_obj::loadAttributes( ::haxe::xml::Fast source){
            	HX_STACKFRAME(&_hx_pos_67d155f97991e016_78_loadAttributes)
HXLINE(  79)		::String _hx_tmp;
HXDLIN(  79)		if (hx::IsNotNull( source->att->resolve(HX_("version",18,e7,f1,7c)) )) {
HXLINE(  79)			_hx_tmp = source->att->resolve(HX_("version",18,e7,f1,7c));
            		}
            		else {
HXLINE(  79)			_hx_tmp = HX_("unknown",8a,23,7b,e1);
            		}
HXDLIN(  79)		this->version = _hx_tmp;
HXLINE(  80)		::String _hx_tmp1;
HXDLIN(  80)		if (hx::IsNotNull( source->att->resolve(HX_("orientation",d0,ee,fe,fd)) )) {
HXLINE(  80)			_hx_tmp1 = source->att->resolve(HX_("orientation",d0,ee,fe,fd));
            		}
            		else {
HXLINE(  80)			_hx_tmp1 = HX_("orthogonal",79,f9,f3,18);
            		}
HXDLIN(  80)		this->orientation = _hx_tmp1;
HXLINE(  81)		int _hx_tmp2;
HXDLIN(  81)		bool _hx_tmp3;
HXDLIN(  81)		if (source->has->resolve(HX_("backgroundcolor",b5,de,19,7a))) {
HXLINE(  81)			_hx_tmp3 = hx::IsNotNull( source->att->resolve(HX_("backgroundcolor",b5,de,19,7a)) );
            		}
            		else {
HXLINE(  81)			_hx_tmp3 = false;
            		}
HXDLIN(  81)		if (_hx_tmp3) {
HXLINE(  81)			_hx_tmp2 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(source->att->resolve(HX_("backgroundcolor",b5,de,19,7a)));
            		}
            		else {
HXLINE(  81)			_hx_tmp2 = (int)0;
            		}
HXDLIN(  81)		this->backgroundColor = _hx_tmp2;
HXLINE(  84)		this->width = ::Std_obj::parseInt(source->att->resolve(HX_("width",06,b6,62,ca)));
HXLINE(  85)		this->height = ::Std_obj::parseInt(source->att->resolve(HX_("height",e7,07,4c,02)));
HXLINE(  86)		this->tileWidth = ::Std_obj::parseInt(source->att->resolve(HX_("tilewidth",18,a4,90,c2)));
HXLINE(  87)		this->tileHeight = ::Std_obj::parseInt(source->att->resolve(HX_("tileheight",95,69,4e,32)));
HXLINE(  90)		this->fullWidth = (this->width * this->tileWidth);
HXLINE(  91)		this->fullHeight = (this->height * this->tileHeight);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledMap_obj,loadAttributes,(void))

void TiledMap_obj::loadProperties( ::haxe::xml::Fast source){
            	HX_GC_STACKFRAME(&_hx_pos_67d155f97991e016_95_loadProperties)
HXLINE(  96)		{
HXLINE(  96)			 ::_List::ListNode _g_head = source->nodes->resolve(HX_("properties",f3,fb,0e,61))->h;
HXDLIN(  96)			while(hx::IsNotNull( _g_head )){
HXLINE(  96)				 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(  96)				_g_head = _g_head->next;
HXDLIN(  96)				 ::haxe::xml::Fast node = val;
HXLINE(  98)				this->properties->extend(node);
            			}
            		}
HXLINE( 101)		::String noLoadStr = ( (::String)(::haxe::IMap_obj::get(this->properties->keys,HX_("noload",e7,ae,73,2c))) );
HXLINE( 102)		if (hx::IsNotNull( noLoadStr )) {
HXLINE( 104)			::Array< ::String > noLoadArr =  ::EReg_obj::__alloc( HX_CTX ,HX_("[,;|]",8b,5e,b9,82),HX_("",00,00,00,00))->split(noLoadStr);
HXLINE( 106)			{
HXLINE( 106)				int _g = (int)0;
HXDLIN( 106)				while((_g < noLoadArr->length)){
HXLINE( 106)					::String s = noLoadArr->__get(_g);
HXDLIN( 106)					_g = (_g + (int)1);
HXLINE( 108)					{
HXLINE( 108)						::Dynamic this1 = this->noLoadHash;
HXDLIN( 108)						( ( ::haxe::ds::StringMap)(this1) )->set(::StringTools_obj::trim(s),true);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledMap_obj,loadProperties,(void))

void TiledMap_obj::loadTilesets( ::haxe::xml::Fast source){
            	HX_GC_STACKFRAME(&_hx_pos_67d155f97991e016_115_loadTilesets)
HXDLIN( 115)		 ::_List::ListNode _g_head = source->nodes->resolve(HX_("tileset",34,81,93,45))->h;
HXDLIN( 115)		while(hx::IsNotNull( _g_head )){
HXDLIN( 115)			 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN( 115)			_g_head = _g_head->next;
HXDLIN( 115)			 ::haxe::xml::Fast node = val;
HXLINE( 117)			::String name;
HXDLIN( 117)			if (node->has->resolve(HX_("name",4b,72,ff,48))) {
HXLINE( 117)				name = node->att->resolve(HX_("name",4b,72,ff,48));
            			}
            			else {
HXLINE( 117)				name = HX_("",00,00,00,00);
            			}
HXLINE( 119)			if (!(this->noLoadHash->exists(name))) {
HXLINE( 121)				 ::flixel::addons::editors::tiled::TiledTileSet ts =  ::flixel::addons::editors::tiled::TiledTileSet_obj::__alloc( HX_CTX ,node,this->rootPath);
HXLINE( 122)				this->tilesets->set(ts->name,ts);
HXLINE( 123)				this->tilesetArray->push(ts);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledMap_obj,loadTilesets,(void))

void TiledMap_obj::loadLayers( ::haxe::xml::Fast source){
            	HX_GC_STACKFRAME(&_hx_pos_67d155f97991e016_130_loadLayers)
HXDLIN( 130)		 ::Dynamic el = source->get_elements();
HXDLIN( 130)		while(( (bool)(el->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 130)			 ::haxe::xml::Fast el1 = ( ( ::haxe::xml::Fast)(el->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 132)			bool _hx_tmp;
HXDLIN( 132)			if (el1->has->resolve(HX_("name",4b,72,ff,48))) {
HXLINE( 132)				::Dynamic this1 = this->noLoadHash;
HXDLIN( 132)				_hx_tmp = ( ( ::haxe::ds::StringMap)(this1) )->exists(el1->att->resolve(HX_("name",4b,72,ff,48)));
            			}
            			else {
HXLINE( 132)				_hx_tmp = false;
            			}
HXDLIN( 132)			if (_hx_tmp) {
HXLINE( 133)				continue;
            			}
HXLINE( 135)			 ::flixel::addons::editors::tiled::TiledLayer layer;
HXDLIN( 135)			::String _g = el1->get_name().toLowerCase();
HXDLIN( 135)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("imagelayer",96,d8,60,e8)) ){
HXLINE( 135)				layer =  ::flixel::addons::editors::tiled::TiledImageLayer_obj::__alloc( HX_CTX ,el1,hx::ObjectPtr<OBJ_>(this));
HXDLIN( 135)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("layer",d1,81,c0,6f)) ){
HXLINE( 135)				layer =  ::flixel::addons::editors::tiled::TiledTileLayer_obj::__alloc( HX_CTX ,el1,hx::ObjectPtr<OBJ_>(this));
HXDLIN( 135)				goto _hx_goto_8;
            			}
            			if (  (_hx_switch_0==HX_("objectgroup",20,60,f6,75)) ){
HXLINE( 135)				layer =  ::flixel::addons::editors::tiled::TiledObjectLayer_obj::__alloc( HX_CTX ,el1,hx::ObjectPtr<OBJ_>(this));
HXDLIN( 135)				goto _hx_goto_8;
            			}
            			/* default */{
HXLINE( 135)				layer = null();
            			}
            			_hx_goto_8:;
HXLINE( 143)			if (hx::IsNotNull( layer )) {
HXLINE( 145)				this->layers->push(layer);
HXLINE( 146)				this->layerMap->set(layer->name,layer);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledMap_obj,loadLayers,(void))

 ::flixel::addons::editors::tiled::TiledTileSet TiledMap_obj::getTileSet(::String name){
            	HX_STACKFRAME(&_hx_pos_67d155f97991e016_153_getTileSet)
HXDLIN( 153)		return this->tilesets->get(name).StaticCast<  ::flixel::addons::editors::tiled::TiledTileSet >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledMap_obj,getTileSet,return )

 ::flixel::addons::editors::tiled::TiledLayer TiledMap_obj::getLayer(::String name){
            	HX_STACKFRAME(&_hx_pos_67d155f97991e016_158_getLayer)
HXDLIN( 158)		return this->layerMap->get(name).StaticCast<  ::flixel::addons::editors::tiled::TiledLayer >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledMap_obj,getLayer,return )

 ::flixel::addons::editors::tiled::TiledTileSet TiledMap_obj::getGidOwner(int gid){
            	HX_STACKFRAME(&_hx_pos_67d155f97991e016_165_getGidOwner)
HXLINE( 166)		{
HXLINE( 166)			 ::Dynamic set = this->tilesets->iterator();
HXDLIN( 166)			while(( (bool)(set->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 166)				 ::flixel::addons::editors::tiled::TiledTileSet set1 = ( ( ::flixel::addons::editors::tiled::TiledTileSet)(set->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 168)				bool _hx_tmp;
HXDLIN( 168)				if ((gid >= set1->firstGID)) {
HXLINE( 168)					_hx_tmp = (gid < (set1->firstGID + set1->numTiles));
            				}
            				else {
HXLINE( 168)					_hx_tmp = false;
            				}
HXDLIN( 168)				if (_hx_tmp) {
HXLINE( 170)					return set1;
            				}
            			}
            		}
HXLINE( 174)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledMap_obj,getGidOwner,return )


hx::ObjectPtr< TiledMap_obj > TiledMap_obj::__new( ::Dynamic data,::String __o_rootPath) {
	hx::ObjectPtr< TiledMap_obj > __this = new TiledMap_obj();
	__this->__construct(data,__o_rootPath);
	return __this;
}

hx::ObjectPtr< TiledMap_obj > TiledMap_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic data,::String __o_rootPath) {
	TiledMap_obj *__this = (TiledMap_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TiledMap_obj), true, "flixel.addons.editors.tiled.TiledMap"));
	*(void **)__this = TiledMap_obj::_hx_vtable;
	__this->__construct(data,__o_rootPath);
	return __this;
}

TiledMap_obj::TiledMap_obj()
{
}

void TiledMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TiledMap);
	HX_MARK_MEMBER_NAME(version,"version");
	HX_MARK_MEMBER_NAME(orientation,"orientation");
	HX_MARK_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(tileWidth,"tileWidth");
	HX_MARK_MEMBER_NAME(tileHeight,"tileHeight");
	HX_MARK_MEMBER_NAME(fullWidth,"fullWidth");
	HX_MARK_MEMBER_NAME(fullHeight,"fullHeight");
	HX_MARK_MEMBER_NAME(properties,"properties");
	HX_MARK_MEMBER_NAME(tilesets,"tilesets");
	HX_MARK_MEMBER_NAME(tilesetArray,"tilesetArray");
	HX_MARK_MEMBER_NAME(layers,"layers");
	HX_MARK_MEMBER_NAME(noLoadHash,"noLoadHash");
	HX_MARK_MEMBER_NAME(layerMap,"layerMap");
	HX_MARK_MEMBER_NAME(rootPath,"rootPath");
	HX_MARK_END_CLASS();
}

void TiledMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(version,"version");
	HX_VISIT_MEMBER_NAME(orientation,"orientation");
	HX_VISIT_MEMBER_NAME(backgroundColor,"backgroundColor");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(tileWidth,"tileWidth");
	HX_VISIT_MEMBER_NAME(tileHeight,"tileHeight");
	HX_VISIT_MEMBER_NAME(fullWidth,"fullWidth");
	HX_VISIT_MEMBER_NAME(fullHeight,"fullHeight");
	HX_VISIT_MEMBER_NAME(properties,"properties");
	HX_VISIT_MEMBER_NAME(tilesets,"tilesets");
	HX_VISIT_MEMBER_NAME(tilesetArray,"tilesetArray");
	HX_VISIT_MEMBER_NAME(layers,"layers");
	HX_VISIT_MEMBER_NAME(noLoadHash,"noLoadHash");
	HX_VISIT_MEMBER_NAME(layerMap,"layerMap");
	HX_VISIT_MEMBER_NAME(rootPath,"rootPath");
}

hx::Val TiledMap_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"layers") ) { return hx::Val( layers ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { return hx::Val( version ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tilesets") ) { return hx::Val( tilesets ); }
		if (HX_FIELD_EQ(inName,"layerMap") ) { return hx::Val( layerMap ); }
		if (HX_FIELD_EQ(inName,"rootPath") ) { return hx::Val( rootPath ); }
		if (HX_FIELD_EQ(inName,"getLayer") ) { return hx::Val( getLayer_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileWidth") ) { return hx::Val( tileWidth ); }
		if (HX_FIELD_EQ(inName,"fullWidth") ) { return hx::Val( fullWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileHeight") ) { return hx::Val( tileHeight ); }
		if (HX_FIELD_EQ(inName,"fullHeight") ) { return hx::Val( fullHeight ); }
		if (HX_FIELD_EQ(inName,"properties") ) { return hx::Val( properties ); }
		if (HX_FIELD_EQ(inName,"noLoadHash") ) { return hx::Val( noLoadHash ); }
		if (HX_FIELD_EQ(inName,"loadLayers") ) { return hx::Val( loadLayers_dyn() ); }
		if (HX_FIELD_EQ(inName,"getTileSet") ) { return hx::Val( getTileSet_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"orientation") ) { return hx::Val( orientation ); }
		if (HX_FIELD_EQ(inName,"getGidOwner") ) { return hx::Val( getGidOwner_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tilesetArray") ) { return hx::Val( tilesetArray ); }
		if (HX_FIELD_EQ(inName,"loadTilesets") ) { return hx::Val( loadTilesets_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"loadAttributes") ) { return hx::Val( loadAttributes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadProperties") ) { return hx::Val( loadProperties_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { return hx::Val( backgroundColor ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TiledMap_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layers") ) { layers=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"version") ) { version=inValue.Cast< ::String >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tilesets") ) { tilesets=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"layerMap") ) { layerMap=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rootPath") ) { rootPath=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileWidth") ) { tileWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fullWidth") ) { fullWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileHeight") ) { tileHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fullHeight") ) { fullHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"properties") ) { properties=inValue.Cast<  ::flixel::addons::editors::tiled::TiledPropertySet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noLoadHash") ) { noLoadHash=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"orientation") ) { orientation=inValue.Cast< ::String >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tilesetArray") ) { tilesetArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundColor") ) { backgroundColor=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TiledMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"));
	outFields->push(HX_HCSTRING("orientation","\xd0","\xee","\xfe","\xfd"));
	outFields->push(HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("tileWidth","\xf8","\x13","\xbe","\x55"));
	outFields->push(HX_HCSTRING("tileHeight","\xb5","\xdd","\xe2","\x66"));
	outFields->push(HX_HCSTRING("fullWidth","\xf7","\x35","\x67","\x47"));
	outFields->push(HX_HCSTRING("fullHeight","\xd6","\x7a","\x37","\xe9"));
	outFields->push(HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61"));
	outFields->push(HX_HCSTRING("tilesets","\xbf","\x8c","\x7d","\x9b"));
	outFields->push(HX_HCSTRING("tilesetArray","\xc5","\x7f","\x64","\x32"));
	outFields->push(HX_HCSTRING("layers","\x82","\x15","\xb1","\x58"));
	outFields->push(HX_HCSTRING("noLoadHash","\x75","\xc6","\x05","\xa6"));
	outFields->push(HX_HCSTRING("layerMap","\x4b","\x79","\x26","\xb7"));
	outFields->push(HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TiledMap_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(TiledMap_obj,version),HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c")},
	{hx::fsString,(int)offsetof(TiledMap_obj,orientation),HX_HCSTRING("orientation","\xd0","\xee","\xfe","\xfd")},
	{hx::fsInt,(int)offsetof(TiledMap_obj,backgroundColor),HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d")},
	{hx::fsInt,(int)offsetof(TiledMap_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(TiledMap_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsInt,(int)offsetof(TiledMap_obj,tileWidth),HX_HCSTRING("tileWidth","\xf8","\x13","\xbe","\x55")},
	{hx::fsInt,(int)offsetof(TiledMap_obj,tileHeight),HX_HCSTRING("tileHeight","\xb5","\xdd","\xe2","\x66")},
	{hx::fsInt,(int)offsetof(TiledMap_obj,fullWidth),HX_HCSTRING("fullWidth","\xf7","\x35","\x67","\x47")},
	{hx::fsInt,(int)offsetof(TiledMap_obj,fullHeight),HX_HCSTRING("fullHeight","\xd6","\x7a","\x37","\xe9")},
	{hx::fsObject /*::flixel::addons::editors::tiled::TiledPropertySet*/ ,(int)offsetof(TiledMap_obj,properties),HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(TiledMap_obj,tilesets),HX_HCSTRING("tilesets","\xbf","\x8c","\x7d","\x9b")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TiledMap_obj,tilesetArray),HX_HCSTRING("tilesetArray","\xc5","\x7f","\x64","\x32")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TiledMap_obj,layers),HX_HCSTRING("layers","\x82","\x15","\xb1","\x58")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(TiledMap_obj,noLoadHash),HX_HCSTRING("noLoadHash","\x75","\xc6","\x05","\xa6")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(TiledMap_obj,layerMap),HX_HCSTRING("layerMap","\x4b","\x79","\x26","\xb7")},
	{hx::fsString,(int)offsetof(TiledMap_obj,rootPath),HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TiledMap_obj_sStaticStorageInfo = 0;
#endif

static ::String TiledMap_obj_sMemberFields[] = {
	HX_HCSTRING("version","\x18","\xe7","\xf1","\x7c"),
	HX_HCSTRING("orientation","\xd0","\xee","\xfe","\xfd"),
	HX_HCSTRING("backgroundColor","\x95","\x4e","\x47","\x0d"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("tileWidth","\xf8","\x13","\xbe","\x55"),
	HX_HCSTRING("tileHeight","\xb5","\xdd","\xe2","\x66"),
	HX_HCSTRING("fullWidth","\xf7","\x35","\x67","\x47"),
	HX_HCSTRING("fullHeight","\xd6","\x7a","\x37","\xe9"),
	HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61"),
	HX_HCSTRING("tilesets","\xbf","\x8c","\x7d","\x9b"),
	HX_HCSTRING("tilesetArray","\xc5","\x7f","\x64","\x32"),
	HX_HCSTRING("layers","\x82","\x15","\xb1","\x58"),
	HX_HCSTRING("noLoadHash","\x75","\xc6","\x05","\xa6"),
	HX_HCSTRING("layerMap","\x4b","\x79","\x26","\xb7"),
	HX_HCSTRING("rootPath","\xe7","\xb8","\x88","\xe1"),
	HX_HCSTRING("loadAttributes","\x9d","\xb2","\x22","\x2e"),
	HX_HCSTRING("loadProperties","\xb9","\x05","\xc0","\xf7"),
	HX_HCSTRING("loadTilesets","\x05","\x79","\xe6","\x54"),
	HX_HCSTRING("loadLayers","\x48","\x44","\xdc","\x0d"),
	HX_HCSTRING("getTileSet","\x1e","\xbf","\xdc","\x94"),
	HX_HCSTRING("getLayer","\x5b","\x91","\x97","\xcf"),
	HX_HCSTRING("getGidOwner","\x87","\x7f","\xe1","\xfe"),
	::String(null()) };

static void TiledMap_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TiledMap_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TiledMap_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TiledMap_obj::__mClass,"__mClass");
};

#endif

hx::Class TiledMap_obj::__mClass;

void TiledMap_obj::__register()
{
	hx::Object *dummy = new TiledMap_obj;
	TiledMap_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.editors.tiled.TiledMap","\xaf","\x2a","\xe3","\x7a");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TiledMap_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TiledMap_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TiledMap_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TiledMap_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TiledMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TiledMap_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace editors
} // end namespace tiled
