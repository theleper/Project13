// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledLayer
#include <flixel/addons/editors/tiled/TiledLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledLayerType
#include <flixel/addons/editors/tiled/TiledLayerType.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledMap
#include <flixel/addons/editors/tiled/TiledMap.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTile
#include <flixel/addons/editors/tiled/TiledTile.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileLayer
#include <flixel/addons/editors/tiled/TiledTileLayer.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileSet
#include <flixel/addons/editors/tiled/TiledTileSet.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_CompressionAlgorithm
#include <openfl/_legacy/utils/CompressionAlgorithm.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif
#ifndef INCLUDED_openfl_utils__Endian_Endian_Impl_
#include <openfl/utils/_Endian/Endian_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6e8a9623e9d30997_25_new,"flixel.addons.editors.tiled.TiledTileLayer","new",0x92503408,"flixel.addons.editors.tiled.TiledTileLayer.new","flixel/addons/editors/tiled/TiledTileLayer.hx",25,0x5f61a546)
HX_LOCAL_STACK_FRAME(_hx_pos_6e8a9623e9d30997_44_getByteArrayData,"flixel.addons.editors.tiled.TiledTileLayer","getByteArrayData",0x4a9ded1d,"flixel.addons.editors.tiled.TiledTileLayer.getByteArrayData","flixel/addons/editors/tiled/TiledTileLayer.hx",44,0x5f61a546)
HX_LOCAL_STACK_FRAME(_hx_pos_6e8a9623e9d30997_85_base64ToByteArray,"flixel.addons.editors.tiled.TiledTileLayer","base64ToByteArray",0x153e24cf,"flixel.addons.editors.tiled.TiledTileLayer.base64ToByteArray","flixel/addons/editors/tiled/TiledTileLayer.hx",85,0x5f61a546)
HX_LOCAL_STACK_FRAME(_hx_pos_6e8a9623e9d30997_135_resolveTile,"flixel.addons.editors.tiled.TiledTileLayer","resolveTile",0xa03c3be2,"flixel.addons.editors.tiled.TiledTileLayer.resolveTile","flixel/addons/editors/tiled/TiledTileLayer.hx",135,0x5f61a546)
HX_LOCAL_STACK_FRAME(_hx_pos_6e8a9623e9d30997_153_get_encoding,"flixel.addons.editors.tiled.TiledTileLayer","get_encoding",0x31302834,"flixel.addons.editors.tiled.TiledTileLayer.get_encoding","flixel/addons/editors/tiled/TiledTileLayer.hx",153,0x5f61a546)
HX_LOCAL_STACK_FRAME(_hx_pos_6e8a9623e9d30997_157_get_csvData,"flixel.addons.editors.tiled.TiledTileLayer","get_csvData",0x6c5b0ccf,"flixel.addons.editors.tiled.TiledTileLayer.get_csvData","flixel/addons/editors/tiled/TiledTileLayer.hx",157,0x5f61a546)
HX_LOCAL_STACK_FRAME(_hx_pos_6e8a9623e9d30997_173_get_tileArray,"flixel.addons.editors.tiled.TiledTileLayer","get_tileArray",0x6cbb250a,"flixel.addons.editors.tiled.TiledTileLayer.get_tileArray","flixel/addons/editors/tiled/TiledTileLayer.hx",173,0x5f61a546)
HX_LOCAL_STACK_FRAME(_hx_pos_6e8a9623e9d30997_22_boot,"flixel.addons.editors.tiled.TiledTileLayer","boot",0x6bf6538a,"flixel.addons.editors.tiled.TiledTileLayer.boot","flixel/addons/editors/tiled/TiledTileLayer.hx",22,0x5f61a546)
namespace flixel{
namespace addons{
namespace editors{
namespace tiled{

void TiledTileLayer_obj::__construct( ::haxe::xml::Fast source, ::flixel::addons::editors::tiled::TiledMap parent){
            	HX_STACKFRAME(&_hx_pos_6e8a9623e9d30997_25_new)
HXLINE(  26)		super::__construct(source,parent);
HXLINE(  27)		this->type = ::flixel::addons::editors::tiled::TiledLayerType_obj::TILE_dyn();
HXLINE(  28)		int _hx_tmp;
HXDLIN(  28)		if (source->has->resolve(HX_("x",78,00,00,00))) {
HXLINE(  28)			_hx_tmp = ::Std_obj::parseInt(source->att->resolve(HX_("x",78,00,00,00)));
            		}
            		else {
HXLINE(  28)			_hx_tmp = (int)0;
            		}
HXDLIN(  28)		this->x = _hx_tmp;
HXLINE(  29)		int _hx_tmp1;
HXDLIN(  29)		if (source->has->resolve(HX_("y",79,00,00,00))) {
HXLINE(  29)			_hx_tmp1 = ::Std_obj::parseInt(source->att->resolve(HX_("y",79,00,00,00)));
            		}
            		else {
HXLINE(  29)			_hx_tmp1 = (int)0;
            		}
HXDLIN(  29)		this->y = _hx_tmp1;
HXLINE(  30)		this->width = ::Std_obj::parseInt(source->att->resolve(HX_("width",06,b6,62,ca)));
HXLINE(  31)		this->height = ::Std_obj::parseInt(source->att->resolve(HX_("height",e7,07,4c,02)));
HXLINE(  33)		this->tiles = ::Array_obj< ::Dynamic>::__new();
HXLINE(  36)		this->xmlData = source->node->resolve(HX_("data",2a,56,63,42));
HXLINE(  37)		if (hx::IsNull( this->xmlData )) {
HXLINE(  39)			HX_STACK_DO_THROW(HX_("Error loading TiledLayer level data",8f,52,0a,f4));
            		}
            	}

Dynamic TiledTileLayer_obj::__CreateEmpty() { return new TiledTileLayer_obj; }

void *TiledTileLayer_obj::_hx_vtable = 0;

Dynamic TiledTileLayer_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TiledTileLayer_obj > _hx_result = new TiledTileLayer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TiledTileLayer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x04b2ba6c) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x04b2ba6c;
	} else {
		return inClassId==(int)0x6b7893fa;
	}
}

 ::openfl::_legacy::utils::ByteArray TiledTileLayer_obj::getByteArrayData(){
            	HX_STACKFRAME(&_hx_pos_6e8a9623e9d30997_44_getByteArrayData)
HXLINE(  45)		 ::openfl::_legacy::utils::ByteArray result = null();
HXLINE(  47)		if ((this->get_encoding() == HX_("base64",8f,fd,27,55))) {
HXLINE(  49)			::String chunk = this->xmlData->get_innerData();
HXLINE(  50)			bool compressed = false;
HXLINE(  52)			result = this->base64ToByteArray(chunk);
HXLINE(  53)			result->set_endian(::openfl::utils::_Endian::Endian_Impl__obj::toString((int)1));
HXLINE(  55)			if (this->xmlData->has->resolve(HX_("compression",66,b7,2b,77))) {
HXLINE(  57)				::String _g = this->xmlData->att->resolve(HX_("compression",66,b7,2b,77));
HXDLIN(  57)				if ((_g == HX_("zlib",0b,57,f6,50))) {
HXLINE(  60)					compressed = true;
            				}
            				else {
HXLINE(  62)					HX_STACK_DO_THROW(HX_("TiledLayer - data compression type not supported!",ce,90,21,a6));
            				}
            			}
HXLINE(  66)			if (compressed) {
HXLINE(  71)				result->uncompress(null());
            			}
            		}
            		else {
HXLINE(  77)			HX_STACK_DO_THROW(HX_("Must use base64 encoding in order to get tileArray data.",41,92,e6,4d));
            		}
HXLINE(  80)		result->set_endian(::openfl::utils::_Endian::Endian_Impl__obj::toString((int)1));
HXLINE(  81)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TiledTileLayer_obj,getByteArrayData,return )

 ::openfl::_legacy::utils::ByteArray TiledTileLayer_obj::base64ToByteArray(::String data){
            	HX_GC_STACKFRAME(&_hx_pos_6e8a9623e9d30997_85_base64ToByteArray)
HXLINE(  86)		 ::openfl::_legacy::utils::ByteArray output =  ::openfl::_legacy::utils::ByteArray_obj::__alloc( HX_CTX ,null());
HXLINE(  89)		::Array< int > lookup = ::Array_obj< int >::__new();
HXLINE(  91)		{
HXLINE(  91)			int _g1 = (int)0;
HXDLIN(  91)			int _g = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",da,a1,d5,a3).length;
HXDLIN(  91)			while((_g1 < _g)){
HXLINE(  91)				_g1 = (_g1 + (int)1);
HXDLIN(  91)				int c = (_g1 - (int)1);
HXLINE(  93)				lookup[HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",da,a1,d5,a3).charCodeAt(c)] = c;
            			}
            		}
HXLINE(  96)		int i = (int)0;
HXLINE(  97)		while((i < (data.length - (int)3))){
HXLINE( 100)			bool _hx_tmp;
HXDLIN( 100)			bool _hx_tmp1;
HXDLIN( 100)			if ((data.charAt(i) != HX_(" ",20,00,00,00))) {
HXLINE( 100)				_hx_tmp1 = (data.charAt(i) == HX_("\n",0a,00,00,00));
            			}
            			else {
HXLINE( 100)				_hx_tmp1 = true;
            			}
HXDLIN( 100)			if (!(_hx_tmp1)) {
HXLINE( 100)				_hx_tmp = (data.charAt(i) == HX_("\r",0d,00,00,00));
            			}
            			else {
HXLINE( 100)				_hx_tmp = true;
            			}
HXDLIN( 100)			if (_hx_tmp) {
HXLINE( 102)				i = (i + (int)1);
HXDLIN( 102)				continue;
            			}
HXLINE( 106)			int a0 = lookup->__get(data.charCodeAt(i));
HXLINE( 107)			int a1 = lookup->__get(data.charCodeAt((i + (int)1)));
HXLINE( 108)			int a2 = lookup->__get(data.charCodeAt((i + (int)2)));
HXLINE( 109)			int a3 = lookup->__get(data.charCodeAt((i + (int)3)));
HXLINE( 112)			if ((a1 < (int)64)) {
HXLINE( 114)				output->ensureElem(output->position,true);
HXDLIN( 114)				::Array< unsigned char > output1 = output->b;
HXDLIN( 114)				int _hx_tmp2 = output->position++;
HXDLIN( 114)				output1[_hx_tmp2] = (((int)a0 << (int)(int)2) + ((int)((int)a1 & (int)(int)48) >> (int)(int)4));
            			}
HXLINE( 116)			if ((a2 < (int)64)) {
HXLINE( 118)				output->ensureElem(output->position,true);
HXDLIN( 118)				::Array< unsigned char > output2 = output->b;
HXDLIN( 118)				int _hx_tmp3 = output->position++;
HXDLIN( 118)				output2[_hx_tmp3] = (((int)((int)a1 & (int)(int)15) << (int)(int)4) + ((int)((int)a2 & (int)(int)60) >> (int)(int)2));
            			}
HXLINE( 120)			if ((a3 < (int)64)) {
HXLINE( 122)				output->ensureElem(output->position,true);
HXDLIN( 122)				::Array< unsigned char > output3 = output->b;
HXDLIN( 122)				int _hx_tmp4 = output->position++;
HXDLIN( 122)				output3[_hx_tmp4] = (((int)((int)a2 & (int)(int)3) << (int)(int)6) + a3);
            			}
HXLINE( 125)			i = (i + (int)4);
            		}
HXLINE( 129)		output->position = (int)0;
HXLINE( 131)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileLayer_obj,base64ToByteArray,return )

int TiledTileLayer_obj::resolveTile(int globalTileId){
            	HX_GC_STACKFRAME(&_hx_pos_6e8a9623e9d30997_135_resolveTile)
HXLINE( 136)		 ::flixel::addons::editors::tiled::TiledTile tile =  ::flixel::addons::editors::tiled::TiledTile_obj::__alloc( HX_CTX ,globalTileId);
HXLINE( 138)		int tilesetID = tile->tilesetID;
HXLINE( 139)		{
HXLINE( 139)			 ::Dynamic tileset = this->map->tilesets->iterator();
HXDLIN( 139)			while(( (bool)(tileset->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 139)				 ::flixel::addons::editors::tiled::TiledTileSet tileset1 = ( ( ::flixel::addons::editors::tiled::TiledTileSet)(tileset->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 141)				bool _hx_tmp;
HXDLIN( 141)				if ((tilesetID >= tileset1->firstGID)) {
HXLINE( 141)					_hx_tmp = (tilesetID < (tileset1->firstGID + tileset1->numTiles));
            				}
            				else {
HXLINE( 141)					_hx_tmp = false;
            				}
HXDLIN( 141)				if (_hx_tmp) {
HXLINE( 143)					this->tiles->push(tile);
HXLINE( 144)					return tilesetID;
            				}
            			}
            		}
HXLINE( 147)		this->tiles->push(null());
HXLINE( 148)		return (int)0;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileLayer_obj,resolveTile,return )

::String TiledTileLayer_obj::get_encoding(){
            	HX_STACKFRAME(&_hx_pos_6e8a9623e9d30997_153_get_encoding)
HXDLIN( 153)		if (hx::IsNotNull( this->encoding )) {
HXDLIN( 153)			return this->encoding;
            		}
            		else {
HXDLIN( 153)			return this->xmlData->att->resolve(HX_("encoding",d3,8c,58,30));
            		}
HXDLIN( 153)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(TiledTileLayer_obj,get_encoding,return )

::String TiledTileLayer_obj::get_csvData(){
            	HX_STACKFRAME(&_hx_pos_6e8a9623e9d30997_157_get_csvData)
HXLINE( 158)		if (hx::IsNull( this->csvData )) {
HXLINE( 160)			if ((this->xmlData->att->resolve(HX_("encoding",d3,8c,58,30)) == HX_("csv",c6,83,4b,00))) {
HXLINE( 162)				this->csvData = ::StringTools_obj::ltrim(this->xmlData->get_innerData());
            			}
            			else {
HXLINE( 166)				HX_STACK_DO_THROW(HX_("Must use CSV encoding in order to get CSV data.",05,1a,fa,a5));
            			}
            		}
HXLINE( 169)		return this->csvData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TiledTileLayer_obj,get_csvData,return )

::Array< int > TiledTileLayer_obj::get_tileArray(){
            	HX_STACKFRAME(&_hx_pos_6e8a9623e9d30997_173_get_tileArray)
HXLINE( 174)		if (hx::IsNull( this->tileArray )) {
HXLINE( 176)			this->tileArray = ::Array_obj< int >::__new();
HXLINE( 178)			if ((this->get_encoding() == HX_("csv",c6,83,4b,00))) {
HXLINE( 180)				::String endline;
HXDLIN( 180)				if ((this->get_csvData().indexOf(HX_("\r\n",5d,0b,00,00),null()) != (int)-1)) {
HXLINE( 180)					endline = HX_("\r\n",5d,0b,00,00);
            				}
            				else {
HXLINE( 180)					endline = HX_("\n",0a,00,00,00);
            				}
HXLINE( 181)				::Array< ::String > rows = this->get_csvData().split(endline);
HXLINE( 183)				{
HXLINE( 183)					int _g = (int)0;
HXDLIN( 183)					while((_g < rows->length)){
HXLINE( 183)						::String row = rows->__get(_g);
HXDLIN( 183)						_g = (_g + (int)1);
HXLINE( 185)						::Array< ::String > cells = row.split(HX_(",",2c,00,00,00));
HXLINE( 186)						{
HXLINE( 186)							int _g1 = (int)0;
HXDLIN( 186)							while((_g1 < cells->length)){
HXLINE( 186)								::String cell = cells->__get(_g1);
HXDLIN( 186)								_g1 = (_g1 + (int)1);
HXLINE( 188)								if ((cell != HX_("",00,00,00,00))) {
HXLINE( 190)									::Array< int > _hx_tmp = this->tileArray;
HXDLIN( 190)									_hx_tmp->push(::Std_obj::parseInt(cell));
            								}
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE( 197)				 ::openfl::_legacy::utils::ByteArray mapData = this->getByteArrayData();
HXLINE( 199)				if (hx::IsNull( mapData )) {
HXLINE( 201)					HX_STACK_DO_THROW(HX_("Must use Base64 encoding (with or without zlip compression) in order to get 1D Array.",13,2f,11,cb));
            				}
HXLINE( 204)				while(true){
HXLINE( 204)					int _hx_tmp1 = ::Std_obj::_hx_int(mapData->position);
HXDLIN( 204)					if (!((_hx_tmp1 < ::Std_obj::_hx_int(mapData->length)))) {
HXLINE( 204)						goto _hx_goto_11;
            					}
HXLINE( 206)					::Array< int > _hx_tmp2 = this->tileArray;
HXDLIN( 206)					_hx_tmp2->push(this->resolveTile(mapData->readUnsignedInt()));
            				}
            				_hx_goto_11:;
            			}
            		}
HXLINE( 211)		return this->tileArray;
            	}


HX_DEFINE_DYNAMIC_FUNC0(TiledTileLayer_obj,get_tileArray,return )

::String TiledTileLayer_obj::BASE64_CHARS;


hx::ObjectPtr< TiledTileLayer_obj > TiledTileLayer_obj::__new( ::haxe::xml::Fast source, ::flixel::addons::editors::tiled::TiledMap parent) {
	hx::ObjectPtr< TiledTileLayer_obj > __this = new TiledTileLayer_obj();
	__this->__construct(source,parent);
	return __this;
}

hx::ObjectPtr< TiledTileLayer_obj > TiledTileLayer_obj::__alloc(hx::Ctx *_hx_ctx, ::haxe::xml::Fast source, ::flixel::addons::editors::tiled::TiledMap parent) {
	TiledTileLayer_obj *__this = (TiledTileLayer_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TiledTileLayer_obj), true, "flixel.addons.editors.tiled.TiledTileLayer"));
	*(void **)__this = TiledTileLayer_obj::_hx_vtable;
	__this->__construct(source,parent);
	return __this;
}

TiledTileLayer_obj::TiledTileLayer_obj()
{
}

void TiledTileLayer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TiledTileLayer);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(tiles,"tiles");
	HX_MARK_MEMBER_NAME(encoding,"encoding");
	HX_MARK_MEMBER_NAME(csvData,"csvData");
	HX_MARK_MEMBER_NAME(tileArray,"tileArray");
	HX_MARK_MEMBER_NAME(xmlData,"xmlData");
	 ::flixel::addons::editors::tiled::TiledLayer_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void TiledTileLayer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(tiles,"tiles");
	HX_VISIT_MEMBER_NAME(encoding,"encoding");
	HX_VISIT_MEMBER_NAME(csvData,"csvData");
	HX_VISIT_MEMBER_NAME(tileArray,"tileArray");
	HX_VISIT_MEMBER_NAME(xmlData,"xmlData");
	 ::flixel::addons::editors::tiled::TiledLayer_obj::__Visit(HX_VISIT_ARG);
}

hx::Val TiledTileLayer_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"tiles") ) { return hx::Val( tiles ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"csvData") ) { return hx::Val( inCallProp == hx::paccAlways ? get_csvData() : csvData ); }
		if (HX_FIELD_EQ(inName,"xmlData") ) { return hx::Val( xmlData ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"encoding") ) { return hx::Val( inCallProp == hx::paccAlways ? get_encoding() : encoding ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileArray") ) { return hx::Val( inCallProp == hx::paccAlways ? get_tileArray() : tileArray ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"resolveTile") ) { return hx::Val( resolveTile_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_csvData") ) { return hx::Val( get_csvData_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_encoding") ) { return hx::Val( get_encoding_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"get_tileArray") ) { return hx::Val( get_tileArray_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getByteArrayData") ) { return hx::Val( getByteArrayData_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"base64ToByteArray") ) { return hx::Val( base64ToByteArray_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TiledTileLayer_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tiles") ) { tiles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"csvData") ) { csvData=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xmlData") ) { xmlData=inValue.Cast<  ::haxe::xml::Fast >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"encoding") ) { encoding=inValue.Cast< ::String >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileArray") ) { tileArray=inValue.Cast< ::Array< int > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TiledTileLayer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("x","\x78","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("y","\x79","\x00","\x00","\x00"));
	outFields->push(HX_HCSTRING("width","\x06","\xb6","\x62","\xca"));
	outFields->push(HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"));
	outFields->push(HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10"));
	outFields->push(HX_HCSTRING("encoding","\xd3","\x8c","\x58","\x30"));
	outFields->push(HX_HCSTRING("csvData","\x10","\x61","\x5c","\x2e"));
	outFields->push(HX_HCSTRING("tileArray","\x8b","\xcb","\xea","\xb0"));
	outFields->push(HX_HCSTRING("xmlData","\xa1","\x27","\x79","\x6f"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TiledTileLayer_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TiledTileLayer_obj,x),HX_HCSTRING("x","\x78","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(TiledTileLayer_obj,y),HX_HCSTRING("y","\x79","\x00","\x00","\x00")},
	{hx::fsInt,(int)offsetof(TiledTileLayer_obj,width),HX_HCSTRING("width","\x06","\xb6","\x62","\xca")},
	{hx::fsInt,(int)offsetof(TiledTileLayer_obj,height),HX_HCSTRING("height","\xe7","\x07","\x4c","\x02")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TiledTileLayer_obj,tiles),HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10")},
	{hx::fsString,(int)offsetof(TiledTileLayer_obj,encoding),HX_HCSTRING("encoding","\xd3","\x8c","\x58","\x30")},
	{hx::fsString,(int)offsetof(TiledTileLayer_obj,csvData),HX_HCSTRING("csvData","\x10","\x61","\x5c","\x2e")},
	{hx::fsObject /*Array< int >*/ ,(int)offsetof(TiledTileLayer_obj,tileArray),HX_HCSTRING("tileArray","\x8b","\xcb","\xea","\xb0")},
	{hx::fsObject /*::haxe::xml::Fast*/ ,(int)offsetof(TiledTileLayer_obj,xmlData),HX_HCSTRING("xmlData","\xa1","\x27","\x79","\x6f")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo TiledTileLayer_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &TiledTileLayer_obj::BASE64_CHARS,HX_HCSTRING("BASE64_CHARS","\xcd","\xf6","\x92","\x21")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String TiledTileLayer_obj_sMemberFields[] = {
	HX_HCSTRING("x","\x78","\x00","\x00","\x00"),
	HX_HCSTRING("y","\x79","\x00","\x00","\x00"),
	HX_HCSTRING("width","\x06","\xb6","\x62","\xca"),
	HX_HCSTRING("height","\xe7","\x07","\x4c","\x02"),
	HX_HCSTRING("tiles","\x85","\xfd","\x34","\x10"),
	HX_HCSTRING("encoding","\xd3","\x8c","\x58","\x30"),
	HX_HCSTRING("csvData","\x10","\x61","\x5c","\x2e"),
	HX_HCSTRING("tileArray","\x8b","\xcb","\xea","\xb0"),
	HX_HCSTRING("xmlData","\xa1","\x27","\x79","\x6f"),
	HX_HCSTRING("getByteArrayData","\xc5","\x79","\x1d","\xa1"),
	HX_HCSTRING("base64ToByteArray","\x27","\xab","\x59","\x6e"),
	HX_HCSTRING("resolveTile","\x3a","\xf0","\x37","\xe8"),
	HX_HCSTRING("get_encoding","\xdc","\x40","\x72","\xe5"),
	HX_HCSTRING("get_csvData","\x27","\xc1","\x56","\xb4"),
	HX_HCSTRING("get_tileArray","\x62","\x9f","\x4e","\x72"),
	::String(null()) };

static void TiledTileLayer_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TiledTileLayer_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(TiledTileLayer_obj::BASE64_CHARS,"BASE64_CHARS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TiledTileLayer_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TiledTileLayer_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(TiledTileLayer_obj::BASE64_CHARS,"BASE64_CHARS");
};

#endif

hx::Class TiledTileLayer_obj::__mClass;

static ::String TiledTileLayer_obj_sStaticFields[] = {
	HX_HCSTRING("BASE64_CHARS","\xcd","\xf6","\x92","\x21"),
	::String(null())
};

void TiledTileLayer_obj::__register()
{
	hx::Object *dummy = new TiledTileLayer_obj;
	TiledTileLayer_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.editors.tiled.TiledTileLayer","\x16","\xd0","\x9b","\x86");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TiledTileLayer_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(TiledTileLayer_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TiledTileLayer_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TiledTileLayer_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TiledTileLayer_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TiledTileLayer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TiledTileLayer_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void TiledTileLayer_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6e8a9623e9d30997_22_boot)
HXDLIN(  22)		BASE64_CHARS = HX_("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",da,a1,d5,a3);
            	}
}

} // end namespace flixel
} // end namespace addons
} // end namespace editors
} // end namespace tiled
