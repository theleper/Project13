// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledImageTile
#include <flixel/addons/editors/tiled/TiledImageTile.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledPropertySet
#include <flixel/addons/editors/tiled/TiledPropertySet.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTilePropertySet
#include <flixel/addons/editors/tiled/TiledTilePropertySet.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_tiled_TiledTileSet
#include <flixel/addons/editors/tiled/TiledTileSet.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_xml_Fast
#include <haxe/xml/Fast.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_AttribAccess
#include <haxe/xml/_Fast/AttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasAttribAccess
#include <haxe/xml/_Fast/HasAttribAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_HasNodeAccess
#include <haxe/xml/_Fast/HasNodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeAccess
#include <haxe/xml/_Fast/NodeAccess.h>
#endif
#ifndef INCLUDED_haxe_xml__Fast_NodeListAccess
#include <haxe/xml/_Fast/NodeListAccess.h>
#endif
#ifndef INCLUDED_openfl__legacy_AssetType
#include <openfl/_legacy/AssetType.h>
#endif
#ifndef INCLUDED_openfl__legacy_Assets
#include <openfl/_legacy/Assets.h>
#endif
#ifndef INCLUDED_openfl__legacy_geom_Rectangle
#include <openfl/_legacy/geom/Rectangle.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_ByteArray
#include <openfl/_legacy/utils/ByteArray.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataInput
#include <openfl/_legacy/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IDataOutput
#include <openfl/_legacy/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl__legacy_utils_IMemoryRange
#include <openfl/_legacy/utils/IMemoryRange.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c73e981696bb0370_36_new,"flixel.addons.editors.tiled.TiledTileSet","new",0xf865df19,"flixel.addons.editors.tiled.TiledTileSet.new","flixel/addons/editors/tiled/TiledTileSet.hx",36,0x504d33d5)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e981696bb0370_175_hasGid,"flixel.addons.editors.tiled.TiledTileSet","hasGid",0x55a8bbaf,"flixel.addons.editors.tiled.TiledTileSet.hasGid","flixel/addons/editors/tiled/TiledTileSet.hx",175,0x504d33d5)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e981696bb0370_180_fromGid,"flixel.addons.editors.tiled.TiledTileSet","fromGid",0xe24bb3f1,"flixel.addons.editors.tiled.TiledTileSet.fromGid","flixel/addons/editors/tiled/TiledTileSet.hx",180,0x504d33d5)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e981696bb0370_185_toGid,"flixel.addons.editors.tiled.TiledTileSet","toGid",0xbfce2440,"flixel.addons.editors.tiled.TiledTileSet.toGid","flixel/addons/editors/tiled/TiledTileSet.hx",185,0x504d33d5)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e981696bb0370_189_getPropertiesByGid,"flixel.addons.editors.tiled.TiledTileSet","getPropertiesByGid",0x4c2032e9,"flixel.addons.editors.tiled.TiledTileSet.getPropertiesByGid","flixel/addons/editors/tiled/TiledTileSet.hx",189,0x504d33d5)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e981696bb0370_200_getProperties,"flixel.addons.editors.tiled.TiledTileSet","getProperties",0x8aac6822,"flixel.addons.editors.tiled.TiledTileSet.getProperties","flixel/addons/editors/tiled/TiledTileSet.hx",200,0x504d33d5)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e981696bb0370_204_getImageSourceByGid,"flixel.addons.editors.tiled.TiledTileSet","getImageSourceByGid",0x251eb564,"flixel.addons.editors.tiled.TiledTileSet.getImageSourceByGid","flixel/addons/editors/tiled/TiledTileSet.hx",204,0x504d33d5)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e981696bb0370_215_getImageSource,"flixel.addons.editors.tiled.TiledTileSet","getImageSource",0xba92f787,"flixel.addons.editors.tiled.TiledTileSet.getImageSource","flixel/addons/editors/tiled/TiledTileSet.hx",215,0x504d33d5)
HX_LOCAL_STACK_FRAME(_hx_pos_c73e981696bb0370_221_getRect,"flixel.addons.editors.tiled.TiledTileSet","getRect",0xa87c5c13,"flixel.addons.editors.tiled.TiledTileSet.getRect","flixel/addons/editors/tiled/TiledTileSet.hx",221,0x504d33d5)
namespace flixel{
namespace addons{
namespace editors{
namespace tiled{

void TiledTileSet_obj::__construct( ::Dynamic data,::String __o_rootPath){
::String rootPath = __o_rootPath.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_GC_STACKFRAME(&_hx_pos_c73e981696bb0370_36_new)
HXLINE(  37)		 ::haxe::xml::Fast source;
HXLINE(  38)		this->numTiles = (int)16777215;
HXLINE(  39)		this->numRows = (this->numCols = (int)1);
HXLINE(  42)		if (::Std_obj::is(data,hx::ClassOf< ::haxe::xml::Fast >())) {
HXLINE(  44)			source = ( ( ::haxe::xml::Fast)(data) );
            		}
            		else {
HXLINE(  46)			if (::Std_obj::is(data,hx::ClassOf< ::openfl::_legacy::utils::ByteArray >())) {
HXLINE(  48)				 ::openfl::_legacy::utils::ByteArray bytes = ( ( ::openfl::_legacy::utils::ByteArray)(data) );
HXLINE(  49)				source =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,::Xml_obj::parse(bytes->toString()));
HXLINE(  50)				source = source->node->resolve(HX_("tileset",34,81,93,45));
            			}
            			else {
HXLINE(  54)				HX_STACK_DO_THROW(HX_("Unknown TMX tileset format",da,21,2b,65));
            			}
            		}
HXLINE(  57)		int _hx_tmp;
HXDLIN(  57)		if (source->has->resolve(HX_("firstgid",d2,49,26,f1))) {
HXLINE(  57)			_hx_tmp = ::Std_obj::parseInt(source->att->resolve(HX_("firstgid",d2,49,26,f1)));
            		}
            		else {
HXLINE(  57)			_hx_tmp = (int)1;
            		}
HXDLIN(  57)		this->firstGID = _hx_tmp;
HXLINE(  59)		if (source->has->resolve(HX_("source",db,b0,31,32))) {
HXLINE(  61)			::String sourcePath = (rootPath + source->att->resolve(HX_("source",db,b0,31,32)));
HXLINE(  62)			if (::openfl::_legacy::Assets_obj::exists(sourcePath,null())) {
HXLINE(  64)				source =  ::haxe::xml::Fast_obj::__alloc( HX_CTX ,::Xml_obj::parse(::openfl::_legacy::Assets_obj::getText(sourcePath)));
HXLINE(  65)				source = source->node->resolve(HX_("tileset",34,81,93,45));
            			}
            		}
HXLINE(  69)		if (!(source->has->resolve(HX_("source",db,b0,31,32)))) {
HXLINE(  71)			 ::haxe::xml::Fast node;
HXLINE(  73)			if (source->hasNode->resolve(HX_("image",5b,1f,69,bd))) {
HXLINE(  76)				node = source->node->resolve(HX_("image",5b,1f,69,bd));
HXLINE(  77)				this->imageSource = node->att->resolve(HX_("source",db,b0,31,32));
            			}
            			else {
HXLINE(  82)				node = source->node->resolve(HX_("tile",2e,cb,fc,4c));
HXLINE(  83)				this->imageSource = HX_("",00,00,00,00);
HXLINE(  86)				this->tileImagesSources = ::Array_obj< ::Dynamic>::__new();
HXLINE(  88)				{
HXLINE(  88)					 ::_List::ListNode _g_head = source->nodes->resolve(HX_("tile",2e,cb,fc,4c))->h;
HXDLIN(  88)					while(hx::IsNotNull( _g_head )){
HXLINE(  88)						 ::haxe::xml::Fast val = ( ( ::haxe::xml::Fast)(_g_head->item) );
HXDLIN(  88)						_g_head = _g_head->next;
HXDLIN(  88)						 ::haxe::xml::Fast node1 = val;
HXLINE(  90)						if (!(node1->has->resolve(HX_("id",db,5b,00,00)))) {
HXLINE(  92)							continue;
            						}
HXLINE(  95)						int id = ::Std_obj::parseInt(node1->att->resolve(HX_("id",db,5b,00,00)));
HXLINE(  96)						::Array< ::Dynamic> _hx_tmp1 = this->tileImagesSources;
HXDLIN(  96)						_hx_tmp1[id] =  ::flixel::addons::editors::tiled::TiledImageTile_obj::__alloc( HX_CTX ,node1);
            					}
            				}
            			}
HXLINE( 100)			this->name = source->att->resolve(HX_("name",4b,72,ff,48));
HXLINE( 102)			int imgWidth = (int)0;
HXLINE( 103)			if (node->has->resolve(HX_("width",06,b6,62,ca))) {
HXLINE( 105)				imgWidth = ::Std_obj::parseInt(node->att->resolve(HX_("width",06,b6,62,ca)));
            			}
HXLINE( 107)			int imgHeight = (int)0;
HXLINE( 108)			if (node->has->resolve(HX_("height",e7,07,4c,02))) {
HXLINE( 110)				imgHeight = ::Std_obj::parseInt(node->att->resolve(HX_("height",e7,07,4c,02)));
            			}
HXLINE( 113)			if (source->has->resolve(HX_("tilewidth",18,a4,90,c2))) {
HXLINE( 115)				this->tileWidth = ::Std_obj::parseInt(source->att->resolve(HX_("tilewidth",18,a4,90,c2)));
            			}
HXLINE( 117)			if (source->has->resolve(HX_("tileheight",95,69,4e,32))) {
HXLINE( 119)				this->tileHeight = ::Std_obj::parseInt(source->att->resolve(HX_("tileheight",95,69,4e,32)));
            			}
HXLINE( 121)			if (source->has->resolve(HX_("spacing",83,33,bb,91))) {
HXLINE( 123)				this->spacing = ::Std_obj::parseInt(source->att->resolve(HX_("spacing",83,33,bb,91)));
            			}
HXLINE( 125)			if (source->has->resolve(HX_("margin",2e,70,6d,ba))) {
HXLINE( 127)				this->margin = ::Std_obj::parseInt(source->att->resolve(HX_("margin",2e,70,6d,ba)));
            			}
HXLINE( 131)			this->properties =  ::flixel::addons::editors::tiled::TiledPropertySet_obj::__alloc( HX_CTX );
HXLINE( 132)			{
HXLINE( 132)				 ::_List::ListNode _g_head1 = source->nodes->resolve(HX_("properties",f3,fb,0e,61))->h;
HXDLIN( 132)				while(hx::IsNotNull( _g_head1 )){
HXLINE( 132)					 ::haxe::xml::Fast val1 = ( ( ::haxe::xml::Fast)(_g_head1->item) );
HXDLIN( 132)					_g_head1 = _g_head1->next;
HXDLIN( 132)					 ::haxe::xml::Fast prop = val1;
HXLINE( 133)					this->properties->extend(prop);
            				}
            			}
HXLINE( 136)			this->tileProps = ::Array_obj< ::Dynamic>::__new();
HXLINE( 138)			{
HXLINE( 138)				 ::_List::ListNode _g_head2 = source->nodes->resolve(HX_("tile",2e,cb,fc,4c))->h;
HXDLIN( 138)				while(hx::IsNotNull( _g_head2 )){
HXLINE( 138)					 ::haxe::xml::Fast val2 = ( ( ::haxe::xml::Fast)(_g_head2->item) );
HXDLIN( 138)					_g_head2 = _g_head2->next;
HXDLIN( 138)					 ::haxe::xml::Fast node2 = val2;
HXLINE( 140)					if (!(node2->has->resolve(HX_("id",db,5b,00,00)))) {
HXLINE( 142)						continue;
            					}
HXLINE( 145)					int id1 = ::Std_obj::parseInt(node2->att->resolve(HX_("id",db,5b,00,00)));
HXLINE( 146)					::Array< ::Dynamic> _hx_tmp2 = this->tileProps;
HXDLIN( 146)					_hx_tmp2[id1] =  ::flixel::addons::editors::tiled::TiledTilePropertySet_obj::__alloc( HX_CTX ,id1);
HXLINE( 147)					{
HXLINE( 147)						::Dynamic this1 = this->tileProps->__get(id1).StaticCast<  ::flixel::addons::editors::tiled::TiledTilePropertySet >()->keys;
HXDLIN( 147)						( ( ::haxe::ds::StringMap)(this1) )->set(HX_("id",db,5b,00,00),::Std_obj::string(id1));
            					}
HXLINE( 148)					{
HXLINE( 148)						 ::_List::ListNode _g_head3 = node2->nodes->resolve(HX_("properties",f3,fb,0e,61))->h;
HXDLIN( 148)						while(hx::IsNotNull( _g_head3 )){
HXLINE( 148)							 ::haxe::xml::Fast val3 = ( ( ::haxe::xml::Fast)(_g_head3->item) );
HXDLIN( 148)							_g_head3 = _g_head3->next;
HXDLIN( 148)							 ::haxe::xml::Fast prop1 = val3;
HXLINE( 150)							this->tileProps->__get(id1).StaticCast<  ::flixel::addons::editors::tiled::TiledTilePropertySet >()->extend(prop1);
            						}
            					}
HXLINE( 152)					if (node2->hasNode->resolve(HX_("animation",04,ef,34,4b))) {
HXLINE( 154)						 ::_List::ListNode _g_head4 = node2->node->resolve(HX_("animation",04,ef,34,4b))->nodes->resolve(HX_("frame",2d,78,83,06))->h;
HXDLIN( 154)						while(hx::IsNotNull( _g_head4 )){
HXLINE( 154)							 ::haxe::xml::Fast val4 = ( ( ::haxe::xml::Fast)(_g_head4->item) );
HXDLIN( 154)							_g_head4 = _g_head4->next;
HXDLIN( 154)							 ::haxe::xml::Fast frame = val4;
HXLINE( 156)							 ::flixel::addons::editors::tiled::TiledTilePropertySet _hx_tmp3 = this->tileProps->__get(id1).StaticCast<  ::flixel::addons::editors::tiled::TiledTilePropertySet >();
HXLINE( 157)							 ::Dynamic _hx_tmp4 = ::Std_obj::parseInt(frame->att->resolve(HX_("tileid",89,ce,28,1e)));
HXLINE( 156)							_hx_tmp3->addAnimationFrame(_hx_tmp4,::Std_obj::parseFloat(frame->att->resolve(HX_("duration",54,0f,8e,14))));
            						}
            					}
            				}
            			}
HXLINE( 164)			bool _hx_tmp5;
HXDLIN( 164)			if ((this->tileWidth > (int)0)) {
HXLINE( 164)				_hx_tmp5 = (this->tileHeight > (int)0);
            			}
            			else {
HXLINE( 164)				_hx_tmp5 = false;
            			}
HXDLIN( 164)			if (_hx_tmp5) {
HXLINE( 166)				this->numRows = ::Std_obj::_hx_int(((Float)imgWidth / (Float)this->tileWidth));
HXLINE( 167)				this->numCols = ::Std_obj::_hx_int(((Float)imgHeight / (Float)this->tileHeight));
HXLINE( 168)				this->numTiles = (this->numRows * this->numCols);
            			}
            		}
            	}

Dynamic TiledTileSet_obj::__CreateEmpty() { return new TiledTileSet_obj; }

void *TiledTileSet_obj::_hx_vtable = 0;

Dynamic TiledTileSet_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< TiledTileSet_obj > _hx_result = new TiledTileSet_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool TiledTileSet_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1f0ffde1;
}

bool TiledTileSet_obj::hasGid(int Gid){
            	HX_STACKFRAME(&_hx_pos_c73e981696bb0370_175_hasGid)
HXDLIN( 175)		if ((Gid >= this->firstGID)) {
HXDLIN( 175)			return (Gid < (this->firstGID + this->numTiles));
            		}
            		else {
HXDLIN( 175)			return false;
            		}
HXDLIN( 175)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileSet_obj,hasGid,return )

int TiledTileSet_obj::fromGid(int Gid){
            	HX_STACKFRAME(&_hx_pos_c73e981696bb0370_180_fromGid)
HXDLIN( 180)		return (Gid - (this->firstGID - (int)1));
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileSet_obj,fromGid,return )

int TiledTileSet_obj::toGid(int ID){
            	HX_STACKFRAME(&_hx_pos_c73e981696bb0370_185_toGid)
HXDLIN( 185)		return (this->firstGID + ID);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileSet_obj,toGid,return )

 ::flixel::addons::editors::tiled::TiledPropertySet TiledTileSet_obj::getPropertiesByGid(int Gid){
            	HX_STACKFRAME(&_hx_pos_c73e981696bb0370_189_getPropertiesByGid)
HXLINE( 190)		if (hx::IsNotNull( this->tileProps )) {
HXLINE( 192)			::Array< ::Dynamic> _hx_tmp = this->tileProps;
HXDLIN( 192)			return _hx_tmp->__get((Gid - this->firstGID)).StaticCast<  ::flixel::addons::editors::tiled::TiledTilePropertySet >();
            		}
HXLINE( 195)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileSet_obj,getPropertiesByGid,return )

 ::flixel::addons::editors::tiled::TiledPropertySet TiledTileSet_obj::getProperties(int ID){
            	HX_STACKFRAME(&_hx_pos_c73e981696bb0370_200_getProperties)
HXDLIN( 200)		return this->tileProps->__get(ID).StaticCast<  ::flixel::addons::editors::tiled::TiledTilePropertySet >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileSet_obj,getProperties,return )

 ::flixel::addons::editors::tiled::TiledImageTile TiledTileSet_obj::getImageSourceByGid(int Gid){
            	HX_STACKFRAME(&_hx_pos_c73e981696bb0370_204_getImageSourceByGid)
HXLINE( 205)		if (hx::IsNotNull( this->tileImagesSources )) {
HXLINE( 207)			::Array< ::Dynamic> _hx_tmp = this->tileImagesSources;
HXDLIN( 207)			return _hx_tmp->__get((Gid - this->firstGID)).StaticCast<  ::flixel::addons::editors::tiled::TiledImageTile >();
            		}
HXLINE( 210)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileSet_obj,getImageSourceByGid,return )

 ::flixel::addons::editors::tiled::TiledImageTile TiledTileSet_obj::getImageSource(int ID){
            	HX_STACKFRAME(&_hx_pos_c73e981696bb0370_215_getImageSource)
HXDLIN( 215)		return this->tileImagesSources->__get(ID).StaticCast<  ::flixel::addons::editors::tiled::TiledImageTile >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileSet_obj,getImageSource,return )

 ::openfl::_legacy::geom::Rectangle TiledTileSet_obj::getRect(int ID){
            	HX_GC_STACKFRAME(&_hx_pos_c73e981696bb0370_221_getRect)
HXDLIN( 221)		int _hx_tmp = (hx::Mod(ID,this->numCols) * this->tileWidth);
HXDLIN( 221)		return  ::openfl::_legacy::geom::Rectangle_obj::__alloc( HX_CTX ,_hx_tmp,(((Float)ID / (Float)this->numCols) * this->tileHeight),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(TiledTileSet_obj,getRect,return )


hx::ObjectPtr< TiledTileSet_obj > TiledTileSet_obj::__new( ::Dynamic data,::String __o_rootPath) {
	hx::ObjectPtr< TiledTileSet_obj > __this = new TiledTileSet_obj();
	__this->__construct(data,__o_rootPath);
	return __this;
}

hx::ObjectPtr< TiledTileSet_obj > TiledTileSet_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic data,::String __o_rootPath) {
	TiledTileSet_obj *__this = (TiledTileSet_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TiledTileSet_obj), true, "flixel.addons.editors.tiled.TiledTileSet"));
	*(void **)__this = TiledTileSet_obj::_hx_vtable;
	__this->__construct(data,__o_rootPath);
	return __this;
}

TiledTileSet_obj::TiledTileSet_obj()
{
}

void TiledTileSet_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TiledTileSet);
	HX_MARK_MEMBER_NAME(firstGID,"firstGID");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(tileWidth,"tileWidth");
	HX_MARK_MEMBER_NAME(tileHeight,"tileHeight");
	HX_MARK_MEMBER_NAME(spacing,"spacing");
	HX_MARK_MEMBER_NAME(margin,"margin");
	HX_MARK_MEMBER_NAME(imageSource,"imageSource");
	HX_MARK_MEMBER_NAME(numTiles,"numTiles");
	HX_MARK_MEMBER_NAME(numRows,"numRows");
	HX_MARK_MEMBER_NAME(numCols,"numCols");
	HX_MARK_MEMBER_NAME(properties,"properties");
	HX_MARK_MEMBER_NAME(tileProps,"tileProps");
	HX_MARK_MEMBER_NAME(tileImagesSources,"tileImagesSources");
	HX_MARK_END_CLASS();
}

void TiledTileSet_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(firstGID,"firstGID");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(tileWidth,"tileWidth");
	HX_VISIT_MEMBER_NAME(tileHeight,"tileHeight");
	HX_VISIT_MEMBER_NAME(spacing,"spacing");
	HX_VISIT_MEMBER_NAME(margin,"margin");
	HX_VISIT_MEMBER_NAME(imageSource,"imageSource");
	HX_VISIT_MEMBER_NAME(numTiles,"numTiles");
	HX_VISIT_MEMBER_NAME(numRows,"numRows");
	HX_VISIT_MEMBER_NAME(numCols,"numCols");
	HX_VISIT_MEMBER_NAME(properties,"properties");
	HX_VISIT_MEMBER_NAME(tileProps,"tileProps");
	HX_VISIT_MEMBER_NAME(tileImagesSources,"tileImagesSources");
}

hx::Val TiledTileSet_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toGid") ) { return hx::Val( toGid_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"margin") ) { return hx::Val( margin ); }
		if (HX_FIELD_EQ(inName,"hasGid") ) { return hx::Val( hasGid_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"spacing") ) { return hx::Val( spacing ); }
		if (HX_FIELD_EQ(inName,"numRows") ) { return hx::Val( numRows ); }
		if (HX_FIELD_EQ(inName,"numCols") ) { return hx::Val( numCols ); }
		if (HX_FIELD_EQ(inName,"fromGid") ) { return hx::Val( fromGid_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRect") ) { return hx::Val( getRect_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"firstGID") ) { return hx::Val( firstGID ); }
		if (HX_FIELD_EQ(inName,"numTiles") ) { return hx::Val( numTiles ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileWidth") ) { return hx::Val( tileWidth ); }
		if (HX_FIELD_EQ(inName,"tileProps") ) { return hx::Val( tileProps ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileHeight") ) { return hx::Val( tileHeight ); }
		if (HX_FIELD_EQ(inName,"properties") ) { return hx::Val( properties ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"imageSource") ) { return hx::Val( imageSource ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getProperties") ) { return hx::Val( getProperties_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getImageSource") ) { return hx::Val( getImageSource_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"tileImagesSources") ) { return hx::Val( tileImagesSources ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getPropertiesByGid") ) { return hx::Val( getPropertiesByGid_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getImageSourceByGid") ) { return hx::Val( getImageSourceByGid_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val TiledTileSet_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"margin") ) { margin=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"spacing") ) { spacing=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numRows") ) { numRows=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numCols") ) { numCols=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"firstGID") ) { firstGID=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"numTiles") ) { numTiles=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tileWidth") ) { tileWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tileProps") ) { tileProps=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"tileHeight") ) { tileHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"properties") ) { properties=inValue.Cast<  ::flixel::addons::editors::tiled::TiledPropertySet >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"imageSource") ) { imageSource=inValue.Cast< ::String >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"tileImagesSources") ) { tileImagesSources=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TiledTileSet_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("firstGID","\xb2","\xe5","\x0d","\xf1"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("tileWidth","\xf8","\x13","\xbe","\x55"));
	outFields->push(HX_HCSTRING("tileHeight","\xb5","\xdd","\xe2","\x66"));
	outFields->push(HX_HCSTRING("spacing","\x83","\x33","\xbb","\x91"));
	outFields->push(HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba"));
	outFields->push(HX_HCSTRING("imageSource","\x96","\xba","\x71","\x7a"));
	outFields->push(HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd"));
	outFields->push(HX_HCSTRING("numRows","\x7f","\x9a","\x2f","\x9f"));
	outFields->push(HX_HCSTRING("numCols","\x99","\x5d","\x45","\x95"));
	outFields->push(HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61"));
	outFields->push(HX_HCSTRING("tileProps","\x62","\x45","\xeb","\x53"));
	outFields->push(HX_HCSTRING("tileImagesSources","\x52","\x8d","\xe9","\x37"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo TiledTileSet_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(TiledTileSet_obj,firstGID),HX_HCSTRING("firstGID","\xb2","\xe5","\x0d","\xf1")},
	{hx::fsString,(int)offsetof(TiledTileSet_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsInt,(int)offsetof(TiledTileSet_obj,tileWidth),HX_HCSTRING("tileWidth","\xf8","\x13","\xbe","\x55")},
	{hx::fsInt,(int)offsetof(TiledTileSet_obj,tileHeight),HX_HCSTRING("tileHeight","\xb5","\xdd","\xe2","\x66")},
	{hx::fsInt,(int)offsetof(TiledTileSet_obj,spacing),HX_HCSTRING("spacing","\x83","\x33","\xbb","\x91")},
	{hx::fsInt,(int)offsetof(TiledTileSet_obj,margin),HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba")},
	{hx::fsString,(int)offsetof(TiledTileSet_obj,imageSource),HX_HCSTRING("imageSource","\x96","\xba","\x71","\x7a")},
	{hx::fsInt,(int)offsetof(TiledTileSet_obj,numTiles),HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd")},
	{hx::fsInt,(int)offsetof(TiledTileSet_obj,numRows),HX_HCSTRING("numRows","\x7f","\x9a","\x2f","\x9f")},
	{hx::fsInt,(int)offsetof(TiledTileSet_obj,numCols),HX_HCSTRING("numCols","\x99","\x5d","\x45","\x95")},
	{hx::fsObject /*::flixel::addons::editors::tiled::TiledPropertySet*/ ,(int)offsetof(TiledTileSet_obj,properties),HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TiledTileSet_obj,tileProps),HX_HCSTRING("tileProps","\x62","\x45","\xeb","\x53")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(TiledTileSet_obj,tileImagesSources),HX_HCSTRING("tileImagesSources","\x52","\x8d","\xe9","\x37")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *TiledTileSet_obj_sStaticStorageInfo = 0;
#endif

static ::String TiledTileSet_obj_sMemberFields[] = {
	HX_HCSTRING("firstGID","\xb2","\xe5","\x0d","\xf1"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("tileWidth","\xf8","\x13","\xbe","\x55"),
	HX_HCSTRING("tileHeight","\xb5","\xdd","\xe2","\x66"),
	HX_HCSTRING("spacing","\x83","\x33","\xbb","\x91"),
	HX_HCSTRING("margin","\x2e","\x70","\x6d","\xba"),
	HX_HCSTRING("imageSource","\x96","\xba","\x71","\x7a"),
	HX_HCSTRING("numTiles","\x5f","\x11","\x45","\xcd"),
	HX_HCSTRING("numRows","\x7f","\x9a","\x2f","\x9f"),
	HX_HCSTRING("numCols","\x99","\x5d","\x45","\x95"),
	HX_HCSTRING("properties","\xf3","\xfb","\x0e","\x61"),
	HX_HCSTRING("tileProps","\x62","\x45","\xeb","\x53"),
	HX_HCSTRING("tileImagesSources","\x52","\x8d","\xe9","\x37"),
	HX_HCSTRING("hasGid","\xc8","\x90","\x35","\xbb"),
	HX_HCSTRING("fromGid","\xb8","\x54","\xf9","\x57"),
	HX_HCSTRING("toGid","\x47","\x35","\x10","\x14"),
	HX_HCSTRING("getPropertiesByGid","\x82","\xc9","\xe4","\xcb"),
	HX_HCSTRING("getProperties","\x29","\x58","\x81","\xbd"),
	HX_HCSTRING("getImageSourceByGid","\xab","\xe4","\x5d","\x71"),
	HX_HCSTRING("getImageSource","\xa0","\x0d","\x10","\x02"),
	HX_HCSTRING("getRect","\xda","\xfc","\x29","\x1e"),
	::String(null()) };

static void TiledTileSet_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(TiledTileSet_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void TiledTileSet_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(TiledTileSet_obj::__mClass,"__mClass");
};

#endif

hx::Class TiledTileSet_obj::__mClass;

void TiledTileSet_obj::__register()
{
	hx::Object *dummy = new TiledTileSet_obj;
	TiledTileSet_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("flixel.addons.editors.tiled.TiledTileSet","\xa7","\x5e","\x38","\x0b");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = TiledTileSet_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(TiledTileSet_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< TiledTileSet_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = TiledTileSet_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TiledTileSet_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TiledTileSet_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace addons
} // end namespace editors
} // end namespace tiled
