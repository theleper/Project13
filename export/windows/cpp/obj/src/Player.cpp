// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_8_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",8,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_28_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",28,0xa27fc9dd)
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_34_Movement,"Player","Movement",0x6b5f47dc,"Player.Movement","Player.hx",34,0xa27fc9dd)

void Player_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_8_new)
HXLINE(  12)		this->speed = ((Float)50);
HXLINE(  16)		super::__construct(null(),null(),null());
HXLINE(  17)		this->makeGraphic((int)16,(int)16,(int)-65536,null(),null());
HXLINE(  18)		this->acceleration->set_y((int)1000);
HXLINE(  19)		 ::flixel::math::FlxPoint _hx_tmp = this->drag;
HXDLIN(  19)		_hx_tmp->set_x(this->drag->set_y((int)2000));
HXLINE(  20)		 ::flixel::math::FlxPoint _hx_tmp1 = this->maxVelocity;
HXDLIN(  20)		_hx_tmp1->set_x(this->maxVelocity->set_y((int)250));
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x0b6ffd77) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0b6ffd77;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x2e105115 || inClassId==(int)0x6c4d5f81;
	}
}

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_28_update)
HXLINE(  29)		this->super::update(elapsed);
HXLINE(  30)		this->Movement();
            	}


void Player_obj::Movement(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_34_Movement)
HXLINE(  35)		 ::flixel::input::keyboard::FlxKeyboard _this = ::flixel::FlxG_obj::keys;
HXDLIN(  35)		int KeyArray;
HXDLIN(  35)		::String s = HX_("LEFT",07,d0,70,32);
HXDLIN(  35)		s = s.toUpperCase();
HXDLIN(  35)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) {
HXLINE(  35)			KeyArray = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s)) );
            		}
            		else {
HXLINE(  35)			KeyArray = (int)-1;
            		}
HXDLIN(  35)		::String s1 = HX_("A",41,00,00,00);
HXDLIN(  35)		s1 = s1.toUpperCase();
HXDLIN(  35)		int KeyArray1;
HXDLIN(  35)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) {
HXLINE(  35)			KeyArray1 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s1)) );
            		}
            		else {
HXLINE(  35)			KeyArray1 = (int)-1;
            		}
HXDLIN(  35)		this->_left = _this->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray)->init(1,KeyArray1),(int)1);
HXLINE(  36)		 ::flixel::input::keyboard::FlxKeyboard _this1 = ::flixel::FlxG_obj::keys;
HXDLIN(  36)		int KeyArray2;
HXDLIN(  36)		::String s2 = HX_("RIGHT",bc,43,52,67);
HXDLIN(  36)		s2 = s2.toUpperCase();
HXDLIN(  36)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) {
HXLINE(  36)			KeyArray2 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s2)) );
            		}
            		else {
HXLINE(  36)			KeyArray2 = (int)-1;
            		}
HXDLIN(  36)		::String s3 = HX_("D",44,00,00,00);
HXDLIN(  36)		s3 = s3.toUpperCase();
HXDLIN(  36)		int KeyArray3;
HXDLIN(  36)		if (::haxe::IMap_obj::exists(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) {
HXLINE(  36)			KeyArray3 = ( (int)(::haxe::IMap_obj::get(::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap,s3)) );
            		}
            		else {
HXLINE(  36)			KeyArray3 = (int)-1;
            		}
HXDLIN(  36)		this->_right = _this1->checkKeyArrayState(::Array_obj< int >::__new(2)->init(0,KeyArray2)->init(1,KeyArray3),(int)1);
HXLINE(  38)		bool _hx_tmp;
HXDLIN(  38)		if (this->_left) {
HXLINE(  38)			_hx_tmp = this->_right;
            		}
            		else {
HXLINE(  38)			_hx_tmp = false;
            		}
HXDLIN(  38)		if (_hx_tmp) {
HXLINE(  40)			this->_left = (this->_right = false);
            		}
HXLINE(  43)		if (this->_right) {
HXLINE(  45)			 ::flixel::math::FlxPoint _g = this->velocity;
HXDLIN(  45)			_g->set_x((_g->x + this->speed));
            		}
HXLINE(  48)		if (this->_left) {
HXLINE(  50)			 ::flixel::math::FlxPoint _g1 = this->velocity;
HXDLIN(  50)			_g1->set_x((_g1->x - this->speed));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,Movement,(void))


hx::ObjectPtr< Player_obj > Player_obj::__new() {
	hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Player_obj > Player_obj::__alloc(hx::Ctx *_hx_ctx) {
	Player_obj *__this = (Player_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Player_obj::Player_obj()
{
}

hx::Val Player_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { return hx::Val( _left ); }
		if (HX_FIELD_EQ(inName,"speed") ) { return hx::Val( speed ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { return hx::Val( _right ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"Movement") ) { return hx::Val( Movement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Player_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_left") ) { _left=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_right") ) { _right=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"));
	outFields->push(HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"));
	outFields->push(HX_HCSTRING("speed","\x87","\x97","\x69","\x81"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{hx::fsBool,(int)offsetof(Player_obj,_left),HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa")},
	{hx::fsBool,(int)offsetof(Player_obj,_right),HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5")},
	{hx::fsFloat,(int)offsetof(Player_obj,speed),HX_HCSTRING("speed","\x87","\x97","\x69","\x81")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_HCSTRING("_left","\xe6","\x23","\xc1","\xfa"),
	HX_HCSTRING("_right","\x1d","\x53","\x4b","\xe5"),
	HX_HCSTRING("speed","\x87","\x97","\x69","\x81"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("Movement","\x4f","\x41","\xe9","\xd9"),
	::String(null()) };

static void Player_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Player_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Player_obj::__mClass,"__mClass");
};

#endif

hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	hx::Object *dummy = new Player_obj;
	Player_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Player","\x81","\x5f","\x4d","\x6c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Player_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Player_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Player_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

