// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Level1
#include <Level1.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmoLoader
#include <flixel/addons/editors/ogmo/FlxOgmoLoader.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_179fe9ae690126e0_12_new,"Level1","new",0x987b7dbf,"Level1.new","Level1.hx",12,0x0d4fbe91)
HX_LOCAL_STACK_FRAME(_hx_pos_179fe9ae690126e0_19_create,"Level1","create",0xcefd1efd,"Level1.create","Level1.hx",19,0x0d4fbe91)
HX_LOCAL_STACK_FRAME(_hx_pos_179fe9ae690126e0_46_update,"Level1","update",0xd9f33e0a,"Level1.update","Level1.hx",46,0x0d4fbe91)
HX_LOCAL_STACK_FRAME(_hx_pos_179fe9ae690126e0_57_LoadMap,"Level1","LoadMap",0x1341f4d5,"Level1.LoadMap","Level1.hx",57,0x0d4fbe91)
HX_LOCAL_STACK_FRAME(_hx_pos_179fe9ae690126e0_67_PlaceEntities,"Level1","PlaceEntities",0x6f6df027,"Level1.PlaceEntities","Level1.hx",67,0x0d4fbe91)

void Level1_obj::__construct( ::Dynamic MaxSize){
            	HX_GC_STACKFRAME(&_hx_pos_179fe9ae690126e0_12_new)
HXLINE(  17)		this->ground =  ::flixel::tile::FlxTilemap_obj::__alloc( HX_CTX );
HXLINE(  12)		super::__construct(MaxSize);
            	}

Dynamic Level1_obj::__CreateEmpty() { return new Level1_obj; }

void *Level1_obj::_hx_vtable = 0;

Dynamic Level1_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Level1_obj > _hx_result = new Level1_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Level1_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2335d9a7) {
		if (inClassId<=(int)0x174695b1) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x174695b1;
		} else {
			return inClassId==(int)0x2335d9a7;
		}
	} else {
		return inClassId==(int)0x25a685e0 || inClassId==(int)0x3634c52c;
	}
}

void Level1_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_179fe9ae690126e0_19_create)
HXLINE(  22)		::flixel::FlxG_obj::camera->bgColor = (int)-8388480;
HXLINE(  23)		this->background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(  24)		this->background->loadGraphic(HX_("assets/images/Level1BG.png",b8,33,76,51),null(),null(),null(),null(),null());
HXLINE(  25)		this->add(this->background);
HXLINE(  29)		this->LoadMap();
HXLINE(  36)		this->player =  ::Player_obj::__alloc( HX_CTX );
HXLINE(  39)		this->add(this->player);
            	}


void Level1_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_179fe9ae690126e0_46_update)
HXLINE(  48)		this->super::update(elapsed);
HXLINE(  49)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->ground) ),null(),::flixel::FlxObject_obj::separate_dyn());
HXLINE(  51)		::flixel::FlxG_obj::camera->follow(this->player,::flixel::FlxCameraFollowStyle_obj::PLATFORMER_dyn(),(int)2);
HXLINE(  52)		::flixel::FlxG_obj::camera->set_zoom((int)1);
            	}


void Level1_obj::LoadMap(){
            	HX_GC_STACKFRAME(&_hx_pos_179fe9ae690126e0_57_LoadMap)
HXLINE(  58)		this->map =  ::flixel::addons::editors::ogmo::FlxOgmoLoader_obj::__alloc( HX_CTX ,HX_("assets/data/lvl1.oel",f0,db,e8,de));
HXLINE(  59)		this->ground = this->map->loadTilemap(HX_("assets/images/tiles.png",35,bc,d1,f5),(int)16,(int)16,HX_("Tiles",65,6d,62,a3));
HXLINE(  60)		this->map->loadEntities(this->PlaceEntities_dyn(),HX_("Entities",61,52,47,6c));
HXLINE(  61)		this->ground->follow(null(),null(),null());
HXLINE(  62)		this->add(this->ground);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Level1_obj,LoadMap,(void))

void Level1_obj::PlaceEntities(::String type, ::Xml data){
            	HX_STACKFRAME(&_hx_pos_179fe9ae690126e0_67_PlaceEntities)
HXDLIN(  67)		::String _g = type.toLowerCase();
HXDLIN(  67)		if ((_g == HX_("Player",81,5f,4d,6c))) {
HXLINE(  70)			 ::Player _hx_tmp = this->player;
HXDLIN(  70)			_hx_tmp->set_x(::Std_obj::parseFloat(data->get(HX_("x",78,00,00,00))));
HXLINE(  71)			 ::Player _hx_tmp1 = this->player;
HXDLIN(  71)			_hx_tmp1->set_y(::Std_obj::parseFloat(data->get(HX_("y",79,00,00,00))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(Level1_obj,PlaceEntities,(void))


hx::ObjectPtr< Level1_obj > Level1_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< Level1_obj > __this = new Level1_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< Level1_obj > Level1_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	Level1_obj *__this = (Level1_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Level1_obj), true, "Level1"));
	*(void **)__this = Level1_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

Level1_obj::Level1_obj()
{
}

void Level1_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Level1);
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(ground,"ground");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Level1_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(ground,"ground");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Level1_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { return hx::Val( map ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"ground") ) { return hx::Val( ground ); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"LoadMap") ) { return hx::Val( LoadMap_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return hx::Val( background ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"PlaceEntities") ) { return hx::Val( PlaceEntities_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Level1_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmoLoader >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ground") ) { ground=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Level1_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("background","\xee","\x93","\x1d","\x26"));
	outFields->push(HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"));
	outFields->push(HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"));
	outFields->push(HX_HCSTRING("ground","\x87","\x22","\x28","\x1c"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Level1_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Level1_obj,background),HX_HCSTRING("background","\xee","\x93","\x1d","\x26")},
	{hx::fsObject /*::flixel::addons::editors::ogmo::FlxOgmoLoader*/ ,(int)offsetof(Level1_obj,map),HX_HCSTRING("map","\x9c","\x0a","\x53","\x00")},
	{hx::fsObject /*::Player*/ ,(int)offsetof(Level1_obj,player),HX_HCSTRING("player","\x61","\xeb","\xb8","\x37")},
	{hx::fsObject /*::flixel::tile::FlxTilemap*/ ,(int)offsetof(Level1_obj,ground),HX_HCSTRING("ground","\x87","\x22","\x28","\x1c")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Level1_obj_sStaticStorageInfo = 0;
#endif

static ::String Level1_obj_sMemberFields[] = {
	HX_HCSTRING("background","\xee","\x93","\x1d","\x26"),
	HX_HCSTRING("map","\x9c","\x0a","\x53","\x00"),
	HX_HCSTRING("player","\x61","\xeb","\xb8","\x37"),
	HX_HCSTRING("ground","\x87","\x22","\x28","\x1c"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("LoadMap","\xf6","\xab","\x2e","\xd6"),
	HX_HCSTRING("PlaceEntities","\x08","\x36","\x82","\x5f"),
	::String(null()) };

static void Level1_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Level1_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Level1_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Level1_obj::__mClass,"__mClass");
};

#endif

hx::Class Level1_obj::__mClass;

void Level1_obj::__register()
{
	hx::Object *dummy = new Level1_obj;
	Level1_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Level1","\x4d","\x32","\xe4","\xd8");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Level1_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Level1_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Level1_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Level1_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Level1_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Level1_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

